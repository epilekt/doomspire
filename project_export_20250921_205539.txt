=== FILE STRUCTURE (relative to D:\doomspire) ===
.\gradle.properties
.\grimcore\src\main\java\com\doomspire\grimcore\attach\MobStatCalculator.java
.\grimcore\src\main\java\com\doomspire\grimcore\attach\MobStatsAttachment.java
.\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerLoadoutAttachment.java
.\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerProgressAttachment.java
.\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerStatsAttachment.java
.\grimcore\src\main\java\com\doomspire\grimcore\combat\DamageContext.java
.\grimcore\src\main\java\com\doomspire\grimcore\combat\DamageEngine.java
.\grimcore\src\main\java\com\doomspire\grimcore\combat\EnvironmentalDamage.java
.\grimcore\src\main\java\com\doomspire\grimcore\config\CoreCommonConfig.java
.\grimcore\src\main\java\com\doomspire\grimcore\datapack\BalanceReloadListener.java
.\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\AttributesBalance.java
.\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\LevelsCurve.java
.\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\SpellTuning.java
.\grimcore\src\main\java\com\doomspire\grimcore\events\CoreDamageEvents.java
.\grimcore\src\main\java\com\doomspire\grimcore\events\CorePlayerEvents.java
.\grimcore\src\main\java\com\doomspire\grimcore\events\MobSpawnInit.java
.\grimcore\src\main\java\com\doomspire\grimcore\events\MobTuning.java
.\grimcore\src\main\java\com\doomspire\grimcore\Grimcore.java
.\grimcore\src\main\java\com\doomspire\grimcore\item\comp\BlockBonusComponent.java
.\grimcore\src\main\java\com\doomspire\grimcore\item\comp\ClassRestrictionComponent.java
.\grimcore\src\main\java\com\doomspire\grimcore\item\comp\StatBonusComponent.java
.\grimcore\src\main\java\com\doomspire\grimcore\net\GrimcoreNetworking.java
.\grimcore\src\main\java\com\doomspire\grimcore\net\S2C_SyncStats.java
.\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeData.java
.\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeManager.java
.\grimcore\src\main\java\com\doomspire\grimcore\stat\Attributes.java
.\grimcore\src\main\java\com\doomspire\grimcore\stat\DamageTypes.java
.\grimcore\src\main\java\com\doomspire\grimcore\stat\MobStatsProvider.java
.\grimcore\src\main\java\com\doomspire\grimcore\stat\ResistTypes.java
.\grimcore\src\main\java\com\doomspire\grimcore\stat\StatCalculator.java
.\grimcore\src\main\java\com\doomspire\grimcore\stat\StatSnapshot.java
.\grimcore\src\main\java\com\doomspire\grimcore\stats\ModAttachments.java
.\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerProgress.java
.\grimcore\src\main\java\com\doomspire\grimcore\xp\LevelTable.java
.\grimcore\src\main\java\com\doomspire\grimcore\xp\Rewards.java
.\grimcore\src\main\resources\data\grimcore\mobs\minecraft\zombie.json
.\grimfate\src\main\java\com\doomspire\grimfate\client\ClientEvents.java
.\grimfate\src\main\java\com\doomspire\grimfate\client\CustomHudOverlay.java
.\grimfate\src\main\java\com\doomspire\grimfate\client\gui\StatsHubScreen.java
.\grimfate\src\main\java\com\doomspire\grimfate\client\HudOverlay.java
.\grimfate\src\main\java\com\doomspire\grimfate\client\input\Keybinds.java
.\grimfate\src\main\java\com\doomspire\grimfate\client\KeyBindings.java
.\grimfate\src\main\java\com\doomspire\grimfate\config\ClientConfig.java
.\grimfate\src\main\java\com\doomspire\grimfate\config\ModConfig.java
.\grimfate\src\main\java\com\doomspire\grimfate\core\Config.java
.\grimfate\src\main\java\com\doomspire\grimfate\core\Grimfate.java
.\grimfate\src\main\java\com\doomspire\grimfate\core\GrimfateClient.java
.\grimfate\src\main\java\com\doomspire\grimfate\network\ModNetworking.java
.\grimfate\src\main\java\com\doomspire\grimfate\spell\FireboltEntity.java
.\grimfate\src\main\resources\assets\grimfate\blockstates\deepslate_odamite_ore.json
.\grimfate\src\main\resources\assets\grimfate\blockstates\odamite_ore.json
.\grimfate\src\main\resources\assets\grimfate\blockstates\test_crafting_station.json
.\grimfate\src\main\resources\assets\grimfate\blockstates\wild_herb.json
.\grimfate\src\main\resources\assets\grimfate\lang\en_us.json
.\grimfate\src\main\resources\assets\grimfate\lang\ru_ru.json
.\grimfate\src\main\resources\assets\grimfate\models\block\deepslate_odamite_ore.json
.\grimfate\src\main\resources\assets\grimfate\models\block\odamite_ore.json
.\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station.json
.\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station_placeholder.json
.\grimfate\src\main\resources\assets\grimfate\models\block\wild_herb.json
.\grimfate\src\main\resources\assets\grimfate\models\item\deepslate_odamite_ore.json
.\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ingot.json
.\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ore.json
.\grimfate\src\main\resources\assets\grimfate\models\item\raw_odamite.json
.\grimfate\src\main\resources\assets\grimfate\models\item\test_crafting_station.json
.\grimfate\src\main\resources\assets\grimfate\models\item\wild_herb.json
.\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\deepslate_odamite_ore.json
.\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\odamite_ore.json
.\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\test_crafting_station.json
.\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\wild_herb.json
.\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_odamite_ore.json
.\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_wild_herb.json
.\grimfate\src\main\resources\data\grimfate\recipes\odamite_ingot_from_smelting.json
.\grimfate\src\main\resources\data\grimfate\recipes\test_crafted_item.json
.\grimfate\src\main\resources\data\grimfate\tags\worldgen\biome\has_wild_herb.json
.\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\ore_odamite.json
.\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_patch.json
.\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_simple.json
.\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\ore_odamite_placed.json
.\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_patch_placed.json
.\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_simple_placed.json
.\grimfate\src\main\resources\data\grimfate\worldgen\structure\underground_dungeon.json
.\grimfate\src\main\resources\data\grimfate\worldgen\structure_set\underground_dungeon.json
.\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\main_pool.json
.\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\upstairs_pool.json
.\grimfate\src\main\resources\data\minecraft\tags\blocks\mineable\pickaxe.json
.\grimfate\src\main\resources\data\minecraft\tags\blocks\needs_iron_tool.json
n=== CONCATENATED CONTENTS ===n
----- BEGIN FILE: .\gradle.properties -----
# ------------------------------
# Gradle performance
# ------------------------------
org.gradle.jvmargs=-Xmx2G
org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.configuration-cache=true

# ------------------------------
# Minecraft / NeoForge versions
# ------------------------------
minecraft_version=1.21.1
minecraft_version_range=[1.21.1,)
neo_version=21.1.208
loader_version_range=[1,)

# ------------------------------
# Parchment (mappings & docs)
# ------------------------------
parchment_minecraft_version=1.21.1
parchment_mappings_version=2024.11.17

# ------------------------------
# Mod metadata (???????? ??? grimfate)
# ------------------------------
mod_id=grimfate
mod_name=Grimfate
mod_version=0.0.1
mod_license=All Rights Reserved
mod_group_id=com.doomspire
mod_authors=Epilekt
mod_description=RPG ??? Grimfate. ????????? ??????, ??????, ????? ? ????? ????????? ? Minecraft.

# ------------------------------
# Mod metadata (?????????? grimcore)
# ------------------------------
core_mod_id=grimcore
core_mod_name=Grimcore
core_mod_version=0.0.1
core_mod_group_id=com.doomspire
core_mod_authors=Epilekt
core_mod_description=Core library with shared RPG systems for Grimfate

n----- END FILE: .\gradle.properties -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\MobStatCalculator.java -----
package com.doomspire.grimcore.attach;

import com.doomspire.grimcore.stat.*;

public final class MobStatCalculator {
    private MobStatCalculator(){}

    public static StatSnapshot calculate(MobStatsAttachment att) {
        StatSnapshot s = new StatSnapshot();

        int vit  = att.getAttribute(Attributes.VITALITY);
        int str  = att.getAttribute(Attributes.STRENGTH);
        int intl = att.getAttribute(Attributes.INTELLIGENCE);
        int dex  = att.getAttribute(Attributes.DEXTERITY);
        int eva  = att.getAttribute(Attributes.EVASION);

        // База для мобов (потом вынесем в датапак balance)
        s.maxHealth   = 60 + vit * 20;
        s.regenHealth = 0 + vit * 1;

        // у мобов нет маны
        s.maxMana   = 0;
        s.regenMana = 0;

        // Базовый урон (только физика для старта)
        s.damage.put(DamageTypes.PHYS_MELEE, 3f + str * 0.5f);
        s.damage.put(DamageTypes.PHYS_RANGED, dex * 0.5f);

        // Элементы оставим 0 по умолчанию (будут у кастомных мобов)
        s.damage.putIfAbsent(DamageTypes.FIRE, 0f);
        s.damage.putIfAbsent(DamageTypes.FROST, 0f);
        s.damage.putIfAbsent(DamageTypes.LIGHTNING, 0f);
        s.damage.putIfAbsent(DamageTypes.POISON, 0f);

        // Защита/уклон/крит как старт
        s.resistances.put(ResistTypes.PHYS, 0.0f);
        s.resistances.put(ResistTypes.FIRE, 0.0f);
        s.resistances.put(ResistTypes.FROST, 0.0f);
        s.resistances.put(ResistTypes.LIGHTNING, 0.0f);
        s.resistances.put(ResistTypes.POISON, 0.0f);

        s.evasionChance = Math.min(0.5f, eva * 0.005f); // 0.5% за очко, кап 50%
        s.critChance = 0f;
        s.critDamage = 0.25f;

        return s;
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\MobStatCalculator.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\MobStatsAttachment.java -----
package com.doomspire.grimcore.attach;

import com.doomspire.grimcore.stat.*;
import net.minecraft.network.RegistryFriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;

import java.util.EnumMap;

public class MobStatsAttachment {
    private final EnumMap<Attributes, Integer> attributes = new EnumMap<>(Attributes.class);
    private int currentHealth = 100;
    private boolean dirty = true;
    private StatSnapshot snapshot = new StatSnapshot();

    public MobStatsAttachment() {
        // у мобов нет маны → пропускаем SPIRIT
        for (Attributes a : Attributes.values()) {
            if (a != Attributes.SPIRIT) attributes.put(a, 0);
        }
    }

    public int getAttribute(Attributes attr) {
        return attributes.getOrDefault(attr, 0);
    }
    public void setAttribute(Attributes attr, int value) {
        if (attr == Attributes.SPIRIT) return; // игнор
        attributes.put(attr, Math.max(0, value)); dirty = true;
    }
    public void addAttribute(Attributes attr, int delta) {
        if (attr == Attributes.SPIRIT) return;
        attributes.put(attr, Math.max(0, getAttribute(attr) + delta)); dirty = true;
    }

    public int getCurrentHealth() { return currentHealth; }
    public void setCurrentHealth(int v) {
        int max = (int)Math.max(1, getSnapshot().maxHealth);
        currentHealth = Math.max(0, Math.min(v, max));
    }

    public StatSnapshot getSnapshot() {
        if (dirty) {
            snapshot = MobStatCalculator.calculate(this);
            dirty = false;
        }
        return snapshot;
    }
    public void markDirty() { dirty = true; }

    // --- net sync ---
    public static final StreamCodec<RegistryFriendlyByteBuf, MobStatsAttachment> STREAM_CODEC =
            StreamCodec.of(MobStatsAttachment::encode, MobStatsAttachment::decode);

    private static void encode(RegistryFriendlyByteBuf buf, MobStatsAttachment att) {
        buf.writeVarInt(att.currentHealth);
        // порядок атрибутов фиксируем:
        for (Attributes a : Attributes.values()) {
            if (a == Attributes.SPIRIT) continue;
            buf.writeVarInt(att.getAttribute(a));
        }
    }
    private static MobStatsAttachment decode(RegistryFriendlyByteBuf buf) {
        MobStatsAttachment att = new MobStatsAttachment();
        att.currentHealth = buf.readVarInt();
        for (Attributes a : Attributes.values()) {
            if (a == Attributes.SPIRIT) continue;
            att.attributes.put(a, buf.readVarInt());
        }
        att.dirty = true;
        return att;
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\MobStatsAttachment.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerLoadoutAttachment.java -----
package com.doomspire.grimcore.attach;

public class PlayerLoadoutAttachment {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerLoadoutAttachment.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerProgressAttachment.java -----
package com.doomspire.grimcore.attach;

public class PlayerProgressAttachment {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerProgressAttachment.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerStatsAttachment.java -----
package com.doomspire.grimcore.attach;

import com.doomspire.grimcore.stat.*;
import net.minecraft.network.RegistryFriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;

import java.util.EnumMap;

/**
 * Attachment: хранит базовые атрибуты игрока и кэш статов.
 */
public class PlayerStatsAttachment {
    // текущее состояние ресурсов
    private int currentHealth = 100;
    private int currentMana   = 100;

    public int getCurrentHealth() { return currentHealth; }
    public int getCurrentMana()   { return currentMana;   }

    public void setCurrentHealth(int v) {
        int max = (int)Math.max(1, getSnapshot().maxHealth);
        currentHealth = Math.max(0, Math.min(v, max));
    }

    public void setCurrentMana(int v) {
        int max = (int)Math.max(1, getSnapshot().maxMana);
        currentMana = Math.max(0, Math.min(v, max));
    }

    public void markDirty() { this.dirty = true; }
    private final EnumMap<Attributes, Integer> attributes = new EnumMap<>(Attributes.class);
    private int unspentPoints = 0;

    private StatSnapshot snapshot = new StatSnapshot();
    private boolean dirty = true;

    public PlayerStatsAttachment() {
        for (Attributes a : Attributes.values()) {
            attributes.put(a, 0);
        }
    }

    // --- API ---

    public int getAttribute(Attributes attr) {
        return attributes.getOrDefault(attr, 0);
    }

    public void setAttribute(Attributes attr, int value) {
        attributes.put(attr, Math.max(0, value));
        dirty = true;
    }

    public void addAttribute(Attributes attr, int delta) {
        attributes.put(attr, Math.max(0, getAttribute(attr) + delta));
        dirty = true;
    }

    public int getUnspentPoints() {
        return unspentPoints;
    }

    public void addUnspentPoints(int amount) {
        unspentPoints += amount;
    }

    public void spendPoint(Attributes attr) {
        if (unspentPoints > 0) {
            addAttribute(attr, 1);
            unspentPoints--;
        }
    }

    public StatSnapshot getSnapshot() {
        if (dirty) {
            snapshot = StatCalculator.calculate(this);
            dirty = false;
        }
        return snapshot;
    }

    // --- Sync ---
    public static final StreamCodec<RegistryFriendlyByteBuf, PlayerStatsAttachment> STREAM_CODEC =
            StreamCodec.of(PlayerStatsAttachment::encode, PlayerStatsAttachment::decode);

    private static void encode(RegistryFriendlyByteBuf buf, PlayerStatsAttachment att) {
        buf.writeVarInt(att.unspentPoints);
        buf.writeVarInt(att.currentHealth);
        buf.writeVarInt(att.currentMana);
        for (Attributes a : Attributes.values()) {
            buf.writeVarInt(att.getAttribute(a));
        }
    }

    private static PlayerStatsAttachment decode(RegistryFriendlyByteBuf buf) {
        PlayerStatsAttachment att = new PlayerStatsAttachment();
        att.unspentPoints = buf.readVarInt();
        att.currentHealth = buf.readVarInt();
        att.currentMana   = buf.readVarInt();
        for (Attributes a : Attributes.values()) {
            att.attributes.put(a, buf.readVarInt());
        }
        att.dirty = true;
        return att;
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\attach\PlayerStatsAttachment.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\combat\DamageContext.java -----
package com.doomspire.grimcore.combat;

import com.doomspire.grimcore.stat.DamageTypes;
import net.minecraft.world.entity.LivingEntity;

import java.util.EnumMap;

/**
 * Контекст одного удара/заклинания.
 * Заполняется перед вызовом DamageEngine.
 */
public class DamageContext {
    public final LivingEntity attacker;
    public final LivingEntity target;
    public final EnumMap<DamageTypes, Float> damageMap = new EnumMap<>(DamageTypes.class);
    public boolean critical = false;

    public DamageContext(LivingEntity attacker, LivingEntity target) {
        this.attacker = attacker;
        this.target = target;
        for (DamageTypes t : DamageTypes.values()) damageMap.put(t, 0f);
    }

    public DamageContext add(DamageTypes type, float amount) {
        damageMap.put(type, damageMap.get(type) + amount);
        return this;
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\combat\DamageContext.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\combat\DamageEngine.java -----
package com.doomspire.grimcore.combat;

import com.doomspire.grimcore.attach.PlayerStatsAttachment;
import com.doomspire.grimcore.stat.*;
import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.world.entity.LivingEntity;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Центральный движок расчёта урона.
 */
public final class DamageEngine {
    private DamageEngine() {}

    public static float resolveAndApply(DamageContext ctx) {
        final LivingEntity target = ctx.target;
        final PlayerStatsAttachment tAtt = target.getData(ModAttachments.PLAYER_STATS.get());
        final StatSnapshot tSnap = tAtt.getSnapshot();

        // 1) Evade
        if (ThreadLocalRandom.current().nextFloat() < tSnap.evasionChance) {
            return 0f;
        }

        float total = 0f;

        for (var e : ctx.damageMap.entrySet()) {
            final DamageTypes dt = e.getKey();
            float dmg = e.getValue();
            if (dmg <= 0f) continue;

            // 2) Attr scaling — пока базово: dmg уже посчитан источником

            // 3) Crit (шанс/множитель берём у АТАКУЮЩЕГО позже — на сейчас читаем из цели как заглушку)
            if (ThreadLocalRandom.current().nextFloat() < tSnap.critChance) {
                ctx.critical = true;
                dmg *= (1f + tSnap.critDamage);
            }

            // 4) Resist
            final ResistTypes rt = mapResist(dt);
            float resist = tSnap.resistances.getOrDefault(rt, 0f);
            dmg *= (1f - resist);

            // 5) Block (phys only)
            if (rt == ResistTypes.PHYS && target.isBlocking()) {
                // простой вариант: повторно применяем физ-редукцию цели
                dmg *= (1f - tSnap.resistances.getOrDefault(ResistTypes.PHYS, 0f));
            }

            total += Math.max(0f, dmg);
        }

        // 6) Apply to custom HP
        int hp = tAtt.getCurrentHealth();
        tAtt.setCurrentHealth(hp - Math.round(total));
        tAtt.markDirty();

        return total;
    }

    private static ResistTypes mapResist(DamageTypes t) {
        return switch (t) {
            case PHYS_MELEE, PHYS_RANGED -> ResistTypes.PHYS;
            case FIRE -> ResistTypes.FIRE;
            case FROST -> ResistTypes.FROST;
            case LIGHTNING -> ResistTypes.LIGHTNING;
            case POISON -> ResistTypes.POISON;
        };
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\combat\DamageEngine.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\combat\EnvironmentalDamage.java -----
package com.doomspire.grimcore.combat;

import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.damagesource.DamageTypes;

import java.util.Map;

public final class EnvironmentalDamage {
    private EnvironmentalDamage(){}

    // проценты от maxHP (0..1)
    private static final Map<net.minecraft.resources.ResourceKey<net.minecraft.world.damagesource.DamageType>, Float> PERCENTS = Map.of(
            DamageTypes.FALL, 0.15f,
            DamageTypes.DROWN, 0.10f,
            DamageTypes.LAVA, 0.25f,
            DamageTypes.ON_FIRE, 0.08f,
            DamageTypes.IN_FIRE, 0.12f,
            DamageTypes.HOT_FLOOR, 0.10f,
            DamageTypes.SWEET_BERRY_BUSH, 0.04f,
            DamageTypes.OUTSIDE_BORDER, 1.0f
    );

    public static Float percentFor(DamageSource src) {
        for (var e : PERCENTS.entrySet()) {
            if (src.is(e.getKey())) return e.getValue();
        }
        return null;
    }
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\combat\EnvironmentalDamage.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\config\CoreCommonConfig.java -----
package com.doomspire.grimcore.config;

import net.neoforged.neoforge.common.ModConfigSpec;

public final class CoreCommonConfig {
    //    public static final ModConfigSpec SPEC;
    //    public static final ModConfigSpec.BooleanValue PULL_ENABLED;
    //    public static final ModConfigSpec.IntValue PULL_RADIUS;     // 0..4
    //    public static final ModConfigSpec.IntValue MAX_CONTAINERS;  // safety cap
    //
            //    static {
        //        ModConfigSpec.Builder b = new ModConfigSpec.Builder();
        //        PULL_ENABLED   = b.comment("Enable QoL pulling from nearby containers").define("pullEnabled", true);
        //        PULL_RADIUS    = b.comment("Pull radius (0..4)").defineInRange("pullRadius", 3, 0, 4);
        //        MAX_CONTAINERS = b.comment("Safety cap for scanned containers").defineInRange("maxContainers", 24, 1, 128);
        //        SPEC = b.build();
        //    }

    private CoreCommonConfig() {}
}




n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\config\CoreCommonConfig.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\BalanceReloadListener.java -----
package com.doomspire.grimcore.datapack;

public class BalanceReloadListener {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\BalanceReloadListener.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\AttributesBalance.java -----
package com.doomspire.grimcore.datapack.codec;

public class AttributesBalance {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\AttributesBalance.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\LevelsCurve.java -----
package com.doomspire.grimcore.datapack.codec;

public class LevelsCurve {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\LevelsCurve.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\SpellTuning.java -----
package com.doomspire.grimcore.datapack.codec;

public class SpellTuning {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\datapack\codec\SpellTuning.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\CoreDamageEvents.java -----
// src/main/java/com/doomspire/grimcore/events/CoreDamageEvents.java
package com.doomspire.grimcore.events;

import com.doomspire.grimcore.attach.MobStatsAttachment;
import com.doomspire.grimcore.combat.DamageContext;
import com.doomspire.grimcore.combat.DamageEngine;
import com.doomspire.grimcore.combat.EnvironmentalDamage;
import com.doomspire.grimcore.stat.DamageTypes;
import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.core.registries.Registries;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.common.NeoForge;
import net.neoforged.neoforge.event.entity.living.LivingDamageEvent;

public final class CoreDamageEvents {

    private CoreDamageEvents() {}

    /** Регистрируй из инициализации: NeoForge.EVENT_BUS.register(CoreDamageEvents.class); */
    public static void registerToBus() {
        NeoForge.EVENT_BUS.register(CoreDamageEvents.class);
    }

    /**
     * Ядро обработки урона. Никакой предметной/спелл-логики здесь нет.
     * Сначала экологический урон (% от MaxHP), затем боевой пайплайн.
     */
    @SubscribeEvent
    public static void onLivingDamage(LivingDamageEvent.Pre event) {
        LivingEntity living = event.getEntity();
        if (living.level().isClientSide() || !living.isAlive()) return;

        // ---------- Экологический урон как % MaxHP ----------
        Float pct = EnvironmentalDamage.percentFor(event.getSource());
        if (pct != null) {
            if (living instanceof ServerPlayer sp) {
                var ps = sp.getData(ModAttachments.PLAYER_STATS.get());
                if (ps != null) {
                    int max = (int) Math.max(1, ps.getSnapshot().maxHealth);
                    ps.setCurrentHealth(ps.getCurrentHealth() - Math.max(1, Math.round(max * pct)));
                    ps.markDirty();
                    event.setNewDamage(0f);
                    if (ps.getCurrentHealth() <= 0) killByGeneric(sp);
                }
                return;
            } else {
                var ms = living.getData(ModAttachments.MOB_STATS.get());
                if (ms != null) {
                    int max = (int) Math.max(1, ms.getSnapshot().maxHealth);
                    ms.setCurrentHealth(ms.getCurrentHealth() - Math.max(1, Math.round(max * pct)));
                    ms.markDirty();
                    event.setNewDamage(0f);
                    if (ms.getCurrentHealth() <= 0) killByGeneric(living);
                }
                return;
            }
        }

        float amountAfterContent = event.getNewDamage();
        if (amountAfterContent <= 0f) return;

        Entity src = event.getSource() != null ? event.getSource().getEntity() : null;

        // ---------- Цель — игрок: расчёт через DamageEngine ----------
        if (living instanceof ServerPlayer serverPlayer) {
            LivingEntity attacker = (src instanceof LivingEntity le) ? le : null;

            DamageContext ctx = new DamageContext(attacker, serverPlayer);
            if (attacker != null) {
                // если атакует моб с кастомными статами — берём его физический урон
                MobStatsAttachment aStats = attacker.getData(ModAttachments.MOB_STATS.get());
                if (aStats != null) {
                    float phys = aStats.getSnapshot().damage.getOrDefault(DamageTypes.PHYS_MELEE, 0f);
                    ctx.add(DamageTypes.PHYS_MELEE, phys);
                } else {
                    // иначе fallback на ванильное число
                    ctx.add(DamageTypes.PHYS_MELEE, amountAfterContent);
                }
            } else {
                ctx.add(DamageTypes.PHYS_MELEE, amountAfterContent);
            }

            DamageEngine.resolveAndApply(ctx);
            event.setNewDamage(0f);

            var att = serverPlayer.getData(ModAttachments.PLAYER_STATS.get());
            if (att != null && att.getCurrentHealth() <= 0) killByGeneric(serverPlayer);
            return;
        }

        // ---------- Цель — моб: прямое применение к кастомному HP ----------
        {
            float base = amountAfterContent;
            if (src instanceof LivingEntity le) {
                MobStatsAttachment aStats = le.getData(ModAttachments.MOB_STATS.get());
                if (aStats != null) {
                    base = aStats.getSnapshot().damage.getOrDefault(DamageTypes.PHYS_MELEE, base);
                }
            }
            MobStatsAttachment tStats = living.getData(ModAttachments.MOB_STATS.get());
            if (tStats != null) {
                tStats.setCurrentHealth(tStats.getCurrentHealth() - Math.round(base));
                tStats.markDirty();
                event.setNewDamage(0f);
                if (tStats.getCurrentHealth() <= 0) killByGeneric(living);
            }
        }
    }

    private static void killByGeneric(LivingEntity entity) {
        entity.setHealth(0f);
        DamageSource genericKill = new DamageSource(
                entity.level().registryAccess()
                        .registryOrThrow(Registries.DAMAGE_TYPE)
                        .getHolderOrThrow(net.minecraft.world.damagesource.DamageTypes.GENERIC_KILL)
        );
        entity.hurt(genericKill, Float.MAX_VALUE);
    }
}



n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\CoreDamageEvents.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\CorePlayerEvents.java -----
package com.doomspire.grimcore.events;

import com.doomspire.grimcore.Grimcore;
import com.doomspire.grimcore.attach.PlayerStatsAttachment;
import com.doomspire.grimcore.net.GrimcoreNetworking;
import com.doomspire.grimcore.net.S2C_SyncStats;
import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.server.level.ServerPlayer;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.common.NeoForge;
import net.neoforged.neoforge.event.entity.player.PlayerEvent;

public final class CorePlayerEvents {
    private CorePlayerEvents() {}

    /** Зарегистрируй где-то в инициализации: NeoForge.EVENT_BUS.register(CorePlayerEvents.class); */
    public static void registerToBus() {
        NeoForge.EVENT_BUS.register(CorePlayerEvents.class);
    }

    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        if (!(event.getEntity() instanceof ServerPlayer player)) return;

        PlayerStatsAttachment stats = player.getData(ModAttachments.PLAYER_STATS.get());

        // инициализация текущих ресурсов при первом входе
        var snap = stats.getSnapshot();
        if (stats.getCurrentHealth() <= 0) stats.setCurrentHealth((int)snap.maxHealth);
        if (stats.getCurrentMana()   <= 0) stats.setCurrentMana((int)snap.maxMana);

        GrimcoreNetworking.sendToPlayer(player, new S2C_SyncStats(stats));
    }
}



n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\CorePlayerEvents.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\MobSpawnInit.java -----
package com.doomspire.grimcore.events;

import com.doomspire.grimcore.attach.MobStatsAttachment;
import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.LivingEntity;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.common.NeoForge;
import net.neoforged.neoforge.event.entity.EntityJoinLevelEvent;

public final class MobSpawnInit {
    private MobSpawnInit(){}

    public static void registerToBus() { NeoForge.EVENT_BUS.register(MobSpawnInit.class); }

    @SubscribeEvent
    public static void onJoin(EntityJoinLevelEvent event) {
        if (event.getLevel().isClientSide()) return;
        if (!(event.getEntity() instanceof LivingEntity living)) return;
        if (living instanceof net.minecraft.world.entity.player.Player) return;

        MobStatsAttachment att = living.getData(ModAttachments.MOB_STATS.get());
        if (att == null) {
            att = new MobStatsAttachment();
            living.setData(ModAttachments.MOB_STATS.get(), att);
        }

        // Применяем data-driven оверрайд (если есть)
        MobTuning.applyPerEntityOverrides((ServerLevel) event.getLevel(), living, att);

        // Инициализируем HP от max
        int max = (int)Math.max(1, att.getSnapshot().maxHealth);
        if (att.getCurrentHealth() <= 0) att.setCurrentHealth(max);
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\MobSpawnInit.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\MobTuning.java -----
package com.doomspire.grimcore.events;

import com.doomspire.grimcore.attach.MobStatsAttachment;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.LivingEntity;

/**
 * Заглушка-провайдер пер-мобных оверрайдов.
 * На следующем шаге подменим на чтение JSON из datapack.
 */
public final class MobTuning {
    private MobTuning(){}

    public static void applyPerEntityOverrides(ServerLevel level, LivingEntity mob, MobStatsAttachment att) {
        ResourceLocation id = mob.getType().builtInRegistryHolder().key().location();
        // Пример: зомби — пожирнее, паук — ловчее
        if ("minecraft".equals(id.getNamespace()) && "zombie".equals(id.getPath())) {
            att.addAttribute(com.doomspire.grimcore.stat.Attributes.VITALITY, 3);
            att.addAttribute(com.doomspire.grimcore.stat.Attributes.STRENGTH, 2);
        } else if ("minecraft".equals(id.getNamespace()) && "spider".equals(id.getPath())) {
            att.addAttribute(com.doomspire.grimcore.stat.Attributes.EVASION, 5);
            att.addAttribute(com.doomspire.grimcore.stat.Attributes.DEXTERITY, 3);
        }
        att.markDirty();
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\events\MobTuning.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\Grimcore.java -----
package com.doomspire.grimcore;

import com.doomspire.grimcore.events.CoreDamageEvents;
import com.doomspire.grimcore.events.CorePlayerEvents;
import com.doomspire.grimcore.net.GrimcoreNetworking;
import com.doomspire.grimcore.stats.ModAttachments;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;
import net.neoforged.neoforge.common.NeoForge;

@Mod(Grimcore.MODID)
public final class Grimcore {
    public static final String MODID = "grimcore";
    public Grimcore(IEventBus modEventBus, ModContainer container) {
        ModAttachments.ATTACHMENT_TYPES.register(modEventBus);
        NeoForge.EVENT_BUS.register(CoreDamageEvents.class);
        NeoForge.EVENT_BUS.register(CorePlayerEvents.class);
        GrimcoreNetworking.init(modEventBus);
    }
}




n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\Grimcore.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\item\comp\BlockBonusComponent.java -----
package com.doomspire.grimcore.item.comp;

public class BlockBonusComponent {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\item\comp\BlockBonusComponent.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\item\comp\ClassRestrictionComponent.java -----
package com.doomspire.grimcore.item.comp;

public class ClassRestrictionComponent {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\item\comp\ClassRestrictionComponent.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\item\comp\StatBonusComponent.java -----
package com.doomspire.grimcore.item.comp;

public class StatBonusComponent {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\item\comp\StatBonusComponent.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\net\GrimcoreNetworking.java -----
package com.doomspire.grimcore.net;

import net.minecraft.resources.ResourceLocation;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent;
import net.minecraft.server.level.ServerPlayer;

public final class GrimcoreNetworking {
    public static final String MODID = "doomspire";

    private GrimcoreNetworking() {}

    public static void init(IEventBus modBus) {
        modBus.addListener(GrimcoreNetworking::onRegister);
    }

    private static void onRegister(RegisterPayloadHandlersEvent event) {
        var registrar = event.registrar("grimcore").versioned("1");
        registrar.playToClient(
                S2C_SyncStats.TYPE,
                S2C_SyncStats.STREAM_CODEC,
                (msg, ctx) -> S2C_SyncStats.handle(msg)
        );
    }

    public static void sendToPlayer(ServerPlayer player, Object payload) {
        if (payload instanceof S2C_SyncStats p) {
            player.connection.send(p);
        }
        // сюда будем добавлять другие пакеты по мере появления
    }
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\net\GrimcoreNetworking.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\net\S2C_SyncStats.java -----
package com.doomspire.grimcore.net;

import com.doomspire.grimcore.attach.PlayerStatsAttachment;
import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.client.Minecraft;
import net.minecraft.network.RegistryFriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;

public record S2C_SyncStats(PlayerStatsAttachment stats) implements CustomPacketPayload {
    public static final ResourceLocation ID =
            ResourceLocation.fromNamespaceAndPath("grimcore", "sync_stats");
    public static final Type<S2C_SyncStats> TYPE = new Type<>(ID);

    public static final StreamCodec<RegistryFriendlyByteBuf, S2C_SyncStats> STREAM_CODEC =
            StreamCodec.composite(
                    PlayerStatsAttachment.STREAM_CODEC, S2C_SyncStats::stats,
                    S2C_SyncStats::new
            );

    @Override public Type<? extends CustomPacketPayload> type() { return TYPE; }

    public static void handle(S2C_SyncStats msg) {
        Minecraft.getInstance().execute(() -> {
            var player = Minecraft.getInstance().player;
            if (player != null) {
                player.setData(ModAttachments.PLAYER_STATS.get(), msg.stats);
            }
        });
    }
}



n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\net\S2C_SyncStats.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeData.java -----
package com.doomspire.grimcore.runtime;

/**
 * Лёгкий runtime-хаб для каждого игрока.
 * Не сериализуется. Хранится в ConcurrentHashMap на сервере.
 */
public class PlayerRuntimeData {
    public double healthAccumulator = 0.0;
    public double manaAccumulator = 0.0;
    public long lastSyncTick = 0L; // gameTime последнего синка
    public boolean dirty = false;  // пометка для внешних систем
    // Кеши для тяжёлых вычислений
    public int cachedDamage = -1;
    public long cacheUntilTick = 0L;
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeData.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeManager.java -----
package com.doomspire.grimcore.runtime;

import net.minecraft.server.level.ServerPlayer;

import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Простой manager для runtime-данных (сервер).
 */
public final class PlayerRuntimeManager {
    private static final ConcurrentHashMap<UUID, PlayerRuntimeData> RUNTIME = new ConcurrentHashMap<>();

    private PlayerRuntimeManager() {}

    public static PlayerRuntimeData getOrCreate(ServerPlayer player) {
        return RUNTIME.computeIfAbsent(player.getUUID(), uuid -> new PlayerRuntimeData());
    }

    public static PlayerRuntimeData get(ServerPlayer player) {
        return RUNTIME.get(player.getUUID());
    }

    public static void remove(ServerPlayer player) {
        if (player != null) RUNTIME.remove(player.getUUID());
    }

    public static void remove(UUID uuid) {
        if (uuid != null) RUNTIME.remove(uuid);
    }

    public static void clearAll() {
        RUNTIME.clear();
    }
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeManager.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\Attributes.java -----
package com.doomspire.grimcore.stat;

/**
 * Базовые атрибуты, которые игрок получает и распределяет при повышении уровня.
 */
public enum Attributes {
    VITALITY,      // здоровье, реген, бонус к блоку
    STRENGTH,      // физический урон ближнего боя
    INTELLIGENCE,  // урон заклинаний и стихий
    SPIRIT,        // мана, реген маны
    DEXTERITY,     // физический урон дальнего боя
    EVASION,       // шанс уворота
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\Attributes.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\DamageTypes.java -----
package com.doomspire.grimcore.stat;

/**
 * Типы урона. Используются в DamageContext и StatSnapshot.
 */
public enum DamageTypes {
    PHYS_MELEE,
    PHYS_RANGED,
    FIRE,
    FROST,
    LIGHTNING,
    POISON
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\DamageTypes.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\MobStatsProvider.java -----
// src/main/java/com/doomspire/grimcore/stats/MobStatsProvider.java
package com.doomspire.grimcore.stat;

import com.doomspire.grimcore.attach.MobStatsAttachment;

import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.world.entity.LivingEntity;

public class MobStatsProvider {

    public static MobStatsAttachment get(LivingEntity mob) {
        return mob.getData(ModAttachments.MOB_STATS.get());
    }

    public static void set(LivingEntity mob, MobStatsAttachment att) {
        mob.setData(ModAttachments.MOB_STATS.get(), att);
    }

    public static void damage(LivingEntity mob, int amount) {
        MobStatsAttachment att = get(mob);
        if (att == null) return;
        att.setCurrentHealth(att.getCurrentHealth() - Math.max(0, amount));
        att.markDirty();
    }

    public static void heal(LivingEntity mob, int amount) {
        MobStatsAttachment att = get(mob);
        if (att == null) return;
        att.setCurrentHealth(att.getCurrentHealth() + Math.max(0, amount));
        att.markDirty();
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\MobStatsProvider.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\ResistTypes.java -----
package com.doomspire.grimcore.stat;

/**
 * Сопротивления урону. Применяются в DamageEngine.
 */
public enum ResistTypes {
    PHYS,
    FIRE,
    FROST,
    LIGHTNING,
    POISON
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\ResistTypes.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\StatCalculator.java -----
package com.doomspire.grimcore.stat;

import com.doomspire.grimcore.attach.PlayerStatsAttachment;

/**
 * Пересчитывает агрегированные статы (StatSnapshot) на основе атрибутов, предметов и бонусов.
 * Вызов: при изменении атрибутов/уровня/экипировки/эффектов.
 */
public class StatCalculator {

    public static StatSnapshot calculate(PlayerStatsAttachment att) {
        StatSnapshot snapshot = new StatSnapshot();

        // Атрибуты
        int vit = att.getAttribute(Attributes.VITALITY);
        int str = att.getAttribute(Attributes.STRENGTH);
        int intl = att.getAttribute(Attributes.INTELLIGENCE);
        int spirit = att.getAttribute(Attributes.SPIRIT);
        int dex = att.getAttribute(Attributes.DEXTERITY);
        int eva = att.getAttribute(Attributes.EVASION);

        // Примеры формул (значения можно вынести в JSON balance/attributes.json)
        snapshot.maxHealth = 100 + vit * 20;
        snapshot.regenHealth = 1 + vit * 1;

        snapshot.maxMana = 50 + spirit * 30;
        snapshot.regenMana = 1 + spirit * 3;

        snapshot.damage.put(DamageTypes.PHYS_MELEE, str * 0.03f);
        snapshot.damage.put(DamageTypes.PHYS_RANGED, dex * 0.03f);
        snapshot.damage.put(DamageTypes.FIRE, intl * 0.02f);
        snapshot.damage.put(DamageTypes.FROST, intl * 0.02f);
        snapshot.damage.put(DamageTypes.LIGHTNING, intl * 0.02f);
        snapshot.damage.put(DamageTypes.POISON, intl * 0.02f);

        snapshot.critChance = 0f; // 1% за очко
        snapshot.critDamage = 0.5f;        // +50% базово
        snapshot.lifesteal = 0f;
        snapshot.manasteal = 0f;
        snapshot.evasionChance = eva * 0.01f;

        // TODO: сюда позже подключим бонусы предметов через StatAggregator

        return snapshot;
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\StatCalculator.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\StatSnapshot.java -----
package com.doomspire.grimcore.stat;

import java.util.EnumMap;

/**
 * Кэшированное состояние всех характеристик игрока/моба.
 * Используется в боевом движке и GUI.
 */
public class StatSnapshot {
    // Ресурсы
    public float maxHealth;
    public float regenHealth;
    public float maxMana;
    public float regenMana;

    // Урон
    public EnumMap<DamageTypes, Float> damage = new EnumMap<>(DamageTypes.class);

    // Резисты
    public EnumMap<ResistTypes, Float> resistances = new EnumMap<>(ResistTypes.class);

    // Боевые модификаторы
    public float critChance;
    public float critDamage;
    public float lifesteal;
    public float manasteal;
    public float evasionChance;

    public StatSnapshot() {
        for (DamageTypes type : DamageTypes.values()) {
            damage.put(type, 0f);
        }
        for (ResistTypes type : ResistTypes.values()) {
            resistances.put(type, 0f);
        }
    }
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stat\StatSnapshot.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stats\ModAttachments.java -----
package com.doomspire.grimcore.stats;

import com.doomspire.grimcore.Grimcore;
import com.doomspire.grimcore.attach.MobStatsAttachment;
import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.NeoForgeRegistries;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.attachment.AttachmentType;
import com.doomspire.grimcore.attach.PlayerStatsAttachment;

public final class ModAttachments {
    private ModAttachments() {}

    public static final DeferredRegister<AttachmentType<?>> ATTACHMENT_TYPES =
            DeferredRegister.create(NeoForgeRegistries.ATTACHMENT_TYPES, Grimcore.MODID);

    public static final DeferredHolder<AttachmentType<?>, AttachmentType<PlayerStatsAttachment>> PLAYER_STATS =
            ATTACHMENT_TYPES.register("player_stats",
                    () -> AttachmentType.builder(PlayerStatsAttachment::new)
                            // персист сохранять позже, когда добавим Codec:
                            // .serialize(YourCodecHere)
                            .sync(PlayerStatsAttachment.STREAM_CODEC) // сеть ОК
                            .build());

    public static final DeferredHolder<AttachmentType<?>, AttachmentType<MobStatsAttachment>> MOB_STATS =
            ATTACHMENT_TYPES.register("mob_stats",
                    () -> AttachmentType.builder(MobStatsAttachment::new)
                            .sync(MobStatsAttachment.STREAM_CODEC) // можно выключить, если на клиенте не нужно
                            .build());
}


n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stats\ModAttachments.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerProgress.java -----
package com.doomspire.grimcore.stats;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.ByteBufCodecs;
import net.minecraft.network.codec.StreamCodec;

/**
 * Чистые данные об уровне игрока.
 * Только хранение + сериализация в NBT/сеть.
 */
public record PlayerProgress(int level, int exp, int expCap) {

    public static final Codec<PlayerProgress> CODEC = RecordCodecBuilder.create(instance -> instance.group(
            Codec.INT.fieldOf("level").forGetter(PlayerProgress::level),
            Codec.INT.fieldOf("exp").forGetter(PlayerProgress::exp),
            Codec.INT.fieldOf("exp_cap").forGetter(PlayerProgress::expCap)
    ).apply(instance, PlayerProgress::new));

    public static final StreamCodec<FriendlyByteBuf, PlayerProgress> STREAM_CODEC = StreamCodec.composite(
            ByteBufCodecs.INT, PlayerProgress::level,
            ByteBufCodecs.INT, PlayerProgress::exp,
            ByteBufCodecs.INT, PlayerProgress::expCap,
            PlayerProgress::new
    );

    public static final PlayerProgress DEFAULT = new PlayerProgress(1, 0, 100);

    /**
     * Вспомогательный метод для проверки прогресса на клиенте (HUD).
     */
    public String hudString() {
        return "Lvl " + level + " (" + exp + "/" + expCap + ")";
    }
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerProgress.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\xp\LevelTable.java -----
package com.doomspire.grimcore.xp;

public class LevelTable {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\xp\LevelTable.java -----n
----- BEGIN FILE: .\grimcore\src\main\java\com\doomspire\grimcore\xp\Rewards.java -----
package com.doomspire.grimcore.xp;

public class Rewards {
}

n----- END FILE: .\grimcore\src\main\java\com\doomspire\grimcore\xp\Rewards.java -----n
----- BEGIN FILE: .\grimcore\src\main\resources\data\grimcore\mobs\minecraft\zombie.json -----
{
  "attributes": {
    "vitality": 3,
    "strength": 2,
    "dexterity": 0,
    "intelligence": 0,
    "evasion": 0
  },
  "resistances": {
    "phys": 0.10,
    "fire": 0.00,
    "frost": 0.00,
    "lightning": 0.00,
    "poison": 0.00
  },
  "damage": {
    "phys_melee": 25.0
  }
}

n----- END FILE: .\grimcore\src\main\resources\data\grimcore\mobs\minecraft\zombie.json -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\ClientEvents.java -----
package com.doomspire.grimfate.client;

import net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent;
import net.neoforged.bus.api.SubscribeEvent;


public class ClientEvents {
    @SubscribeEvent
    public static void registerKeyMappings(RegisterKeyMappingsEvent event) {
        event.register(KeyBindings.CAST_SPELL);
    }
}


n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\ClientEvents.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\CustomHudOverlay.java -----
package com.doomspire.grimfate.client;

import com.doomspire.grimcore.attach.PlayerStatsAttachment;
import com.doomspire.grimcore.stats.ModAttachments;
import com.doomspire.grimcore.stats.PlayerProgress;
import com.doomspire.grimfate.config.ClientConfig;
import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.client.event.RenderGuiEvent;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class CustomHudOverlay {

    private static final ResourceLocation HEALTH_BAR_EMPTY =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/health_bar_bg.png");
    private static final ResourceLocation HEALTH_BAR_FULL =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/health_bar_fill.png");

    private static final ResourceLocation MANA_BAR_EMPTY =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/health_bar_bg.png");
    private static final ResourceLocation MANA_BAR_FULL =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/mana_bar_fill.png");

    private static final ResourceLocation XP_BG =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/xp_background.png");
    private static final ResourceLocation XP_FILL =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/xp_fill.png");

    private static final Map<UUID, Float> DISPLAYED_HEALTH = new ConcurrentHashMap<>();
    private static final Map<UUID, Float> DISPLAYED_MANA   = new ConcurrentHashMap<>();
    private static final Map<UUID, Float> DISPLAYED_XP     = new ConcurrentHashMap<>();
    private static final float LERP_ALPHA = 0.20f;

    @SubscribeEvent
    public static void onRenderGui(RenderGuiEvent.Post event) {
        Minecraft mc = Minecraft.getInstance();
        if (mc.player == null || mc.screen != null) return;

        var player = mc.player;
        PlayerStatsAttachment statsAtt = player.getData(ModAttachments.PLAYER_STATS.get());
        if (statsAtt == null) return;

        var snap = statsAtt.getSnapshot();
        int health    = statsAtt.getCurrentHealth();
        int maxHealth = Math.max(1, (int) snap.maxHealth);
        int mana      = statsAtt.getCurrentMana();
        int maxMana   = Math.max(1, (int) snap.maxMana);

        // TEMP: до появления PlayerProgressAttachment показываем дефолт
        PlayerProgress progress = PlayerProgress.DEFAULT;

        GuiGraphics gui = event.getGuiGraphics();
        int screenWidth = mc.getWindow().getGuiScaledWidth();
        int screenHeight = mc.getWindow().getGuiScaledHeight();
        UUID uuid = player.getUUID();

        renderHealthBar(gui, mc, screenWidth, screenHeight, uuid, health, maxHealth);
        renderManaBar(gui, mc, screenWidth, screenHeight, uuid, mana, maxMana);
        renderXpIcon(gui, mc, screenWidth, screenHeight, uuid, progress);
    }

    private static void renderHealthBar(GuiGraphics gui, Minecraft mc, int screenWidth, int screenHeight,
                                        UUID uuid, int health, int maxHealth) {
        final int textureWidth = 120;
        final int textureHeight = 12;

        float displayedHealth = DISPLAYED_HEALTH.getOrDefault(uuid, (float) health);
        displayedHealth += ((float) health - displayedHealth) * LERP_ALPHA;
        displayedHealth = Math.max(0, Math.min(displayedHealth, maxHealth));
        DISPLAYED_HEALTH.put(uuid, displayedHealth);

        float healthPercent = displayedHealth / (float) maxHealth;

        int xH = screenWidth / 2 + ClientConfig.HEALTH_BAR_X.get();
        int yH = screenHeight + ClientConfig.HEALTH_BAR_Y.get();

        gui.blit(HEALTH_BAR_EMPTY, xH, yH, 0, 0, textureWidth, textureHeight, textureWidth, textureHeight);

        int filledHealth = (int) (textureWidth * healthPercent);
        if (filledHealth > 0) {
            gui.blit(HEALTH_BAR_FULL, xH, yH, 0, 0, filledHealth, textureHeight, textureWidth, textureHeight);
        }

        String healthText = health + "/" + maxHealth;
        int textX = xH + textureWidth / 2 - mc.font.width(healthText) / 2;
        int textY = yH + (textureHeight - mc.font.lineHeight) / 2;
        gui.drawString(mc.font, Component.literal(healthText), textX, textY, 0xFFFFFF, true);
    }

    private static void renderManaBar(GuiGraphics gui, Minecraft mc, int screenWidth, int screenHeight,
                                      UUID uuid, int mana, int maxMana) {
        final int textureWidth = 120;
        final int textureHeight = 12;

        float displayedMana = DISPLAYED_MANA.getOrDefault(uuid, (float) mana);
        displayedMana += ((float) mana - displayedMana) * LERP_ALPHA;
        displayedMana = Math.max(0, Math.min(displayedMana, maxMana));
        DISPLAYED_MANA.put(uuid, displayedMana);

        float manaPercent = displayedMana / (float) maxMana;

        int xM = screenWidth / 2 + ClientConfig.MANA_BAR_X.get();
        int yM = screenHeight + ClientConfig.MANA_BAR_Y.get();

        gui.blit(MANA_BAR_EMPTY, xM, yM, 0, 0, textureWidth, textureHeight, textureWidth, textureHeight);

        int filledMana = (int) (textureWidth * manaPercent);
        if (filledMana > 0) {
            gui.blit(MANA_BAR_FULL, xM, yM, 0, 0, filledMana, textureHeight, textureWidth, textureHeight);
        }

        String manaText = mana + "/" + maxMana;
        int textX = xM + textureWidth / 2 - mc.font.width(manaText) / 2;
        int textY = yM + (textureHeight - mc.font.lineHeight) / 2;
        gui.drawString(mc.font, Component.literal(manaText), textX, textY, 0xFFFFFF, true);
    }

    private static void renderXpIcon(GuiGraphics gui, Minecraft mc, int screenWidth, int screenHeight,
                                     UUID uuid, PlayerProgress progress) {
        final int textureWidth = 32;
        final int textureHeight = 32;

        int exp = progress.exp();
        int cap = Math.max(1, progress.expCap());

        float displayedXp = DISPLAYED_XP.getOrDefault(uuid, (float) exp);
        displayedXp += ((float) exp - displayedXp) * LERP_ALPHA;
        displayedXp = Math.max(0, Math.min(displayedXp, cap));
        DISPLAYED_XP.put(uuid, displayedXp);

        float xpPercent = displayedXp / (float) cap;

        int xXp = screenWidth / 2 + ClientConfig.XP_ICON_X.get();
        int yXp = screenHeight + ClientConfig.XP_ICON_Y.get();

        gui.blit(XP_BG, xXp, yXp, 0, 0, textureWidth, textureHeight, textureWidth, textureHeight);

        int filledHeight = (int) (textureHeight * xpPercent);
        if (filledHeight > 0) {
            gui.blit(XP_FILL, xXp, yXp + (textureHeight - filledHeight),
                    0, textureHeight - filledHeight,
                    textureWidth, filledHeight,
                    textureWidth, textureHeight);
        }

        String levelText = String.valueOf(progress.level());
        int levelX = xXp + textureWidth / 2 - mc.font.width(levelText) / 2;
        int levelY = yXp + textureHeight / 2 - mc.font.lineHeight / 2;
        gui.drawString(mc.font, Component.literal(levelText), levelX, levelY, 0xFFFFFF, true);

        String expText = exp + "/" + cap;
        int expX = xXp + textureWidth / 2 - mc.font.width(expText) / 2;
        int expY = yXp + textureHeight + 2;
        gui.drawString(mc.font, Component.literal(expText), expX, expY, 0xFFFFFF, false);
    }
}
n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\CustomHudOverlay.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\gui\StatsHubScreen.java -----
package com.doomspire.grimfate.client.gui;

public class StatsHubScreen {
}

n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\gui\StatsHubScreen.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\HudOverlay.java -----
package com.doomspire.grimfate.client;

import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.neoforge.client.event.RenderGuiLayerEvent;

@EventBusSubscriber(modid = Grimfate.MODID, value = Dist.CLIENT)
public class HudOverlay {
    @SubscribeEvent
    public static void onRenderGuiOverlay(RenderGuiLayerEvent.Pre event) {
        // Убираем отображение ванили
        ResourceLocation layerName = event.getName();
        if (layerName.equals(ResourceLocation.fromNamespaceAndPath("minecraft", "player_health"))) {
            event.setCanceled(true);
        }
        if (layerName.equals(ResourceLocation.fromNamespaceAndPath("minecraft", "armor_level"))) {
            event.setCanceled(true);
        }
    }
}

n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\HudOverlay.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\input\Keybinds.java -----
package com.doomspire.grimfate.client.input;

public class Keybinds {
}

n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\input\Keybinds.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\KeyBindings.java -----
package com.doomspire.grimfate.client;

import com.mojang.blaze3d.platform.InputConstants;
import cpw.mods.util.Lazy;
import net.minecraft.client.KeyMapping;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent;
import org.lwjgl.glfw.GLFW;

public class KeyBindings {
    public static final KeyMapping CAST_SPELL =
            new KeyMapping("key.cast_spell", GLFW.GLFW_KEY_R, "key.categories.gameplay");

    public static void init(IEventBus bus) {
        bus.addListener(KeyBindings::register);
    }

    private static void register(RegisterKeyMappingsEvent event) {
        event.register(CAST_SPELL);
    }
}



n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\client\KeyBindings.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\config\ClientConfig.java -----
package com.doomspire.grimfate.config;

import net.neoforged.fml.config.ModConfig;
import net.neoforged.neoforge.common.ModConfigSpec;

public class ClientConfig {
    public static final ModConfigSpec.Builder BUILDER = new ModConfigSpec.Builder();

    public static final ModConfigSpec.IntValue HEALTH_BAR_X;
    public static final ModConfigSpec.IntValue HEALTH_BAR_Y;

    public static final ModConfigSpec.IntValue MANA_BAR_X;
    public static final ModConfigSpec.IntValue MANA_BAR_Y;

    public static final ModConfigSpec.IntValue XP_ICON_X;
    public static final ModConfigSpec.IntValue XP_ICON_Y;

    static {
        HEALTH_BAR_X = BUILDER
                .comment("Смещение полоски здоровья по X")
                .defineInRange("hud.health_bar_x", -60, -500, 500);

        HEALTH_BAR_Y = BUILDER
                .comment("Смещение полоски здоровья по Y")
                .defineInRange("hud.health_bar_y", -78, -500, 500);

        MANA_BAR_X = BUILDER
                .comment("Смещение полоски маны по X")
                .defineInRange("hud.mana_bar_x", -60, -500, 500);

        MANA_BAR_Y = BUILDER
                .comment("Смещение полоски маны по Y")
                .defineInRange("hud.mana_bar_y", -65, -500, 500);

        XP_ICON_X = BUILDER
                .comment("Смещение иконки опыта по X")
                .defineInRange("hud.xp_icon_x", -30, -500, 500);

        XP_ICON_Y = BUILDER
                .comment("Смещение иконки опыта по Y")
                .defineInRange("hud.xp_icon_y", -100, -500, 500);
    }

    public static final ModConfigSpec SPEC = BUILDER.build();
}



n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\config\ClientConfig.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\config\ModConfig.java -----
package com.doomspire.grimfate.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * 🔧 ModConfig — централизованный конфиг мода
 * В будущем:
 *  - хранение базовых статов для игроков и мобов
 *  - множители регена/урона
 *  - настройка аффиксов
 *  - редактирование через JSON без пересборки
 */
public class ModConfig {
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static final File CONFIG_FILE = new File("config/grimfate.json");

    // ===== Пример будущих параметров (пока закомментированы) =====

    // Базовые статы игрока
    // public int basePlayerHealth = 100;
    // public float basePlayerRegen = 0.5f; // 0.5 хп в сек.
    // public int basePlayerMana = 50;
    // public float manaRegenMultiplier = 1.0f;

    // Базовые статы мобов
    // public int baseMobHealth = 50;
    // public float baseMobRegen = 1.0f;

    // Множители урона/защиты
    // public float damageMultiplier = 1.0f;
    // public float defenseMultiplier = 1.0f;

    // Система аффиксов (позже)
    // public float affixDropChance = 0.1f;

    // =============================================================

    private static ModConfig INSTANCE = new ModConfig();

    public static ModConfig get() {
        return INSTANCE;
    }

    /** Загружаем конфиг из JSON */
    public static void load() {
        if (!CONFIG_FILE.exists()) {
            save(); // если файла нет, создаём дефолт
            return;
        }

        try (FileReader reader = new FileReader(CONFIG_FILE)) {
            INSTANCE = GSON.fromJson(reader, ModConfig.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /** Сохраняем конфиг в JSON */
    public static void save() {
        try (FileWriter writer = new FileWriter(CONFIG_FILE)) {
            GSON.toJson(INSTANCE, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\config\ModConfig.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\core\Config.java -----
package com.doomspire.grimfate.core;

import java.util.List;

import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.common.ModConfigSpec;

// An example config class. This is not required, but it's a good idea to have one to keep your config organized.
// Demonstrates how to use Neo's config APIs
public class Config {
    private static final ModConfigSpec.Builder BUILDER = new ModConfigSpec.Builder();

    public static final ModConfigSpec.BooleanValue LOG_DIRT_BLOCK = BUILDER
            .comment("Whether to log the dirt block on common setup")
            .define("logDirtBlock", true);

    public static final ModConfigSpec.IntValue MAGIC_NUMBER = BUILDER
            .comment("A magic number")
            .defineInRange("magicNumber", 42, 0, Integer.MAX_VALUE);

    public static final ModConfigSpec.ConfigValue<String> MAGIC_NUMBER_INTRODUCTION = BUILDER
            .comment("What you want the introduction message to be for the magic number")
            .define("magicNumberIntroduction", "The magic number is... ");

    // a list of strings that are treated as resource locations for items
    public static final ModConfigSpec.ConfigValue<List<? extends String>> ITEM_STRINGS = BUILDER
            .comment("A list of items to log on common setup.")
            .defineListAllowEmpty("items", List.of("minecraft:iron_ingot"), () -> "", Config::validateItemName);

    static final ModConfigSpec SPEC = BUILDER.build();

    private static boolean validateItemName(final Object obj) {
        return obj instanceof String itemName && BuiltInRegistries.ITEM.containsKey(ResourceLocation.parse(itemName));
    }
}

n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\core\Config.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\core\Grimfate.java -----
package com.doomspire.grimfate.core;

import com.doomspire.grimfate.config.ClientConfig;
import com.doomspire.grimfate.network.ModNetworking;
import com.mojang.logging.LogUtils;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.*;
import net.minecraft.world.level.block.Blocks;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.config.ModConfig;
import net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent;
import net.neoforged.fml.loading.FMLEnvironment;
import net.neoforged.neoforge.client.ClientHooks;
import net.neoforged.neoforge.common.NeoForge;
import net.neoforged.neoforge.event.BuildCreativeModeTabContentsEvent;
import net.neoforged.neoforge.event.server.ServerStartingEvent;
import net.neoforged.neoforge.registries.DeferredRegister;
import org.slf4j.Logger;

@Mod(Grimfate.MODID)
public class Grimfate {
    public static final String MODID = "grimfate";
    public static final String NET_PROTOCOL = "1";
    public static final Logger LOGGER = LogUtils.getLogger();

    /** Наш креатив-таб. */
    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS =
            DeferredRegister.create(Registries.CREATIVE_MODE_TAB, MODID);


    public Grimfate(IEventBus modEventBus, ModContainer modContainer) {
        // Конфиги
        modContainer.registerConfig(ModConfig.Type.CLIENT, ClientConfig.SPEC);
        modContainer.registerConfig(ModConfig.Type.COMMON, Config.SPEC);

        // Сеть контента
        modEventBus.addListener(ModNetworking::register);

        // Реестры контента
        CREATIVE_MODE_TABS.register(modEventBus);

        // Слушатели фаз
        modEventBus.addListener(this::commonSetup);
        modEventBus.addListener(this::addCreative);

        if (FMLEnvironment.dist == Dist.CLIENT) {
            modEventBus.register(ClientHooks.ClientEvents.class); // key mappings
        }
    }

    private void commonSetup(FMLCommonSetupEvent event) {
        LOGGER.info("HELLO FROM COMMON SETUP");
        if (Config.LOG_DIRT_BLOCK.getAsBoolean()) {
            LOGGER.info("DIRT BLOCK >> {}", BuiltInRegistries.BLOCK.getKey(Blocks.DIRT));
        }
        LOGGER.info("{}{}", Config.MAGIC_NUMBER_INTRODUCTION.get(), Config.MAGIC_NUMBER.getAsInt());
        Config.ITEM_STRINGS.get().forEach(item -> LOGGER.info("ITEM >> {}", item));
    }

    private void addCreative(BuildCreativeModeTabContentsEvent event) {

    }


    public static ResourceLocation rl(String path) {
        return ResourceLocation.fromNamespaceAndPath(MODID, path);
    }

    @SubscribeEvent
    public void onServerStarting(ServerStartingEvent event) {
        LOGGER.info("HELLO from server starting");
    }
}



n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\core\Grimfate.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\core\GrimfateClient.java -----
package com.doomspire.grimfate.core;

import com.doomspire.grimfate.client.CustomHudOverlay;
import net.minecraft.client.Minecraft;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.event.lifecycle.FMLClientSetupEvent;
import net.neoforged.neoforge.client.gui.ConfigurationScreen;
import net.neoforged.neoforge.client.gui.IConfigScreenFactory;
import net.neoforged.neoforge.common.NeoForge;

// This class will not load on dedicated servers. Accessing client side code from here is safe.
@Mod(value = Grimfate.MODID, dist = Dist.CLIENT)
// You can use EventBusSubscriber to automatically register all static methods in the class annotated with @SubscribeEvent
@EventBusSubscriber(modid = Grimfate.MODID, value = Dist.CLIENT)
public class GrimfateClient {
    public GrimfateClient(ModContainer container) {
        // Allows NeoForge to create a config screen for this mod's configs.
        // The config screen is accessed by going to the Mods screen > clicking on your mod > clicking on config.
        // Do not forget to add translations for your config options to the en_us.json file.
        container.registerExtensionPoint(IConfigScreenFactory.class, ConfigurationScreen::new);
    }

    @SubscribeEvent
    static void onClientSetup(FMLClientSetupEvent event) {
        NeoForge.EVENT_BUS.register(CustomHudOverlay.class);
        // Some client setup code
        Grimfate.LOGGER.info("HELLO FROM CLIENT SETUP");
        Grimfate.LOGGER.info("MINECRAFT NAME >> {}", Minecraft.getInstance().getUser().getName());
    }
}

n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\core\GrimfateClient.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\network\ModNetworking.java -----
package com.doomspire.grimfate.network;

import net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent;
import net.neoforged.neoforge.network.registration.PayloadRegistrar;


/** Регистрация и клиентская отправка payload'ов мода. */
public final class ModNetworking {
    private ModNetworking() {}

    public static void register(final RegisterPayloadHandlersEvent event) {
        final PayloadRegistrar registrar = event.registrar("grimfate").versioned("1");
    }
}









n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\network\ModNetworking.java -----n
----- BEGIN FILE: .\grimfate\src\main\java\com\doomspire\grimfate\spell\FireboltEntity.java -----
package com.doomspire.grimfate.spell;

import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.projectile.SmallFireball;
import net.minecraft.world.level.Level;
import net.minecraft.world.phys.Vec3;

/**
 * Кастомный фаерболт с полем урона.
 */
public class FireboltEntity extends SmallFireball {
    private final int spellDamage;

    public FireboltEntity(Level level, LivingEntity shooter, Vec3 direction, int damage) {
        // используем стандартный EntityType.SMALL_FIREBALL
        super(EntityType.SMALL_FIREBALL, level);
        this.setOwner(shooter);

        // Задаём вектор движения (скорость)
        this.setDeltaMovement(direction);

        this.spellDamage = damage;
    }

    public int getSpellDamage() {
        return spellDamage;
    }
}

n----- END FILE: .\grimfate\src\main\java\com\doomspire\grimfate\spell\FireboltEntity.java -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\deepslate_odamite_ore.json -----
{
  "variants": { "": { "model": "grimfate:block/deepslate_odamite_ore" } }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\deepslate_odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\odamite_ore.json -----
{
  "variants": { "": { "model": "grimfate:block/odamite_ore" } }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\test_crafting_station.json -----
{
  "variants": {
    "part=right,facing=north": { "model": "grimfate:block/test_crafting_station" },
    "part=right,facing=east":  { "model": "grimfate:block/test_crafting_station", "y": 90 },
    "part=right,facing=south": { "model": "grimfate:block/test_crafting_station", "y": 180 },
    "part=right,facing=west":  { "model": "grimfate:block/test_crafting_station", "y": 270 },

    "part=left,facing=north":  { "model": "grimfate:block/test_crafting_station_placeholder" },
    "part=left,facing=east":   { "model": "grimfate:block/test_crafting_station_placeholder", "y": 90 },
    "part=left,facing=south":  { "model": "grimfate:block/test_crafting_station_placeholder", "y": 180 },
    "part=left,facing=west":   { "model": "grimfate:block/test_crafting_station_placeholder", "y": 270 }
  }
}



n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\test_crafting_station.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\wild_herb.json -----
{
  "variants": { "": { "model": "grimfate:block/wild_herb" } }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\blockstates\wild_herb.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\lang\en_us.json -----
{
  "itemGroup.grimfate": "Example Mod Tab",
  "block.grimfate.example_block": "Example Block",
  "item.grimfate.example_item": "Example Item",

  "grimfate.configuration.title": "Pantheon of Doom Configs",
  "grimfate.configuration.section.grimfate.common.toml": "Pantheon of Doom Configs",
  "grimfate.configuration.section.grimfate.common.toml.title": "Pantheon of Doom Configs",
  "grimfate.configuration.items": "Item List",
  "grimfate.configuration.logDirtBlock": "Log Dirt Block",
  "grimfate.configuration.magicNumberIntroduction": "Magic Number Text",
  "grimfate.configuration.magicNumber": "Magic Number",
  "block.grimfate.test_crafting_station": "Test Crafting Station",
  "item.grimfate.test_crafted_item": "Test Crafted Item",
  "gui.grimfate.recipes": "Recipes",
  "gui.grimfate.refresh": "Refresh",
  "gui.grimfate.autofill": "Autofill",
  "gui.grimfate.reset": "Reset"
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\lang\en_us.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\lang\ru_ru.json -----
{
  "block.grimfate.odamite_ore": "Одамитовая руда",
  "block.grimfate.deepslate_odamite_ore": "Глубинная одамитовая руда",
  "block.grimfate.wild_herb": "Дикая трава",
  "item.grimfate.raw_odamite": "Сырой одамит",
  "item.grimfate.odamite_ingot": "Слиток одамита",
  "block.grimfate.test_crafting_station": "Тестовая крафтовая станция",
  "item.grimfate.test_crafted_item": "Тестовый скрафченный предмет",
  "gui.grimfate.recipes": "Рецепты",
  "gui.grimfate.refresh": "Обновить",
  "gui.grimfate.autofill": "Заполнить",
  "gui.grimfate.reset": "Сбросить"
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\lang\ru_ru.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\deepslate_odamite_ore.json -----
{
  "parent": "minecraft:block/cube_all",
  "textures": { "all": "grimfate:block/deepslate_odamite_ore" }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\deepslate_odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\odamite_ore.json -----
{
  "parent": "minecraft:block/cube_all",
  "textures": { "all": "grimfate:block/odamite_ore" }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station.json -----
{
	"format_version": "1.9.0",
	"credit": "Made with Blockbench",
	"texture_size": [64, 64],
	"textures": {
		"0": "block/texture1",
		"1": "block/texture2",
		"2": "block/texture3",
		"3": "block/texture4",
		"4": "block/texture_main",
		"particle": "block/texture"
	},
	"elements": [
		{
			"name": "main",
			"from": [0, 12, 0],
			"to": [32, 16, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [16, 12, 0]},
			"faces": {
				"north": {"uv": [0, 8, 8, 9], "texture": "#4"},
				"east": {"uv": [8, 1, 12, 2], "texture": "#4"},
				"south": {"uv": [8, 0, 16, 1], "texture": "#4"},
				"west": {"uv": [8, 2, 12, 3], "texture": "#4"},
				"up": {"uv": [8, 4, 0, 0], "texture": "#4"},
				"down": {"uv": [8, 4, 0, 8], "texture": "#4"}
			}
		},
		{
			"name": "nw",
			"from": [28, 0, 0],
			"to": [32, 12, 4],
			"rotation": {"angle": 0, "axis": "y", "origin": [28, 0, 0]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#2"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#2"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#2"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#2"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#2"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#2"}
			}
		},
		{
			"name": "sw",
			"from": [28, 0, 12],
			"to": [32, 12, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [28, 0, 12]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#3"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#3"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#3"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#3"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#3"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#3"}
			}
		},
		{
			"name": "se",
			"from": [0, 0, 12],
			"to": [4, 12, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [0, 0, 12]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#0"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#0"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#0"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#0"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#0"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#0"}
			}
		},
		{
			"name": "ne",
			"from": [0, 0, 0],
			"to": [4, 12, 4],
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#1"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#1"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#1"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#1"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#1"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#1"}
			}
		}
	]
}
n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station_placeholder.json -----
{ "parent": "minecraft:block/cube_all", "textures": { "all": "minecraft:block/air" } }

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station_placeholder.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\wild_herb.json -----
{
  "parent": "minecraft:block/cross",
  "textures": { "cross": "grimfate:block/wild_herb" }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\block\wild_herb.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\deepslate_odamite_ore.json -----
{ "parent": "grimfate:block/deepslate_odamite_ore" }

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\deepslate_odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ingot.json -----
{
  "parent": "minecraft:item/generated",
  "textures": { "layer0": "grimfate:item/odamite_ingot" }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ingot.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ore.json -----
{ "parent": "grimfate:block/odamite_ore" }

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\raw_odamite.json -----
{
  "parent": "minecraft:item/generated",
  "textures": { "layer0": "grimfate:item/raw_odamite" }
}

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\raw_odamite.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\test_crafting_station.json -----
{
  "parent": "grimfate:block/test_crafting_station_base"
}


n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\test_crafting_station.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\wild_herb.json -----
{ "parent": "grimfate:block/wild_herb" }

n----- END FILE: .\grimfate\src\main\resources\assets\grimfate\models\item\wild_herb.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\deepslate_odamite_ore.json -----
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:raw_odamite" } ]
    }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\deepslate_odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\odamite_ore.json -----
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:raw_odamite" } ]
    }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\test_crafting_station.json -----
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        { "type": "minecraft:item", "name": "grimfate:test_crafting_station" }
      ],
      "conditions": [
        { "condition": "minecraft:survives_explosion" }
      ]
    }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\test_crafting_station.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\wild_herb.json -----
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:wild_herb" } ]
    }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\wild_herb.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_odamite_ore.json -----
{
  "type": "neoforge:add_features",
  "biomes": "#minecraft:is_overworld",
  "features": "grimfate:ore_odamite_placed",
  "step": "underground_ores"
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_odamite_ore.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_wild_herb.json -----
{
  "type": "neoforge:add_features",
  "biomes": "#grimfate:has_wild_herb",
  "features": "grimfate:wild_herb_patch_placed",
  "step": "vegetal_decoration"
}


n----- END FILE: .\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_wild_herb.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\recipes\odamite_ingot_from_smelting.json -----
{
  "type": "minecraft:smelting",
  "ingredient": { "item": "grimfate:raw_odamite" },
  "result": "grimfate:odamite_ingot",
  "experience": 0.7,
  "cookingtime": 200
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\recipes\odamite_ingot_from_smelting.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\recipes\test_crafted_item.json -----
{
  "type": "grimfate:station_shapeless",
  "ingredients": [
    { "item": "minecraft:cobblestone" },
    { "item": "minecraft:oak_planks" },
    { "item": "minecraft:iron_ingot" },
    { "item": "minecraft:copper_ingot" },
    { "item": "minecraft:gold_ingot" },
    { "item": "minecraft:dirt" }
  ],
  "result": { "item": "grimfate:test_crafted_item", "count": 1 }
}


n----- END FILE: .\grimfate\src\main\resources\data\grimfate\recipes\test_crafted_item.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\tags\worldgen\biome\has_wild_herb.json -----
{
  "replace": false,
  "values": [
    "minecraft:plains",
    "minecraft:forest",
    "minecraft:flower_forest",
    "minecraft:taiga"
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\tags\worldgen\biome\has_wild_herb.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\ore_odamite.json -----
{
  "type": "minecraft:ore",
  "config": {
    "discard_chance_on_air_exposure": 0.0,
    "size": 7,
    "targets": [
      {
        "state": { "Name": "grimfate:odamite_ore" },
        "target": { "predicate_type": "minecraft:tag_match", "tag": "minecraft:stone_ore_replaceables" }
      },
      {
        "state": { "Name": "grimfate:deepslate_odamite_ore" },
        "target": { "predicate_type": "minecraft:tag_match", "tag": "minecraft:deepslate_ore_replaceables" }
      }
    ]
  }
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\ore_odamite.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_patch.json -----
{
  "type": "minecraft:random_patch",
  "config": {
    "tries": 48,
    "xz_spread": 6,
    "y_spread": 2,
    "feature": "grimfate:wild_herb_simple_placed"
  }
}


n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_patch.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_simple.json -----
{
  "type": "minecraft:simple_block",
  "config": {
    "to_place": {
      "type": "minecraft:simple_state_provider",
      "state": { "Name": "grimfate:wild_herb" }
    }
  }
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_simple.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\ore_odamite_placed.json -----
{
  "feature": "grimfate:ore_odamite",
  "placement": [
    { "type": "minecraft:count", "count": 10 },
    { "type": "minecraft:in_square" },
    {
      "type": "minecraft:height_range",
      "height": {
        "type": "minecraft:trapezoid",
        "min_inclusive": { "absolute": -32 },
        "max_inclusive": { "absolute": 48 }
      }
    },
    { "type": "minecraft:biome" }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\ore_odamite_placed.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_patch_placed.json -----
{
  "feature": "grimfate:wild_herb_patch",
  "placement": [
    { "type": "minecraft:count", "count": 2 },
    { "type": "minecraft:in_square" },
    { "type": "minecraft:heightmap", "heightmap": "WORLD_SURFACE_WG" },
    { "type": "minecraft:biome" }
  ]
}


n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_patch_placed.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_simple_placed.json -----
{
  "feature": "grimfate:wild_herb_simple",
  "placement": []
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_simple_placed.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\structure\underground_dungeon.json -----
{
  "type": "minecraft:jigsaw",
  "start_pool": "grimfate:dungeon/main_pool",
  "size": 7,
  "use_expansion_hack": false,
  "step": "underground_structures",
  "terrain_adaptation": "beard_box",

  "start_height": { "above_bottom": 32 },

  "max_distance_from_center": 80,
  "biomes": "#minecraft:is_overworld",
  "spawn_overrides": {}
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\structure\underground_dungeon.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\structure_set\underground_dungeon.json -----
{
  "structures": [
    { "structure": "grimfate:underground_dungeon", "weight": 1 }
  ],
  "placement": {
    "type": "minecraft:random_spread",
    "spacing": 30,
    "separation": 12,
    "salt": 424242
  }
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\structure_set\underground_dungeon.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\main_pool.json -----
{
  "name": "grimfate:dungeon/main_pool",
  "fallback": "minecraft:empty",
  "elements": [
    {
      "weight": 3,
      "element": {
        "location": "grimfate:room",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 3,
      "element": {
        "location": "grimfate:corridor",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 1,
      "element": {
        "location": "grimfate:upstair_room",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\main_pool.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\upstairs_pool.json -----
{
  "name": "grimfate:dungeon/upstairs_pool",
  "fallback": "minecraft:empty",
  "elements": [
    {
      "weight": 3,
      "element": {
        "location": "grimfate:upstair",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 1,
      "element": {
        "location": "grimfate:entrance",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }
  ]
}

n----- END FILE: .\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\upstairs_pool.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\minecraft\tags\blocks\mineable\pickaxe.json -----
{ "replace": false, "values": [
  "grimfate:odamite_ore",
  "grimfate:deepslate_odamite_ore"
]}

n----- END FILE: .\grimfate\src\main\resources\data\minecraft\tags\blocks\mineable\pickaxe.json -----n
----- BEGIN FILE: .\grimfate\src\main\resources\data\minecraft\tags\blocks\needs_iron_tool.json -----
{ "replace": false, "values": [
  "grimfate:odamite_ore",
  "grimfate:deepslate_odamite_ore"
]}

n----- END FILE: .\grimfate\src\main\resources\data\minecraft\tags\blocks\needs_iron_tool.json -----n
