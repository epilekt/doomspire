D:\doomspire\grimfate\.git
D:\doomspire\grimfate\run
D:\doomspire\grimfate\src
D:\doomspire\grimfate\.git\hooks
D:\doomspire\grimfate\.git\info
D:\doomspire\grimfate\.git\logs
D:\doomspire\grimfate\.git\objects
D:\doomspire\grimfate\.git\refs
D:\doomspire\grimfate\.git\logs\refs
D:\doomspire\grimfate\.git\logs\refs\heads
D:\doomspire\grimfate\.git\logs\refs\remotes
D:\doomspire\grimfate\.git\logs\refs\remotes\origin
D:\doomspire\grimfate\.git\objects\00
D:\doomspire\grimfate\.git\objects\01
D:\doomspire\grimfate\.git\objects\02
D:\doomspire\grimfate\.git\objects\04
D:\doomspire\grimfate\.git\objects\05
D:\doomspire\grimfate\.git\objects\06
D:\doomspire\grimfate\.git\objects\07
D:\doomspire\grimfate\.git\objects\09
D:\doomspire\grimfate\.git\objects\0a
D:\doomspire\grimfate\.git\objects\0b
D:\doomspire\grimfate\.git\objects\0c
D:\doomspire\grimfate\.git\objects\0d
D:\doomspire\grimfate\.git\objects\0e
D:\doomspire\grimfate\.git\objects\0f
D:\doomspire\grimfate\.git\objects\10
D:\doomspire\grimfate\.git\objects\11
D:\doomspire\grimfate\.git\objects\12
D:\doomspire\grimfate\.git\objects\13
D:\doomspire\grimfate\.git\objects\14
D:\doomspire\grimfate\.git\objects\17
D:\doomspire\grimfate\.git\objects\18
D:\doomspire\grimfate\.git\objects\19
D:\doomspire\grimfate\.git\objects\1a
D:\doomspire\grimfate\.git\objects\1b
D:\doomspire\grimfate\.git\objects\1c
D:\doomspire\grimfate\.git\objects\1e
D:\doomspire\grimfate\.git\objects\20
D:\doomspire\grimfate\.git\objects\21
D:\doomspire\grimfate\.git\objects\22
D:\doomspire\grimfate\.git\objects\23
D:\doomspire\grimfate\.git\objects\25
D:\doomspire\grimfate\.git\objects\26
D:\doomspire\grimfate\.git\objects\27
D:\doomspire\grimfate\.git\objects\28
D:\doomspire\grimfate\.git\objects\29
D:\doomspire\grimfate\.git\objects\2a
D:\doomspire\grimfate\.git\objects\2b
D:\doomspire\grimfate\.git\objects\2c
D:\doomspire\grimfate\.git\objects\2d
D:\doomspire\grimfate\.git\objects\2e
D:\doomspire\grimfate\.git\objects\31
D:\doomspire\grimfate\.git\objects\32
D:\doomspire\grimfate\.git\objects\33
D:\doomspire\grimfate\.git\objects\34
D:\doomspire\grimfate\.git\objects\35
D:\doomspire\grimfate\.git\objects\37
D:\doomspire\grimfate\.git\objects\38
D:\doomspire\grimfate\.git\objects\39
D:\doomspire\grimfate\.git\objects\3a
D:\doomspire\grimfate\.git\objects\3b
D:\doomspire\grimfate\.git\objects\3c
D:\doomspire\grimfate\.git\objects\3d
D:\doomspire\grimfate\.git\objects\3f
D:\doomspire\grimfate\.git\objects\40
D:\doomspire\grimfate\.git\objects\41
D:\doomspire\grimfate\.git\objects\42
D:\doomspire\grimfate\.git\objects\43
D:\doomspire\grimfate\.git\objects\44
D:\doomspire\grimfate\.git\objects\45
D:\doomspire\grimfate\.git\objects\47
D:\doomspire\grimfate\.git\objects\48
D:\doomspire\grimfate\.git\objects\49
D:\doomspire\grimfate\.git\objects\4a
D:\doomspire\grimfate\.git\objects\4b
D:\doomspire\grimfate\.git\objects\4c
D:\doomspire\grimfate\.git\objects\4f
D:\doomspire\grimfate\.git\objects\50
D:\doomspire\grimfate\.git\objects\51
D:\doomspire\grimfate\.git\objects\52
D:\doomspire\grimfate\.git\objects\53
D:\doomspire\grimfate\.git\objects\55
D:\doomspire\grimfate\.git\objects\56
D:\doomspire\grimfate\.git\objects\57
D:\doomspire\grimfate\.git\objects\58
D:\doomspire\grimfate\.git\objects\59
D:\doomspire\grimfate\.git\objects\5a
D:\doomspire\grimfate\.git\objects\5b
D:\doomspire\grimfate\.git\objects\5c
D:\doomspire\grimfate\.git\objects\5d
D:\doomspire\grimfate\.git\objects\5e
D:\doomspire\grimfate\.git\objects\5f
D:\doomspire\grimfate\.git\objects\60
D:\doomspire\grimfate\.git\objects\61
D:\doomspire\grimfate\.git\objects\62
D:\doomspire\grimfate\.git\objects\63
D:\doomspire\grimfate\.git\objects\64
D:\doomspire\grimfate\.git\objects\65
D:\doomspire\grimfate\.git\objects\66
D:\doomspire\grimfate\.git\objects\68
D:\doomspire\grimfate\.git\objects\69
D:\doomspire\grimfate\.git\objects\6a
D:\doomspire\grimfate\.git\objects\6b
D:\doomspire\grimfate\.git\objects\6c
D:\doomspire\grimfate\.git\objects\6d
D:\doomspire\grimfate\.git\objects\6e
D:\doomspire\grimfate\.git\objects\6f
D:\doomspire\grimfate\.git\objects\70
D:\doomspire\grimfate\.git\objects\71
D:\doomspire\grimfate\.git\objects\72
D:\doomspire\grimfate\.git\objects\73
D:\doomspire\grimfate\.git\objects\74
D:\doomspire\grimfate\.git\objects\76
D:\doomspire\grimfate\.git\objects\77
D:\doomspire\grimfate\.git\objects\79
D:\doomspire\grimfate\.git\objects\7a
D:\doomspire\grimfate\.git\objects\7b
D:\doomspire\grimfate\.git\objects\7c
D:\doomspire\grimfate\.git\objects\7e
D:\doomspire\grimfate\.git\objects\7f
D:\doomspire\grimfate\.git\objects\80
D:\doomspire\grimfate\.git\objects\81
D:\doomspire\grimfate\.git\objects\82
D:\doomspire\grimfate\.git\objects\84
D:\doomspire\grimfate\.git\objects\85
D:\doomspire\grimfate\.git\objects\86
D:\doomspire\grimfate\.git\objects\87
D:\doomspire\grimfate\.git\objects\88
D:\doomspire\grimfate\.git\objects\89
D:\doomspire\grimfate\.git\objects\8b
D:\doomspire\grimfate\.git\objects\8c
D:\doomspire\grimfate\.git\objects\8e
D:\doomspire\grimfate\.git\objects\8f
D:\doomspire\grimfate\.git\objects\90
D:\doomspire\grimfate\.git\objects\91
D:\doomspire\grimfate\.git\objects\92
D:\doomspire\grimfate\.git\objects\93
D:\doomspire\grimfate\.git\objects\94
D:\doomspire\grimfate\.git\objects\95
D:\doomspire\grimfate\.git\objects\96
D:\doomspire\grimfate\.git\objects\97
D:\doomspire\grimfate\.git\objects\98
D:\doomspire\grimfate\.git\objects\99
D:\doomspire\grimfate\.git\objects\9a
D:\doomspire\grimfate\.git\objects\9b
D:\doomspire\grimfate\.git\objects\9c
D:\doomspire\grimfate\.git\objects\9d
D:\doomspire\grimfate\.git\objects\9e
D:\doomspire\grimfate\.git\objects\9f
D:\doomspire\grimfate\.git\objects\a0
D:\doomspire\grimfate\.git\objects\a1
D:\doomspire\grimfate\.git\objects\a2
D:\doomspire\grimfate\.git\objects\a3
D:\doomspire\grimfate\.git\objects\a5
D:\doomspire\grimfate\.git\objects\a6
D:\doomspire\grimfate\.git\objects\a7
D:\doomspire\grimfate\.git\objects\a9
D:\doomspire\grimfate\.git\objects\aa
D:\doomspire\grimfate\.git\objects\ab
D:\doomspire\grimfate\.git\objects\ac
D:\doomspire\grimfate\.git\objects\ad
D:\doomspire\grimfate\.git\objects\af
D:\doomspire\grimfate\.git\objects\b0
D:\doomspire\grimfate\.git\objects\b1
D:\doomspire\grimfate\.git\objects\b2
D:\doomspire\grimfate\.git\objects\b3
D:\doomspire\grimfate\.git\objects\b4
D:\doomspire\grimfate\.git\objects\b5
D:\doomspire\grimfate\.git\objects\b6
D:\doomspire\grimfate\.git\objects\b7
D:\doomspire\grimfate\.git\objects\b8
D:\doomspire\grimfate\.git\objects\b9
D:\doomspire\grimfate\.git\objects\bb
D:\doomspire\grimfate\.git\objects\bc
D:\doomspire\grimfate\.git\objects\bd
D:\doomspire\grimfate\.git\objects\c0
D:\doomspire\grimfate\.git\objects\c1
D:\doomspire\grimfate\.git\objects\c2
D:\doomspire\grimfate\.git\objects\c4
D:\doomspire\grimfate\.git\objects\c5
D:\doomspire\grimfate\.git\objects\c6
D:\doomspire\grimfate\.git\objects\c7
D:\doomspire\grimfate\.git\objects\c8
D:\doomspire\grimfate\.git\objects\c9
D:\doomspire\grimfate\.git\objects\ca
D:\doomspire\grimfate\.git\objects\cb
D:\doomspire\grimfate\.git\objects\cc
D:\doomspire\grimfate\.git\objects\cd
D:\doomspire\grimfate\.git\objects\ce
D:\doomspire\grimfate\.git\objects\cf
D:\doomspire\grimfate\.git\objects\d0
D:\doomspire\grimfate\.git\objects\d1
D:\doomspire\grimfate\.git\objects\d2
D:\doomspire\grimfate\.git\objects\d3
D:\doomspire\grimfate\.git\objects\d4
D:\doomspire\grimfate\.git\objects\d5
D:\doomspire\grimfate\.git\objects\d6
D:\doomspire\grimfate\.git\objects\d7
D:\doomspire\grimfate\.git\objects\d8
D:\doomspire\grimfate\.git\objects\d9
D:\doomspire\grimfate\.git\objects\da
D:\doomspire\grimfate\.git\objects\db
D:\doomspire\grimfate\.git\objects\dc
D:\doomspire\grimfate\.git\objects\dd
D:\doomspire\grimfate\.git\objects\de
D:\doomspire\grimfate\.git\objects\df
D:\doomspire\grimfate\.git\objects\e0
D:\doomspire\grimfate\.git\objects\e1
D:\doomspire\grimfate\.git\objects\e2
D:\doomspire\grimfate\.git\objects\e3
D:\doomspire\grimfate\.git\objects\e4
D:\doomspire\grimfate\.git\objects\e6
D:\doomspire\grimfate\.git\objects\e7
D:\doomspire\grimfate\.git\objects\e8
D:\doomspire\grimfate\.git\objects\e9
D:\doomspire\grimfate\.git\objects\ea
D:\doomspire\grimfate\.git\objects\ed
D:\doomspire\grimfate\.git\objects\ee
D:\doomspire\grimfate\.git\objects\ef
D:\doomspire\grimfate\.git\objects\f0
D:\doomspire\grimfate\.git\objects\f2
D:\doomspire\grimfate\.git\objects\f3
D:\doomspire\grimfate\.git\objects\f4
D:\doomspire\grimfate\.git\objects\f6
D:\doomspire\grimfate\.git\objects\f7
D:\doomspire\grimfate\.git\objects\f8
D:\doomspire\grimfate\.git\objects\f9
D:\doomspire\grimfate\.git\objects\fa
D:\doomspire\grimfate\.git\objects\fb
D:\doomspire\grimfate\.git\objects\fc
D:\doomspire\grimfate\.git\objects\fd
D:\doomspire\grimfate\.git\objects\fe
D:\doomspire\grimfate\.git\objects\ff
D:\doomspire\grimfate\.git\objects\info
D:\doomspire\grimfate\.git\objects\pack
D:\doomspire\grimfate\.git\refs\heads
D:\doomspire\grimfate\.git\refs\remotes
D:\doomspire\grimfate\.git\refs\tags
D:\doomspire\grimfate\.git\refs\remotes\origin
D:\doomspire\grimfate\build\classes
D:\doomspire\grimfate\build\generated
D:\doomspire\grimfate\build\moddev
D:\doomspire\grimfate\build\resources
D:\doomspire\grimfate\build\tmp
D:\doomspire\grimfate\build\classes\java
D:\doomspire\grimfate\build\classes\java\main
D:\doomspire\grimfate\build\classes\java\main\com
D:\doomspire\grimfate\build\classes\java\main\com\doomspire
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\block
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\client
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\config
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\core
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\debug
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\events
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\network
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\registry
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\spell
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\client\menu
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\client\screen
D:\doomspire\grimfate\build\classes\java\main\com\doomspire\grimfate\network\packet
D:\doomspire\grimfate\build\generated\sources
D:\doomspire\grimfate\build\generated\sources\annotationProcessor
D:\doomspire\grimfate\build\generated\sources\headers
D:\doomspire\grimfate\build\generated\sources\modMetadata
D:\doomspire\grimfate\build\generated\sources\annotationProcessor\java
D:\doomspire\grimfate\build\generated\sources\annotationProcessor\java\main
D:\doomspire\grimfate\build\generated\sources\headers\java
D:\doomspire\grimfate\build\generated\sources\headers\java\main
D:\doomspire\grimfate\build\generated\sources\modMetadata\META-INF
D:\doomspire\grimfate\build\moddev\artifacts
D:\doomspire\grimfate\build\resources\main
D:\doomspire\grimfate\build\resources\main\assets
D:\doomspire\grimfate\build\resources\main\data
D:\doomspire\grimfate\build\resources\main\META-INF
D:\doomspire\grimfate\build\resources\main\assets\grimfate
D:\doomspire\grimfate\build\resources\main\assets\grimfate\blockstates
D:\doomspire\grimfate\build\resources\main\assets\grimfate\lang
D:\doomspire\grimfate\build\resources\main\assets\grimfate\models
D:\doomspire\grimfate\build\resources\main\assets\grimfate\textures
D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\block
D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item
D:\doomspire\grimfate\build\resources\main\assets\grimfate\textures\block
D:\doomspire\grimfate\build\resources\main\assets\grimfate\textures\gui
D:\doomspire\grimfate\build\resources\main\data\grimfate
D:\doomspire\grimfate\build\resources\main\data\minecraft
D:\doomspire\grimfate\build\resources\main\data\grimfate\loot_tables
D:\doomspire\grimfate\build\resources\main\data\grimfate\neoforge
D:\doomspire\grimfate\build\resources\main\data\grimfate\recipes
D:\doomspire\grimfate\build\resources\main\data\grimfate\structures
D:\doomspire\grimfate\build\resources\main\data\grimfate\tags
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen
D:\doomspire\grimfate\build\resources\main\data\grimfate\loot_tables\blocks
D:\doomspire\grimfate\build\resources\main\data\grimfate\neoforge\biome_modifier
D:\doomspire\grimfate\build\resources\main\data\grimfate\tags\worldgen
D:\doomspire\grimfate\build\resources\main\data\grimfate\tags\worldgen\biome
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\configured_feature
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\placed_feature
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\structure
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\structure_set
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\template_pool
D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\template_pool\dungeon
D:\doomspire\grimfate\build\resources\main\data\minecraft\tags
D:\doomspire\grimfate\build\resources\main\data\minecraft\tags\blocks
D:\doomspire\grimfate\build\resources\main\data\minecraft\tags\blocks\mineable
D:\doomspire\grimfate\build\tmp\compileJava
D:\doomspire\grimfate\build\tmp\createMinecraftArtifacts
D:\doomspire\grimfate\build\tmp\downloadAssets
D:\doomspire\grimfate\build\tmp\neoformruntime
D:\doomspire\grimfate\build\tmp\compileJava\compileTransaction
D:\doomspire\grimfate\build\tmp\compileJava\compileTransaction\backup-dir
D:\doomspire\grimfate\build\tmp\compileJava\compileTransaction\stash-dir
D:\doomspire\grimfate\build\tmp\neoformruntime\20250919-220626_downloadClient
D:\doomspire\grimfate\build\tmp\neoformruntime\20250919-220626_downloadClientMappings
D:\doomspire\grimfate\build\tmp\neoformruntime\20250919-220626_downloadJson
D:\doomspire\grimfate\build\tmp\neoformruntime\20250919-220626_downloadServer
D:\doomspire\grimfate\run\config
D:\doomspire\grimfate\run\crash-reports
D:\doomspire\grimfate\run\defaultconfigs
D:\doomspire\grimfate\run\downloads
D:\doomspire\grimfate\run\logs
D:\doomspire\grimfate\run\mods
D:\doomspire\grimfate\run\resourcepacks
D:\doomspire\grimfate\run\saves
D:\doomspire\grimfate\run\logs\telemetry
D:\doomspire\grimfate\run\saves\Новый мир
D:\doomspire\grimfate\run\saves\Новый мир (1)
D:\doomspire\grimfate\run\saves\Новый мир (2)
D:\doomspire\grimfate\run\saves\Новый мир\advancements
D:\doomspire\grimfate\run\saves\Новый мир\data
D:\doomspire\grimfate\run\saves\Новый мир\datapacks
D:\doomspire\grimfate\run\saves\Новый мир\DIM-1
D:\doomspire\grimfate\run\saves\Новый мир\DIM1
D:\doomspire\grimfate\run\saves\Новый мир\entities
D:\doomspire\grimfate\run\saves\Новый мир\playerdata
D:\doomspire\grimfate\run\saves\Новый мир\poi
D:\doomspire\grimfate\run\saves\Новый мир\region
D:\doomspire\grimfate\run\saves\Новый мир\serverconfig
D:\doomspire\grimfate\run\saves\Новый мир\stats
D:\doomspire\grimfate\run\saves\Новый мир\DIM-1\data
D:\doomspire\grimfate\run\saves\Новый мир\DIM1\data
D:\doomspire\grimfate\run\saves\Новый мир (1)\advancements
D:\doomspire\grimfate\run\saves\Новый мир (1)\data
D:\doomspire\grimfate\run\saves\Новый мир (1)\datapacks
D:\doomspire\grimfate\run\saves\Новый мир (1)\DIM-1
D:\doomspire\grimfate\run\saves\Новый мир (1)\DIM1
D:\doomspire\grimfate\run\saves\Новый мир (1)\entities
D:\doomspire\grimfate\run\saves\Новый мир (1)\playerdata
D:\doomspire\grimfate\run\saves\Новый мир (1)\region
D:\doomspire\grimfate\run\saves\Новый мир (1)\serverconfig
D:\doomspire\grimfate\run\saves\Новый мир (1)\stats
D:\doomspire\grimfate\run\saves\Новый мир (1)\DIM-1\data
D:\doomspire\grimfate\run\saves\Новый мир (1)\DIM1\data
D:\doomspire\grimfate\run\saves\Новый мир (2)\advancements
D:\doomspire\grimfate\run\saves\Новый мир (2)\data
D:\doomspire\grimfate\run\saves\Новый мир (2)\datapacks
D:\doomspire\grimfate\run\saves\Новый мир (2)\DIM-1
D:\doomspire\grimfate\run\saves\Новый мир (2)\DIM1
D:\doomspire\grimfate\run\saves\Новый мир (2)\entities
D:\doomspire\grimfate\run\saves\Новый мир (2)\playerdata
D:\doomspire\grimfate\run\saves\Новый мир (2)\poi
D:\doomspire\grimfate\run\saves\Новый мир (2)\region
D:\doomspire\grimfate\run\saves\Новый мир (2)\serverconfig
D:\doomspire\grimfate\run\saves\Новый мир (2)\stats
D:\doomspire\grimfate\run\saves\Новый мир (2)\DIM-1\data
D:\doomspire\grimfate\run\saves\Новый мир (2)\DIM1\data
D:\doomspire\grimfate\src\main
D:\doomspire\grimfate\src\main\java
D:\doomspire\grimfate\src\main\resources
D:\doomspire\grimfate\src\main\templates
D:\doomspire\grimfate\src\main\java\com
D:\doomspire\grimfate\src\main\java\com\doomspire
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\block
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\commands
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\config
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\core
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\debug
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\registry
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\spell
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\stats
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\menu
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\screen
D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet
D:\doomspire\grimfate\src\main\resources\assets
D:\doomspire\grimfate\src\main\resources\data
D:\doomspire\grimfate\src\main\resources\assets\grimfate
D:\doomspire\grimfate\src\main\resources\assets\grimfate\blockstates
D:\doomspire\grimfate\src\main\resources\assets\grimfate\lang
D:\doomspire\grimfate\src\main\resources\assets\grimfate\models
D:\doomspire\grimfate\src\main\resources\assets\grimfate\textures
D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\block
D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item
D:\doomspire\grimfate\src\main\resources\assets\grimfate\textures\block
D:\doomspire\grimfate\src\main\resources\assets\grimfate\textures\gui
D:\doomspire\grimfate\src\main\resources\data\grimfate
D:\doomspire\grimfate\src\main\resources\data\minecraft
D:\doomspire\grimfate\src\main\resources\data\grimfate\loot_tables
D:\doomspire\grimfate\src\main\resources\data\grimfate\neoforge
D:\doomspire\grimfate\src\main\resources\data\grimfate\recipes
D:\doomspire\grimfate\src\main\resources\data\grimfate\structures
D:\doomspire\grimfate\src\main\resources\data\grimfate\tags
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen
D:\doomspire\grimfate\src\main\resources\data\grimfate\loot_tables\blocks
D:\doomspire\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier
D:\doomspire\grimfate\src\main\resources\data\grimfate\tags\worldgen
D:\doomspire\grimfate\src\main\resources\data\grimfate\tags\worldgen\biome
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\structure
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\structure_set
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\template_pool
D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon
D:\doomspire\grimfate\src\main\resources\data\minecraft\tags
D:\doomspire\grimfate\src\main\resources\data\minecraft\tags\blocks
D:\doomspire\grimfate\src\main\resources\data\minecraft\tags\blocks\mineable
D:\doomspire\grimfate\src\main\templates\META-INF
D:\doomspire\grimcore\src
D:\doomspire\grimcore\build\classes
D:\doomspire\grimcore\build\generated
D:\doomspire\grimcore\build\libs
D:\doomspire\grimcore\build\moddev
D:\doomspire\grimcore\build\resources
D:\doomspire\grimcore\build\tmp
D:\doomspire\grimcore\build\classes\java
D:\doomspire\grimcore\build\classes\java\main
D:\doomspire\grimcore\build\classes\java\main\com
D:\doomspire\grimcore\build\classes\java\main\com\doomspire
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\config
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\events
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\nearby
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\network
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\recipe
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\registry
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\runtime
D:\doomspire\grimcore\build\classes\java\main\com\doomspire\grimcore\stats
D:\doomspire\grimcore\build\generated\sources
D:\doomspire\grimcore\build\generated\sources\annotationProcessor
D:\doomspire\grimcore\build\generated\sources\headers
D:\doomspire\grimcore\build\generated\sources\modMetadata
D:\doomspire\grimcore\build\generated\sources\annotationProcessor\java
D:\doomspire\grimcore\build\generated\sources\annotationProcessor\java\main
D:\doomspire\grimcore\build\generated\sources\headers\java
D:\doomspire\grimcore\build\generated\sources\headers\java\main
D:\doomspire\grimcore\build\generated\sources\modMetadata\META-INF
D:\doomspire\grimcore\build\moddev\artifacts
D:\doomspire\grimcore\build\resources\main
D:\doomspire\grimcore\build\resources\main\META-INF
D:\doomspire\grimcore\build\tmp\compileJava
D:\doomspire\grimcore\build\tmp\createMinecraftArtifacts
D:\doomspire\grimcore\build\tmp\jar
D:\doomspire\grimcore\build\tmp\neoformruntime
D:\doomspire\grimcore\build\tmp\sourcesJar
D:\doomspire\grimcore\build\tmp\compileJava\compileTransaction
D:\doomspire\grimcore\build\tmp\compileJava\compileTransaction\backup-dir
D:\doomspire\grimcore\build\tmp\compileJava\compileTransaction\stash-dir
D:\doomspire\grimcore\build\tmp\neoformruntime\20250919-220617_downloadClient
D:\doomspire\grimcore\build\tmp\neoformruntime\20250919-220617_downloadClientMappings
D:\doomspire\grimcore\build\tmp\neoformruntime\20250919-220617_downloadJson
D:\doomspire\grimcore\build\tmp\neoformruntime\20250919-220617_downloadServer
D:\doomspire\grimcore\src\main
D:\doomspire\grimcore\src\main\java
D:\doomspire\grimcore\src\main\resources
D:\doomspire\grimcore\src\main\templates
D:\doomspire\grimcore\src\main\java\com
D:\doomspire\grimcore\src\main\java\com\doomspire
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\config
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\events
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\nearby
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\network
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\recipe
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\registry
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\runtime
D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats
D:\doomspire\grimcore\src\main\templates\META-INF

--- D:\doomspire\grimcore\build\tmp\createMinecraftArtifacts\nfrt-problem-report.json ---
[]

--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\config\CoreCommonConfig.java ---
package com.doomspire.grimcore.config;

import net.neoforged.neoforge.common.ModConfigSpec;

public final class CoreCommonConfig {
    public static final ModConfigSpec SPEC;
    public static final ModConfigSpec.BooleanValue PULL_ENABLED;
    public static final ModConfigSpec.IntValue PULL_RADIUS;     // 0..4
    public static final ModConfigSpec.IntValue MAX_CONTAINERS;  // safety cap

    static {
        ModConfigSpec.Builder b = new ModConfigSpec.Builder();
        PULL_ENABLED   = b.comment("Enable QoL pulling from nearby containers").define("pullEnabled", true);
        PULL_RADIUS    = b.comment("Pull radius (0..4)").defineInRange("pullRadius", 3, 0, 4);
        MAX_CONTAINERS = b.comment("Safety cap for scanned containers").defineInRange("maxContainers", 24, 1, 128);
        SPEC = b.build();
    }

    private CoreCommonConfig() {}
}





--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\events\CoreDamageCalculator.java ---
package com.doomspire.grimcore.events;

import com.doomspire.grimcore.stats.MobStats;
import com.doomspire.grimcore.stats.PlayerStats;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.damagesource.DamageType;
import net.minecraft.world.damagesource.DamageTypes;
import net.minecraft.world.entity.LivingEntity;

import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;

public final class CoreDamageCalculator {

    // РџСЂР°РІРёР»Р° РґР»СЏ РёРіСЂРѕРєРѕРІ
    private static final Map<ResourceKey<DamageType>, BiFunction<PlayerStats, Float, Integer>> PLAYER_RULES = new HashMap<>();
    // РџСЂР°РІРёР»Р° РґР»СЏ РјРѕР±РѕРІ
    private static final Map<ResourceKey<DamageType>, BiFunction<MobStats, Float, Integer>> MOB_RULES = new HashMap<>();

    static {
        // ---- РёРіСЂРѕРєРё ----
        PLAYER_RULES.put(DamageTypes.FALL,
                (stats, vanilla) -> Math.max(1, Math.round(vanilla)));
        PLAYER_RULES.put(DamageTypes.DROWN,
                (stats, v) -> Math.max(1, Math.round(stats.maxHealth() * 0.10f)));
        PLAYER_RULES.put(DamageTypes.LAVA,
                (stats, v) -> Math.max(1, Math.round(stats.maxHealth() * 0.20f)));
        PLAYER_RULES.put(DamageTypes.OUTSIDE_BORDER,
                (stats, v) -> stats.maxHealth()); // РјРіРЅРѕРІРµРЅРЅР°СЏ СЃРјРµСЂС‚СЊ

        // ---- РјРѕР±С‹ ----
        MOB_RULES.put(DamageTypes.FALL,
                (stats, vanilla) -> Math.max(1, Math.round(vanilla)));
        MOB_RULES.put(DamageTypes.DROWN,
                (stats, v) -> Math.max(1, Math.round(stats.getMaxHealth() * 0.10f)));
        MOB_RULES.put(DamageTypes.LAVA,
                (stats, v) -> Math.max(1, Math.round(stats.getMaxHealth() * 0.20f)));
        MOB_RULES.put(DamageTypes.OUTSIDE_BORDER,
                (stats, v) -> stats.getMaxHealth()); // РјРіРЅРѕРІРµРЅРЅР°СЏ СЃРјРµСЂС‚СЊ
    }

    private CoreDamageCalculator() {}

    public static int calculateForPlayer(LivingEntity entity, DamageSource source, float vanillaAmount, PlayerStats stats) {
        for (var entry : PLAYER_RULES.entrySet()) {
            if (source.is(entry.getKey())) {
                return entry.getValue().apply(stats, vanillaAmount);
            }
        }
        return Math.max(1, Math.round(vanillaAmount));
    }

    public static int calculateForMob(LivingEntity entity, DamageSource source, float vanillaAmount, MobStats stats) {
        for (var entry : MOB_RULES.entrySet()) {
            if (source.is(entry.getKey())) {
                return entry.getValue().apply(stats, vanillaAmount);
            }
        }
        return Math.max(1, Math.round(vanillaAmount));
    }
}



--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\events\CoreDamageEvents.java ---
package com.doomspire.grimcore.events;

import com.doomspire.grimcore.stats.*;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.damagesource.DamageTypes;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.common.NeoForge;
import net.neoforged.neoforge.event.entity.living.LivingDamageEvent;

public final class CoreDamageEvents {

    private CoreDamageEvents() {}

    /** Р РµРіРёСЃС‚СЂРёСЂСѓР№ РёР· РёРЅРёС†РёР°Р»РёР·Р°С†РёРё (РЅР°РїСЂРёРјРµСЂ, РёР· Grimfate entrypoint): NeoForge.EVENT_BUS.register(CoreDamageEvents.class); */
    public static void registerToBus() {
        NeoForge.EVENT_BUS.register(CoreDamageEvents.class);
    }

    /**
     * РЇРґСЂРѕ РѕР±СЂР°Р±РѕС‚РєРё СѓСЂРѕРЅР°. Р Р°Р±РѕС‚Р°РµС‚ РЅР° LOWEST, С‡С‚РѕР±С‹ РєРѕРЅС‚РµРЅС‚ РјРѕРі СЃРєРѕСЂСЂРµРєС‚РёСЂРѕРІР°С‚СЊ event.setNewDamage(...) СЂР°РЅСЊС€Рµ.
     * РќРёРєР°РєРѕР№ РїСЂРµРґРјРµС‚РЅРѕР№/СЃРїРµР»Р»-Р»РѕРіРёРєРё Р·РґРµСЃСЊ РЅРµС‚.
     */
    @SubscribeEvent
    public static void onLivingDamage(LivingDamageEvent.Pre event) {
        LivingEntity living = event.getEntity();

        if (living.level().isClientSide()) return;
        if (!living.isAlive()) return;

        float amountAfterContent = event.getNewDamage(); // СѓС‡РёС‚С‹РІР°РµРј РІРѕР·РјРѕР¶РЅС‹Рµ РїСЂР°РІРєРё РєРѕРЅС‚РµРЅС‚Р°
        if (amountAfterContent <= 0f) return;

        Entity src = event.getSource() != null ? event.getSource().getEntity() : null;

        // ===== РРіСЂРѕРє РєР°Рє С†РµР»СЊ =====
        if (living instanceof ServerPlayer serverPlayer) {
            PlayerStats stats = PlayerStatsProvider.get(serverPlayer);
            if (stats == null) return;

            int damage = CoreDamageCalculator.calculateForPlayer(serverPlayer, event.getSource(), amountAfterContent, stats);

            var m = PlayerStatsProvider.getMutable(serverPlayer);
            int newHp = Math.max(0, m.health - damage);
            m.setHealth(newHp);

            // Р“Р°СЃРёРј РІР°РЅРёР»СЊРЅС‹Р№ СѓСЂРѕРЅ
            event.setNewDamage(0f);

            // РќРµРјРµРґР»РµРЅРЅС‹Р№ РєРѕРјРјРёС‚, С‡С‚РѕР±С‹ HUD СѓРІРёРґРµР» РЅРѕРІРѕРµ Р·РЅР°С‡РµРЅРёРµ
            PlayerStatsProvider.commitIfDirty(serverPlayer);

            // (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ) РєРѕСЂРѕС‚РєРёРµ СЃРёСЃС‚РµРјРЅС‹Рµ СЃРѕРѕР±С‰РµРЅРёСЏ вЂ” РѕСЃС‚Р°РІР»СЏРµРј, РЅРѕ РјРѕР¶РЅРѕ СѓР±СЂР°С‚СЊ/РїРµСЂРµРєР»СЋС‡РёС‚СЊ РІ РєРѕРЅС„РёРі
            PlayerStats afterStats = PlayerStatsProvider.get(serverPlayer);
            if (afterStats != null) {
                serverPlayer.sendSystemMessage(Component.literal(
                        "вљЎ РџРѕР»СѓС‡РµРЅРѕ " + damage + " СѓСЂРѕРЅР°. HP: " +
                                afterStats.health() + "/" + afterStats.maxHealth()
                ));
            }

            // РЎРјРµСЂС‚СЊ С‡РµСЂРµР· РІР°РЅРёР»СЊРЅС‹Р№ РјРµС…Р°РЅРёР·Рј
            if (m.health <= 0) {
                killByGeneric(serverPlayer);
            }
            return;
        }

        // ===== РњРѕР±С‹ =====
        MobStats before = MobStatsProvider.get(living);
        if (before == null) return;

        int damage = CoreDamageCalculator.calculateForMob(living, event.getSource(), amountAfterContent, before);
        MobStatsProvider.damage(living, damage);

        // Р“Р°СЃРёРј РІР°РЅРёР»СЊРЅС‹Р№ СѓСЂРѕРЅ
        event.setNewDamage(0f);

        MobStats after = MobStatsProvider.get(living);

        if (after != null && after.getCurrentHealth() <= 0) {
            killByGeneric(living);
            // Р’РђР–РќРћ: РІС‹РґР°С‡Р° XP/Р»СѓС‚ вЂ” СЌС‚Рѕ РєРѕРЅС‚РµРЅС‚. Р”РµР»Р°Р№ СЌС‚Рѕ РІ grimfate С‡РµСЂРµР· РѕС‚РґРµР»СЊРЅС‹Р№ С…СѓРє (РЅР°РїСЂРёРјРµСЂ, LivingDeathEvent)
        }
    }

    private static void killByGeneric(LivingEntity entity) {
        entity.setHealth(0f);
        DamageSource outOfWorld = new DamageSource(
                entity.level().registryAccess()
                        .registryOrThrow(Registries.DAMAGE_TYPE)
                        .getHolderOrThrow(DamageTypes.GENERIC_KILL)
        );
        entity.hurt(outOfWorld, Float.MAX_VALUE);
    }
}



--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\Grimcore.java ---
package com.doomspire.grimcore;

import com.doomspire.grimcore.config.CoreCommonConfig;
import com.doomspire.grimcore.events.CoreDamageEvents;
import com.doomspire.grimcore.network.CoreNetworking;
import com.doomspire.grimcore.registry.CoreRecipes;
import com.doomspire.grimcore.stats.ModAttachments;
import com.mojang.logging.LogUtils;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.config.ModConfig;
import net.neoforged.neoforge.common.NeoForge;
import org.slf4j.Logger;
import net.minecraft.world.item.*;


@Mod(Grimcore.MODID)
public final class Grimcore {
    public static final String MODID = "grimcore";
    public static final Logger LOGGER = LogUtils.getLogger();

    public Grimcore(IEventBus modEventBus, ModContainer container) {
        container.registerConfig(ModConfig.Type.CLIENT, CoreCommonConfig.SPEC);
        // РЎРµС‚СЊ СЏРґСЂР° (РµСЃР»Рё РїРѕСЏРІСЏС‚СЃСЏ РїР°РєРµС‚С‹)
        modEventBus.addListener(CoreNetworking::register);

        // Р РµРµСЃС‚СЂС‹ СЏРґСЂР° (attachments Рё РїСЂ.)
        ModAttachments.ATTACHMENT_TYPES.register(modEventBus);

        // Р Р°РЅС‚Р°Р№Рј-СЃРѕР±С‹С‚РёСЏ СЏРґСЂР° (СѓСЂРѕРЅ/СЃС‚Р°С‚РёРєР° Рё С‚.Рї.)
        NeoForge.EVENT_BUS.register(CoreDamageEvents.class);

        CoreRecipes.init(modEventBus);
        LOGGER.info("[grimcore] initialized");
    }
}




--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\nearby\NearbyItemSnapshot.java ---
package com.doomspire.grimcore.nearby;

public final class NearbyItemSnapshot {

    public static final class ContainerRef {
        public final net.minecraft.core.BlockPos pos;
        public final net.neoforged.neoforge.capabilities.BlockCapabilityCache<net.neoforged.neoforge.items.IItemHandler, net.minecraft.core.Direction> cache;
        public ContainerRef(net.minecraft.core.BlockPos pos,
                            net.neoforged.neoforge.capabilities.BlockCapabilityCache<net.neoforged.neoforge.items.IItemHandler, net.minecraft.core.Direction> cache) {
            this.pos = pos;
            this.cache = cache;
        }
        public net.neoforged.neoforge.items.IItemHandler handler() { return cache.getCapability(); }
    }

    private final java.util.List<ContainerRef> containers;
    private NearbyItemSnapshot(java.util.List<ContainerRef> list) { this.containers = java.util.Collections.unmodifiableList(list); }
    public java.util.List<ContainerRef> containers() { return containers; }
    public boolean isEmpty() { return containers.isEmpty(); }

    public static NearbyItemSnapshot scan(net.minecraft.server.level.ServerLevel level,
                                          net.minecraft.core.BlockPos base,
                                          net.minecraft.core.Direction facing,
                                          boolean longFootprint,
                                          int radius,
                                          int maxContainers) {
        radius = java.lang.Math.max(0, java.lang.Math.min(4, radius));
        maxContainers = java.lang.Math.max(1, maxContainers);

        java.util.ArrayList<ContainerRef> found = new java.util.ArrayList<>();
        java.util.HashSet<net.minecraft.core.BlockPos> seen = new java.util.HashSet<>();

        double aLong = radius + 1.0;
        double aShort = radius + 0.5;
        boolean longX = (facing.getAxis() == net.minecraft.core.Direction.Axis.X);
        double aX = longFootprint ? (longX ? aLong : aShort) : (radius + 0.5);
        double aZ = longFootprint ? (longX ? aShort : aLong) : (radius + 0.5);
        int v = radius;

        net.minecraft.core.BlockPos top = base.above();
        net.minecraft.core.BlockPos.MutableBlockPos m = new net.minecraft.core.BlockPos.MutableBlockPos();
        int rx = (int) java.lang.Math.ceil(java.lang.Math.max(aX, 0));
        int rz = (int) java.lang.Math.ceil(java.lang.Math.max(aZ, 0));

        for (int dy = -v; dy <= v; dy++) {
            for (int dz = -rz; dz <= rz; dz++) {
                for (int dx = -rx; dx <= rx; dx++) {
                    if (dx == 0 && dz == 0 && (dy == 0 || top.getY() - base.getY() == dy)) continue;

                    double nx = dx / aX;
                    double nz = dz / aZ;
                    if ((nx * nx + nz * nz) > 1.0) continue;

                    m.set(base.getX() + dx, base.getY() + dy, base.getZ() + dz);
                    if (!level.isLoaded(m)) continue;

                    // 1) Р±РµР· СЃС‚РѕСЂРѕРЅС‹
                    var cache = net.neoforged.neoforge.capabilities.BlockCapabilityCache.create(
                            net.neoforged.neoforge.capabilities.Capabilities.ItemHandler.BLOCK, level, m.immutable(), null);
                    var h = cache.getCapability();

                    // 2) РїСЂРѕР±СѓРµРј РїРѕ СЃС‚РѕСЂРѕРЅР°Рј
                    if (h == null) {
                        for (net.minecraft.core.Direction d : net.minecraft.core.Direction.values()) {
                            var c2 = net.neoforged.neoforge.capabilities.BlockCapabilityCache.create(
                                    net.neoforged.neoforge.capabilities.Capabilities.ItemHandler.BLOCK, level, m.immutable(), d);
                            var h2 = c2.getCapability();
                            if (h2 != null) { cache = c2; h = h2; break; }
                        }
                    }
                    if (h == null) continue;

                    net.minecraft.core.BlockPos key = m.immutable();
                    if (seen.add(key)) {
                        found.add(new ContainerRef(key, cache));
                        if (found.size() >= maxContainers) return new NearbyItemSnapshot(found);
                    }
                }
            }
        }
        return new NearbyItemSnapshot(found);
    }
}




--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\nearby\PullPlanner.java ---
package com.doomspire.grimcore.nearby;

public final class PullPlanner {

    public static final class OriginRef {
        public final net.minecraft.core.BlockPos containerPos;
        public final int containerSlot;
        public final int targetSlot;
        public final net.minecraft.world.item.ItemStack moved;
        public OriginRef(net.minecraft.core.BlockPos pos, int cslot, int tslot, net.minecraft.world.item.ItemStack moved) {
            this.containerPos = pos; this.containerSlot = cslot; this.targetSlot = tslot; this.moved = moved.copy();
        }
    }

    public static final class PullReport {
        private final java.util.List<OriginRef> origins = new java.util.ArrayList<>();
        public void add(OriginRef r){ origins.add(r); }
        public java.util.List<OriginRef> origins(){ return java.util.Collections.unmodifiableList(origins); }
        public boolean isEmpty(){ return origins.isEmpty(); }
    }

    /**
     * РџС‹С‚Р°РµС‚СЃСЏ Р·Р°РїРѕР»РЅРёС‚СЊ С†РµР»РµРІРѕР№ РёРЅРІРµРЅС‚Р°СЂСЊ РїРѕРґ РґР°РЅРЅСѓСЋ "РїРѕС‚СЂРµР±РЅРѕСЃС‚СЊ" (СЃРїРёСЃРѕРє РёРЅРіСЂРµРґРёРµРЅС‚РѕРІ) РёР· СЃРЅР°РїС€РѕС‚Р°.
     * РќРµ СЃРєР°РЅРёСЂСѓРµС‚ РјРёСЂ, СЂР°Р±РѕС‚Р°РµС‚ С‚РѕР»СЊРєРѕ СЃ РґР°РЅРЅС‹РјРё СЃРЅР°РїС€РѕС‚Р°. Р‘РµР· С‚РёРєРѕРІ. РџРѕСЂСЏРґРѕРє РёРЅРіСЂРµРґРёРµРЅС‚РѕРІ РЅРµ РІР°Р¶РµРЅ.
     *
     * @param snapshot       СЂРµР·СѓР»СЊС‚Р°С‚ NearbyItemSnapshot.scan(...)
     * @param needs          СЃРїРёСЃРѕРє РёРЅРіСЂРµРґРёРµРЅС‚РѕРІ (РєР°Р¶РґС‹Р№ вЂ” 1 С€С‚.) СЂР°Р·РјРµСЂРѕРј N (РґР»СЏ РЅР°С€РµР№ СЃС‚Р°РЅС†РёРё N=6, shapeless)
     * @param target         IItemHandler С†РµР»РµРІРѕР№ (6 РІС…РѕРґРЅС‹С… СЃР»РѕС‚РѕРІ СЃС‚Р°РЅС†РёРё)
     * @param targetSlots    СЃРїРёСЃРѕРє РёРЅРґРµРєСЃРѕРІ С†РµР»РµРІС‹С… СЃР»РѕС‚РѕРІ, РєСѓРґР° РјРѕР¶РЅРѕ РєР»Р°СЃС‚СЊ (РЅР°РїСЂРёРјРµСЂ [0..5])
     */
    public static PullReport planAndPullToHandler(NearbyItemSnapshot snapshot,
                                                  java.util.List<net.minecraft.world.item.crafting.Ingredient> needs,
                                                  net.neoforged.neoforge.items.IItemHandler target,
                                                  int[] targetSlots) {
        PullReport report = new PullReport();
        if (snapshot == null || snapshot.isEmpty() || needs == null || needs.isEmpty()) return report;

        // Р»РѕРєР°Р»СЊРЅР°СЏ РѕС‚РјРµС‚РєР° Р·Р°РЅСЏС‚С‹С… СЃР»РѕС‚РѕРІ С†РµР»Рё (Р·Р°РїРѕР»РЅСЏРµРј СЃРІРѕР±РѕРґРЅС‹Рµ)
        boolean[] targetUsed = new boolean[target.getSlots()];
        for (int s : targetSlots) {
            if (!target.getStackInSlot(s).isEmpty()) targetUsed[s] = true;
        }

        // РґР»СЏ РєР°Р¶РґРѕРіРѕ РёРЅРіСЂРµРґРёРµРЅС‚Р° РїРѕРїСЂРѕР±СѓРµРј РЅР°Р№С‚Рё СЃРѕРІРїР°РґР°СЋС‰РёР№ РїСЂРµРґРјРµС‚ РІ Р±Р»РёР¶Р°Р№С€РёС… РєРѕРЅС‚РµР№РЅРµСЂР°С…
        outer:
        for (net.minecraft.world.item.crafting.Ingredient ing : needs) {
            // СЃРЅР°С‡Р°Р»Р° РѕРїСЂРµРґРµР»РёРј СЃРІРѕР±РѕРґРЅС‹Р№ С†РµР»РµРІРѕР№ СЃР»РѕС‚ (Р»СЋР±РѕР№ РёР· targetSlots)
            int tSlot = -1;
            for (int s : targetSlots) {
                if (!targetUsed[s]) { tSlot = s; break; }
            }
            if (tSlot == -1) break; // РЅРµС‚ СЃРІРѕР±РѕРґРЅС‹С… СЃР»РѕС‚РѕРІ

            // РїСЂРѕР±РµР¶РєР° РїРѕ РєРѕРЅС‚РµР№РЅРµСЂР°Рј в†’ РїРѕ СЃР»РѕС‚Р°Рј
            for (NearbyItemSnapshot.ContainerRef cref : snapshot.containers()) {
                var ih = cref.handler();
                if (ih == null) continue;

                for (int cslot = 0; cslot < ih.getSlots(); cslot++) {
                    net.minecraft.world.item.ItemStack got = ih.getStackInSlot(cslot);
                    if (got.isEmpty()) continue;
                    if (!ing.test(got)) continue;

                    // СЃРёРјСѓР»СЏС†РёСЏ: РјРѕР¶РµРј Р»Рё РїРѕР»РѕР¶РёС‚СЊ 1 С€С‚. РІ С†РµР»РµРІРѕР№ СЃР»РѕС‚?
                    net.minecraft.world.item.ItemStack one = got.copy(); one.setCount(1);
                    net.minecraft.world.item.ItemStack simulated = target.insertItem(tSlot, one, true);
                    if (!simulated.isEmpty()) {
                        // РЅРµ СЃРјРѕРіР»Рё РІСЃС‚Р°РІРёС‚СЊ (РµСЃС‚СЊ РѕСЃС‚Р°С‚РѕРє) вЂ” РїСЂРѕР±СѓРµРј РґСЂСѓРіРѕР№ С†РµР»РµРІРѕР№ СЃР»РѕС‚
                        continue;
                    }

                    // РїСЂРѕР±СѓРµРј РёР·РІР»РµС‡СЊ 1 С€С‚. Рё СЂРµР°Р»СЊРЅРѕ РІСЃС‚Р°РІРёС‚СЊ
                    net.minecraft.world.item.ItemStack extracted = ih.extractItem(cslot, 1, false);
                    if (extracted.isEmpty()) continue; // РєС‚Рѕ-С‚Рѕ РѕРїРµСЂРµРґРёР»

                    net.minecraft.world.item.ItemStack left = target.insertItem(tSlot, extracted, false);
                    if (!left.isEmpty()) {
                        // РєСЂР°Р№РЅРµ РјР°Р»РѕРІРµСЂРѕСЏС‚РЅРѕ, РЅРѕ РѕС‚РєР°С‚РёРј РЅР°Р·Р°Рґ
                        // РїС‹С‚Р°РµРјСЃСЏ РІРµСЂРЅСѓС‚СЊ РѕСЃС‚Р°С‚РѕРє РІ С‚РѕС‚ Р¶Рµ СЃР»РѕС‚
                        net.minecraft.world.item.ItemStack rem = ih.insertItem(cslot, left, false);
                        if (!rem.isEmpty()) {
                            // РµСЃР»Рё СЃРѕРІСЃРµРј РЅРµРєСѓРґР° вЂ” РґСЂРѕРїРЅРµРј СЂСЏРґРѕРј (РЅР° СЃРѕРІРµСЃС‚Рё РІС‹Р·С‹РІР°СЋС‰РµР№ СЃС‚РѕСЂРѕРЅС‹ РѕР±СЂР°Р±РѕС‚Р°С‚СЊ)
                        }
                        continue; // РёС‰РµРј РґР°Р»СЊС€Рµ
                    }

                    // СѓСЃРїРµС…
                    targetUsed[tSlot] = true;
                    report.add(new OriginRef(cref.pos, cslot, tSlot, one));
                    continue outer;
                }
            }
            // РµСЃР»Рё СЃСЋРґР° РґРѕС€Р»Рё вЂ” РЅРµ РЅР°С€Р»Рё РґР»СЏ СЌС‚РѕРіРѕ РёРЅРіСЂРµРґРёРµРЅС‚Р° (РЅРѕСЂРјР°Р»СЊРЅРѕ, С‡Р°СЃС‚РёС‡РЅРѕРµ Р·Р°РїРѕР»РЅРµРЅРёРµ)
        }

        return report;
    }
}



--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\network\CoreNetworking.java ---
package com.doomspire.grimcore.network;

import net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent;
import net.neoforged.neoforge.network.registration.PayloadRegistrar;

/**
 * РўРѕРЅРєРёР№ С„Р°СЃР°Рґ РґР»СЏ СЂРµРіРёСЃС‚СЂР°С†РёРё РїР°РєРµС‚РѕРІ СЏРґСЂР° РёР»Рё РїРѕР»СѓС‡РµРЅРёСЏ СЂРµРіРёСЃС‚СЂР°С‚РѕСЂРѕРІ.
 * РЎР°Рј grimcore РјРѕР¶РµС‚ РЅРµ РѕР±СЉСЏРІР»СЏС‚СЊ СЃРѕР±СЃС‚РІРµРЅРЅС‹С… РїР°РєРµС‚РѕРІ вЂ” РЅРѕ РґР°С‘С‚ РµРґРёРЅС‹Р№ СЃРїРѕСЃРѕР± СЃРѕР·РґР°С‚СЊ registrar.
 */
public final class CoreNetworking {

    public static final String CORE_CHANNEL = "grimcore";
    private CoreNetworking() {}

    /** Р’РµСЂРЅС‘С‚ registrar РґР»СЏ РєР°РЅР°Р»Р° grimcore (РµСЃР»Рё РЅСѓР¶РЅРѕ СЂРµРіР°С‚СЊ РѕР±С‰РёРµ РїР°РєРµС‚С‹ СЏРґСЂР°). */
    public static PayloadRegistrar registrar(RegisterPayloadHandlersEvent event) {
        return event.registrar(CORE_CHANNEL);
    }

    /** РҐСѓРє РґР»СЏ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё СЏРґСЂР° СЃРµС‚Рё (РµСЃР»Рё РїРѕСЏРІСЏС‚СЃСЏ РїР°РєРµС‚С‹ СЏРґСЂР° вЂ” СЂРµРіР°С‚СЊ РёС… Р·РґРµСЃСЊ). */
    public static void register(RegisterPayloadHandlersEvent event) {
        // РїСЂРёРјРµСЂ (РѕСЃС‚Р°РІР»РµРЅРѕ РїСѓСЃС‚С‹Рј РґРѕ РїРѕСЏРІР»РµРЅРёСЏ S2C/C2S РїР°РєРµС‚РѕРІ СЏРґСЂР°)
        // var r = registrar(event);
        // r.playToClient(StatsSyncPacket.TYPE, StatsSyncPacket.STREAM_CODEC, StatsSyncPacket::handleClient);
    }
}



--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\recipe\Circle6Recipe.java ---
package com.doomspire.grimcore.recipe;

public class Circle6Recipe implements net.minecraft.world.item.crafting.Recipe<net.minecraft.world.item.crafting.RecipeInput> {

    private final net.minecraft.resources.ResourceLocation id;
    private final net.minecraft.core.NonNullList<net.minecraft.world.item.crafting.Ingredient> ingredients; // size=6, shapeless
    private final net.minecraft.world.item.ItemStack result;

    public Circle6Recipe(net.minecraft.resources.ResourceLocation id,
                         java.util.List<net.minecraft.world.item.crafting.Ingredient> inputs,
                         net.minecraft.world.item.ItemStack result) {
        if (inputs.size() != 6) throw new IllegalArgumentException("circle6 requires exactly 6 ingredients");
        this.id = id;
        this.ingredients = net.minecraft.core.NonNullList.create();
        this.ingredients.addAll(inputs);
        this.result = result.copy();
    }

    // shapeless РјР°С‚С‡РёРЅРі РїРѕ РјСѓР»СЊС‚РёРјРЅРѕР¶РµСЃС‚РІСѓ: РёСЃРїРѕР»СЊР·СѓРµРј РїРµСЂРІС‹Рµ 6 РїРѕР·РёС†РёР№ РёР· RecipeInput
    @Override
    public boolean matches(net.minecraft.world.item.crafting.RecipeInput inv, net.minecraft.world.level.Level level) {
        if (inv.size() < 6) return false;

        java.util.ArrayList<net.minecraft.world.item.ItemStack> present = new java.util.ArrayList<>(6);
        for (int i = 0; i < 6; i++) {
            net.minecraft.world.item.ItemStack s = inv.getItem(i);
            if (s.isEmpty()) return false;
            present.add(s);
        }
        boolean[] used = new boolean[present.size()];
        for (net.minecraft.world.item.crafting.Ingredient ing : ingredients) {
            boolean ok = false;
            for (int i = 0; i < present.size(); i++) {
                if (!used[i] && ing.test(present.get(i))) { used[i] = true; ok = true; break; }
            }
            if (!ok) return false;
        }
        return true;
    }

    @Override
    public net.minecraft.world.item.ItemStack assemble(net.minecraft.world.item.crafting.RecipeInput inv,
                                                       net.minecraft.core.HolderLookup.Provider registries) {
        return result.copy();
    }

    @Override
    public boolean canCraftInDimensions(int w, int h) { return w * h >= 6; }

    @Override
    public net.minecraft.world.item.ItemStack getResultItem(net.minecraft.core.HolderLookup.Provider registries) {
        return result;
    }

    public net.minecraft.resources.ResourceLocation id(){ return id; }
    public net.minecraft.resources.ResourceLocation getId(){ return id; }

    @Override
    public net.minecraft.world.item.crafting.RecipeSerializer<?> getSerializer() {
        return com.doomspire.grimcore.registry.CoreRecipes.CIRCLE6_SERIALIZER.get();
    }

    @Override
    public net.minecraft.world.item.crafting.RecipeType<?> getType() {
        return com.doomspire.grimcore.registry.CoreRecipes.CIRCLE6_TYPE.get();
    }

    public java.util.List<net.minecraft.world.item.crafting.Ingredient> getIngredientsList() {
        return java.util.Collections.unmodifiableList(ingredients);
    }
}





--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\recipe\Circle6RecipeSerializer.java ---
package com.doomspire.grimcore.recipe;

public final class Circle6RecipeSerializer implements net.minecraft.world.item.crafting.RecipeSerializer<Circle6Recipe> {

    // === JSON (data pack) ===
    private static final com.mojang.serialization.Codec<java.util.List<net.minecraft.world.item.crafting.Ingredient>> ING_LIST_CODEC =
            net.minecraft.world.item.crafting.Ingredient.CODEC_NONEMPTY
                    .listOf() // Codec<List<Ingredient>>
                    .flatXmap(list -> list.size() == 6
                                    ? com.mojang.serialization.DataResult.success(list)
                                    : com.mojang.serialization.DataResult.error(() -> "circle6 requires exactly 6 ingredients"),
                            com.mojang.serialization.DataResult::success);

    private static final com.mojang.serialization.MapCodec<Circle6Recipe> MAP_CODEC =
            com.mojang.serialization.codecs.RecordCodecBuilder.mapCodec(instance -> instance.group(
                    ING_LIST_CODEC.fieldOf("ingredients").forGetter(Circle6Recipe::getIngredientsList),
                    net.minecraft.world.item.ItemStack.CODEC.fieldOf("result")
                            .forGetter(r -> r.getResultItem(null))
            ).apply(instance,
                    (ings, out) -> new Circle6Recipe(null, ings, out)));

    @Override
    public com.mojang.serialization.MapCodec<Circle6Recipe> codec() {
        return MAP_CODEC;
    }

    // === РЎРµС‚СЊ (sync Рє РєР»РёРµРЅС‚Сѓ) ===
    private static final net.minecraft.network.codec.StreamCodec<net.minecraft.network.RegistryFriendlyByteBuf, Circle6Recipe> STREAM_CODEC =
            new net.minecraft.network.codec.StreamCodec<>() {
                @Override
                public Circle6Recipe decode(net.minecraft.network.RegistryFriendlyByteBuf buf) {
                    java.util.ArrayList<net.minecraft.world.item.crafting.Ingredient> ings = new java.util.ArrayList<>(6);
                    for (int i = 0; i < 6; i++) {
                        ings.add(net.minecraft.world.item.crafting.Ingredient.CONTENTS_STREAM_CODEC.decode(buf));
                    }
                    net.minecraft.world.item.ItemStack result = net.minecraft.world.item.ItemStack.STREAM_CODEC.decode(buf);
                    // id Р±СѓРґРµС‚ РїРѕРґСЃС‚Р°РІР»РµРЅ RecipeManagerвЂ™РѕРј; Р·РґРµСЃСЊ РёСЃРїРѕР»СЊР·СѓРµРј null
                    return new Circle6Recipe(null, ings, result);
                }

                @Override
                public void encode(net.minecraft.network.RegistryFriendlyByteBuf buf, Circle6Recipe recipe) {
                    for (net.minecraft.world.item.crafting.Ingredient ing : recipe.getIngredientsList()) {
                        net.minecraft.world.item.crafting.Ingredient.CONTENTS_STREAM_CODEC.encode(buf, ing);
                    }
                    net.minecraft.world.item.ItemStack.STREAM_CODEC.encode(buf, recipe.getResultItem(null));
                }
            };

    @Override
    public net.minecraft.network.codec.StreamCodec<net.minecraft.network.RegistryFriendlyByteBuf, Circle6Recipe> streamCodec() {
        return STREAM_CODEC;
    }
}





--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\registry\CoreRecipes.java ---
package com.doomspire.grimcore.registry;

public final class CoreRecipes {

    public static final net.neoforged.neoforge.registries.DeferredRegister<net.minecraft.world.item.crafting.RecipeSerializer<?>>
            SERIALIZERS = net.neoforged.neoforge.registries.DeferredRegister.create(
            net.minecraft.core.registries.Registries.RECIPE_SERIALIZER,
            com.doomspire.grimcore.Grimcore.MODID
    );

    public static final net.neoforged.neoforge.registries.DeferredRegister<net.minecraft.world.item.crafting.RecipeType<?>>
            TYPES = net.neoforged.neoforge.registries.DeferredRegister.create(
            net.minecraft.core.registries.Registries.RECIPE_TYPE,
            com.doomspire.grimcore.Grimcore.MODID
    );

    public static final net.neoforged.neoforge.registries.DeferredHolder<net.minecraft.world.item.crafting.RecipeType<?>, net.minecraft.world.item.crafting.RecipeType<com.doomspire.grimcore.recipe.Circle6Recipe>>
            CIRCLE6_TYPE = TYPES.register("circle6", () -> new net.minecraft.world.item.crafting.RecipeType<>() {
        public String toString() { return com.doomspire.grimcore.Grimcore.MODID + ":circle6"; }
    });

    public static final net.neoforged.neoforge.registries.DeferredHolder<net.minecraft.world.item.crafting.RecipeSerializer<?>, net.minecraft.world.item.crafting.RecipeSerializer<com.doomspire.grimcore.recipe.Circle6Recipe>>
            CIRCLE6_SERIALIZER = SERIALIZERS.register("circle6", com.doomspire.grimcore.recipe.Circle6RecipeSerializer::new);

    public static void init(net.neoforged.bus.api.IEventBus modBus) {
        TYPES.register(modBus);
        SERIALIZERS.register(modBus);
    }
}



--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeData.java ---
package com.doomspire.grimcore.runtime;

import com.doomspire.grimcore.stats.MutablePlayerStats;

/**
 * Р›С‘РіРєРёР№ runtime-С…Р°Р± РґР»СЏ РєР°Р¶РґРѕРіРѕ РёРіСЂРѕРєР°.
 * РќРµ СЃРµСЂРёР°Р»РёР·СѓРµС‚СЃСЏ. РҐСЂР°РЅРёС‚СЃСЏ РІ ConcurrentHashMap РЅР° СЃРµСЂРІРµСЂРµ.
 */
public class PlayerRuntimeData {
    public double healthAccumulator = 0.0;
    public double manaAccumulator = 0.0;
    public long lastSyncTick = 0L; // gameTime РїРѕСЃР»РµРґРЅРµРіРѕ СЃРёРЅРєР°
    public boolean dirty = false;  // РїРѕРјРµС‚РєР° РґР»СЏ РІРЅРµС€РЅРёС… СЃРёСЃС‚РµРј
    public MutablePlayerStats mutableStats = null; // РєСЌС€ РјСѓС‚Р°Р±РµР»СЊРЅС‹С… СЃС‚Р°С‚РѕРІ (РµСЃР»Рё СЃРѕР·РґР°РЅ)
    // РљРµС€Рё РґР»СЏ С‚СЏР¶С‘Р»С‹С… РІС‹С‡РёСЃР»РµРЅРёР№
    public int cachedDamage = -1;
    public long cacheUntilTick = 0L;
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\runtime\PlayerRuntimeManager.java ---
package com.doomspire.grimcore.runtime;

import net.minecraft.server.level.ServerPlayer;

import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * РџСЂРѕСЃС‚РѕР№ manager РґР»СЏ runtime-РґР°РЅРЅС‹С… (СЃРµСЂРІРµСЂ).
 */
public final class PlayerRuntimeManager {
    private static final ConcurrentHashMap<UUID, PlayerRuntimeData> RUNTIME = new ConcurrentHashMap<>();

    private PlayerRuntimeManager() {}

    public static PlayerRuntimeData getOrCreate(ServerPlayer player) {
        return RUNTIME.computeIfAbsent(player.getUUID(), uuid -> new PlayerRuntimeData());
    }

    public static PlayerRuntimeData get(ServerPlayer player) {
        return RUNTIME.get(player.getUUID());
    }

    public static void remove(ServerPlayer player) {
        if (player != null) RUNTIME.remove(player.getUUID());
    }

    public static void remove(UUID uuid) {
        if (uuid != null) RUNTIME.remove(uuid);
    }

    public static void clearAll() {
        RUNTIME.clear();
    }
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\EntityStatsUtils.java ---
package com.doomspire.grimcore.stats;

import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;

public class EntityStatsUtils {

    /**
     * вњ… Р РµРіРµРЅРµСЂР°С†РёСЏ Р·РґРѕСЂРѕРІСЊСЏ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј Р·РЅР°С‡РµРЅРёСЏ РёР· СЃС‚Р°С‚РѕРІ.
     * (РЅР°РїСЂРёРјРµСЂ, healthRegen Сѓ РёРіСЂРѕРєР°)
     */
    public static void applyRegen(LivingEntity entity) {
        if (entity instanceof Player player) {
            PlayerStats stats = PlayerStatsProvider.get(player);
            if (stats == null) return;

            applyRegen(player, stats.healthRegen());
        } else {
            MobStats stats = MobStatsProvider.get(entity);
            if (stats == null) return;

            int baseRegen = 1; // рџ”№ РґРµС„РѕР»С‚РЅС‹Р№ СЂРµРіРµРЅ РґР»СЏ РјРѕР±РѕРІ (РјРѕР¶РЅРѕ СЂР°СЃС€РёСЂРёС‚СЊ РїРѕР·Р¶Рµ)
            applyRegen(entity, baseRegen);
        }
    }

    /**
     * вњ… Р РµРіРµРЅРµСЂР°С†РёСЏ Р·РґРѕСЂРѕРІСЊСЏ СЃ Р·Р°РґР°РЅРЅС‹Рј РєРѕР»РёС‡РµСЃС‚РІРѕРј (РёРіРЅРѕСЂРёСЂСѓРµС‚ РІСЃС‚СЂРѕРµРЅРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ).
     * РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ СЃРёСЃС‚РµРјРѕР№ С‚РёРє-СЂРµРіРµРЅР°, Р±Р°С„С„Р°РјРё РёР»Рё РїСЂРµРґРјРµС‚Р°РјРё.
     */
    public static void applyRegen(LivingEntity entity, int amount) {
        if (amount <= 0) return;

        if (entity instanceof Player player) {
            PlayerStats stats = PlayerStatsProvider.get(player);
            if (stats == null) return;

            if (stats.health() < stats.maxHealth()) {
                int newHealth = Math.min(stats.maxHealth(), stats.health() + amount);
                PlayerStatsProvider.set(player, new PlayerStats(
                        newHealth,
                        stats.mana(),
                        stats.maxHealth(),
                        stats.maxMana(),
                        stats.healthRegen(),
                        stats.manaRegen()
                ));
            }
        } else {
            MobStats stats = MobStatsProvider.get(entity);
            if (stats == null) return;

            if (stats.getCurrentHealth() < stats.getMaxHealth()) {
                int newHealth = Math.min(stats.getMaxHealth(), stats.getCurrentHealth() + amount);
                MobStatsProvider.set(entity, new MobStats(stats.getMaxHealth(), newHealth));
            }
        }
    }

    /**
     * вњ… Р РµРіРµРЅРµСЂР°С†РёСЏ РјР°РЅС‹ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј Р·РЅР°С‡РµРЅРёСЏ РёР· СЃС‚Р°С‚РѕРІ РёРіСЂРѕРєР°.
     */
    public static void applyManaRegen(Player player) {
        PlayerStats stats = PlayerStatsProvider.get(player);
        if (stats == null) return;

        applyManaRegen(player, stats.manaRegen());
    }

    /**
     * вњ… Р РµРіРµРЅРµСЂР°С†РёСЏ РјР°РЅС‹ СЃ Р·Р°РґР°РЅРЅС‹Рј РєРѕР»РёС‡РµСЃС‚РІРѕРј.
     */
    public static void applyManaRegen(Player player, int amount) {
        if (amount <= 0) return;

        PlayerStats stats = PlayerStatsProvider.get(player);
        if (stats == null) return;

        if (stats.mana() < stats.maxMana()) {
            int newMana = Math.min(stats.maxMana(), stats.mana() + amount);
            PlayerStatsProvider.set(player, new PlayerStats(
                    stats.health(),
                    newMana,
                    stats.maxHealth(),
                    stats.maxMana(),
                    stats.healthRegen(),
                    stats.manaRegen()
            ));
        }
    }
}



--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\LevelScalingSystem.java ---
package com.doomspire.grimcore.stats;

/**
 * РЎРёСЃС‚РµРјР° СЃРєРµР№Р»РёРЅРіР° СЃС‚Р°С‚РѕРІ Рё СѓСЂРѕРЅР° РѕС‚ СѓСЂРѕРІРЅСЏ.
 * РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РїРµСЂРµСЃС‡С‘С‚Р° PlayerStats Рё С„РѕСЂРјСѓР» РѕСЂСѓР¶РёСЏ/Р·Р°РєР»РёРЅР°РЅРёР№.
 */
public class LevelScalingSystem {

    private static final int HP_PER_LEVEL   = 10;
    private static final int MANA_PER_LEVEL = 10;
    private static final int SPELL_DAMAGE_PER_LEVEL = 5;
    private static final int WEAPON_DAMAGE_PER_LEVEL = 20;

    public static int scaleMaxHealth(int base, int level) {
        return base + HP_PER_LEVEL * (level - 1);
    }

    public static int scaleMaxMana(int base, int level) {
        return base + MANA_PER_LEVEL * (level - 1);
    }

    public static int scaleSpellDamage(int base, int level) {
        return base + SPELL_DAMAGE_PER_LEVEL * (level - 1);
    }

    public static int scaleWeaponDamage(int base, int level) {
        return base + WEAPON_DAMAGE_PER_LEVEL * (level - 1);
    }

    /**
     * РџРµСЂРµСЃС‡РёС‚Р°РЅРЅС‹Рµ СЃС‚Р°С‚С‹ РёРіСЂРѕРєР° РїРѕРґ РєРѕРЅРєСЂРµС‚РЅС‹Р№ СѓСЂРѕРІРµРЅСЊ.
     * РќР° 1 СѓСЂРѕРІРЅРµ СЃРѕРІРїР°РґР°СЋС‚ СЃ PlayerStats.DEFAULT (100/100).
     */
    public static PlayerStats scaledStatsForLevel(int level) {
        int maxHealth = scaleMaxHealth(100, level);
        int maxMana   = scaleMaxMana(100, level);
        int regenHp   = 1 + (level / 2);
        int regenMana = 1 + (level / 3);

        return new PlayerStats(
                maxHealth,
                maxMana,
                maxHealth, // С‚РµРєСѓС‰РµРµ Р·РґРѕСЂРѕРІСЊРµ РїСЂРё Р°РїРµ = С„СѓР»Р»
                maxMana,   // С‚РµРєСѓС‰Р°СЏ РјР°РЅР° РїСЂРё Р°РїРµ = С„СѓР»Р»
                regenHp,
                regenMana
        );
    }
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\MobStats.java ---
package com.doomspire.grimcore.stats;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;

/**
 * РљР°СЃС‚РѕРјРЅС‹Рµ СЃС‚Р°С‚С‹ РјРѕР±РѕРІ (РїРѕРєР° С‚РѕР»СЊРєРѕ Р·РґРѕСЂРѕРІСЊРµ).
 * РҐСЂР°РЅРёС‚СЃСЏ РєР°Рє AttachmentType<MobStats>.
 */
public class MobStats {
    public static final MobStats DEFAULT = new MobStats(100, 100);

    private int maxHealth;
    private int currentHealth;

    public MobStats(int maxHealth, int currentHealth) {
        this.maxHealth = maxHealth;
        this.currentHealth = Math.min(currentHealth, maxHealth);
    }

    public int getMaxHealth() {
        return maxHealth;
    }

    public void setMaxHealth(int maxHealth) {
        this.maxHealth = maxHealth;
        if (currentHealth > maxHealth) {
            currentHealth = maxHealth;
        }
    }

    public int getCurrentHealth() {
        return currentHealth;
    }

    public void setCurrentHealth(int health) {
        this.currentHealth = Math.max(0, Math.min(health, maxHealth));
    }

    public void damage(int amount) {
        setCurrentHealth(currentHealth - amount);
    }

    public boolean isDead() {
        return currentHealth <= 0;
    }

    // рџ”№ РљРѕРґРµРє РґР»СЏ NBT (СЃРѕС…СЂР°РЅСЏРµРј maxHealth Рё currentHealth)
    public static final Codec<MobStats> CODEC = RecordCodecBuilder.create(instance -> instance.group(
            Codec.INT.fieldOf("maxHealth").forGetter(MobStats::getMaxHealth),
            Codec.INT.fieldOf("currentHealth").forGetter(MobStats::getCurrentHealth)
    ).apply(instance, MobStats::new));

    // рџ”№ РљРѕРґРµРє РґР»СЏ СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёРё (РїРµСЂРµРґР°С‡Р° РїРѕ СЃРµС‚Рё)
    public static final StreamCodec<FriendlyByteBuf, MobStats> STREAM_CODEC = StreamCodec.of(
            (buf, stats) -> {
                buf.writeInt(stats.getMaxHealth());
                buf.writeInt(stats.getCurrentHealth());
            },
            buf -> new MobStats(buf.readInt(), buf.readInt())
    );
}




--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\MobStatsProvider.java ---
package com.doomspire.grimcore.stats;

import net.minecraft.world.entity.LivingEntity;

public class MobStatsProvider {

    public static MobStats get(LivingEntity mob) {
        MobStats stats = mob.getData(ModAttachments.MOB_STATS);
        return stats != null ? stats : MobStats.DEFAULT;
    }

    public static void set(LivingEntity mob, MobStats stats) {
        mob.setData(ModAttachments.MOB_STATS, stats);
    }

    public static void damage(LivingEntity mob, int amount) {
        MobStats stats = get(mob);
        int health = Math.max(0, stats.getCurrentHealth() - amount);
        set(mob, new MobStats(
                stats.getMaxHealth(),
                health
        ));
    }

    public static void heal(LivingEntity mob, int amount) {
        MobStats stats = get(mob);
        int health = Math.min(stats.getMaxHealth(), stats.getCurrentHealth() + amount);
        set(mob, new MobStats(
                stats.getMaxHealth(),
                health
        ));
    }
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\ModAttachments.java ---
package com.doomspire.grimcore.stats;

import com.doomspire.grimcore.Grimcore;
import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.NeoForgeRegistries;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.attachment.AttachmentType;

public class ModAttachments {
    // Р РµРіРёСЃС‚СЂРёСЂСѓРµРј РІСЃРµ AttachmentType РїРѕРґ РЅР°С€РёРј РјРѕРґРѕРј
    public static final DeferredRegister<AttachmentType<?>> ATTACHMENT_TYPES =
            DeferredRegister.create(NeoForgeRegistries.ATTACHMENT_TYPES, Grimcore.MODID);

    // Attachment РґР»СЏ PlayerStats
    public static final DeferredHolder<AttachmentType<?>, AttachmentType<PlayerStats>> PLAYER_STATS =
            ATTACHMENT_TYPES.register("player_stats",
                    () -> AttachmentType.builder(() -> PlayerStats.DEFAULT)
                            .serialize(PlayerStats.CODEC)   // СЃРѕС…СЂР°РЅРµРЅРёРµ РІ NBT
                            //.copyOnDeath()                // РґСЂРёСЃРЅСЏ, РєРѕС‚РѕСЂР°СЏ РєРѕРїРёСЂСѓРµС‚ СЃС‚Р°С‚С‹ РјРµСЂС‚РІРѕРіРѕ РёРіСЂРѕРєР° Р±СѓРєРІР°Р»СЊРЅРѕ
                            .sync(PlayerStats.STREAM_CODEC)                // РіР»Р°РІРЅРѕРµ! СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёСЏ РЅР° РєР»РёРµРЅС‚
                            .build()
            );
    public static final DeferredHolder<AttachmentType<?>, AttachmentType<MobStats>> MOB_STATS =
            ATTACHMENT_TYPES.register("mob_stats",
                    () -> AttachmentType.builder(() -> MobStats.DEFAULT)
                            .serialize(MobStats.CODEC)
                            .sync(MobStats.STREAM_CODEC)
                            .build()
            );
    public static final DeferredHolder<AttachmentType<?>, AttachmentType<PlayerProgress>> PLAYER_PROGRESS =
            ATTACHMENT_TYPES.register("player_progress",
                    () -> AttachmentType.builder(() -> PlayerProgress.DEFAULT)
                            .serialize(PlayerProgress.CODEC)
                            .sync(PlayerProgress.STREAM_CODEC)
                            .build()
            );

}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\MutablePlayerStats.java ---
package com.doomspire.grimcore.stats;

/**
 * Р›С‘РіРєРёР№ РјСѓС‚Р°Р±РµР»СЊРЅС‹Р№ wrapper. РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РІ runtime РґР»СЏ РёР·РјРµРЅРµРЅРёР№ "РЅР° РјРµСЃС‚Рµ".
 * РљРѕРЅРІРµСЂС‚РёСЂСѓРµС‚СЃСЏ РІ immutable PlayerStats С‚РѕР»СЊРєРѕ РїСЂРё commit.
 */
public class MutablePlayerStats {
    public int health;
    public int mana;
    public int maxHealth;
    public int maxMana;
    public int healthRegen;
    public int manaRegen;

    private boolean dirty = false;

    public MutablePlayerStats(PlayerStats base) {
        this.health = base.health();
        this.mana = base.mana();
        this.maxHealth = base.maxHealth();
        this.maxMana = base.maxMana();
        this.healthRegen = base.healthRegen();
        this.manaRegen = base.manaRegen();
    }

    public synchronized void setHealth(int h) { if (this.health != h) { this.health = h; this.dirty = true; } }
    public synchronized void setMana(int m)   { if (this.mana != m)   { this.mana = m;   this.dirty = true; } }
    public synchronized void setMaxHealth(int v) { if (this.maxHealth != v) { this.maxHealth = v; this.dirty = true; } }
    public synchronized void setMaxMana(int v)   { if (this.maxMana != v)   { this.maxMana = v;   this.dirty = true; } }
    public synchronized void setHealthRegen(int v) { if (this.healthRegen != v) { this.healthRegen = v; this.dirty = true; } }
    public synchronized void setManaRegen(int v)   { if (this.manaRegen != v)   { this.manaRegen = v;   this.dirty = true; } }

    public synchronized boolean isDirty() { return dirty; }
    public synchronized void clearDirty() { this.dirty = false; }

    public synchronized PlayerStats toImmutable() {
        return new PlayerStats(health, mana, maxHealth, maxMana, healthRegen, manaRegen);
    }
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerProgress.java ---
package com.doomspire.grimcore.stats;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.ByteBufCodecs;
import net.minecraft.network.codec.StreamCodec;

/**
 * Р§РёСЃС‚С‹Рµ РґР°РЅРЅС‹Рµ РѕР± СѓСЂРѕРІРЅРµ РёРіСЂРѕРєР°.
 * РўРѕР»СЊРєРѕ С…СЂР°РЅРµРЅРёРµ + СЃРµСЂРёР°Р»РёР·Р°С†РёСЏ РІ NBT/СЃРµС‚СЊ.
 */
public record PlayerProgress(int level, int exp, int expCap) {

    public static final Codec<PlayerProgress> CODEC = RecordCodecBuilder.create(instance -> instance.group(
            Codec.INT.fieldOf("level").forGetter(PlayerProgress::level),
            Codec.INT.fieldOf("exp").forGetter(PlayerProgress::exp),
            Codec.INT.fieldOf("exp_cap").forGetter(PlayerProgress::expCap)
    ).apply(instance, PlayerProgress::new));

    public static final StreamCodec<FriendlyByteBuf, PlayerProgress> STREAM_CODEC = StreamCodec.composite(
            ByteBufCodecs.INT, PlayerProgress::level,
            ByteBufCodecs.INT, PlayerProgress::exp,
            ByteBufCodecs.INT, PlayerProgress::expCap,
            PlayerProgress::new
    );

    public static final PlayerProgress DEFAULT = new PlayerProgress(1, 0, 100);

    /**
     * Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹Р№ РјРµС‚РѕРґ РґР»СЏ РїСЂРѕРІРµСЂРєРё РїСЂРѕРіСЂРµСЃСЃР° РЅР° РєР»РёРµРЅС‚Рµ (HUD).
     */
    public String hudString() {
        return "Lvl " + level + " (" + exp + "/" + expCap + ")";
    }
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerProgressHandler.java ---
package com.doomspire.grimcore.stats;

import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;

/**
 * Р›РѕРіРёРєР° СЂР°Р±РѕС‚С‹ СЃ РїСЂРѕРіСЂРµСЃСЃРѕРј РёРіСЂРѕРєР°.
 * Р—РґРµСЃСЊ: РІС‹РґР°С‡Р° РѕРїС‹С‚Р°, Р°РІС‚РѕР»РµРІРµР»Р°Рї, Р»РѕРіРёСЂРѕРІР°РЅРёРµ.
 */
public class PlayerProgressHandler {

    public static void grantXp(ServerPlayer player, int xp) {
        PlayerProgress progress = player.getData(ModAttachments.PLAYER_PROGRESS);
        if (progress == null) return;

        int newXp = progress.exp() + xp;
        int newLevel = progress.level();
        int newCap = progress.expCap();

        boolean leveledUp = false;

        // РџСЂРѕРІРµСЂСЏРµРј Р°Рї СѓСЂРѕРІРЅСЏ
        while (newXp >= newCap) {
            newXp -= newCap;
            newLevel++;
            newCap = xpToNextLevel(newLevel);
            leveledUp = true;
        }

        // РћР±РЅРѕРІР»СЏРµРј РїСЂРѕРіСЂРµСЃСЃ
        PlayerProgress newProgress = new PlayerProgress(newLevel, newXp, newCap);
        player.setData(ModAttachments.PLAYER_PROGRESS, newProgress);

        // Р•СЃР»Рё СѓСЂРѕРІРµРЅСЊ Р°РїРЅСѓР»СЃСЏ в†’ РїРµСЂРµСЃС‡РёС‚С‹РІР°РµРј СЃС‚Р°С‚С‹
        if (leveledUp) {
            PlayerStats oldStats = PlayerStatsProvider.get(player);
            if (oldStats == null) oldStats = PlayerStats.DEFAULT;

            PlayerStats scaled = LevelScalingSystem.scaledStatsForLevel(newLevel);

            // СЃРѕС…СЂР°РЅСЏРµРј РґРѕР»СЋ С‚РµРєСѓС‰РёС… HP/MP РїСЂРё Р°РїРµ
            int newHealth = Math.min(
                    (int) ((oldStats.health() / (float) oldStats.maxHealth()) * scaled.maxHealth()),
                    scaled.maxHealth()
            );
            int newMana = Math.min(
                    (int) ((oldStats.mana() / (float) oldStats.maxMana()) * scaled.maxMana()),
                    scaled.maxMana()
            );

            PlayerStats adjusted = new PlayerStats(
                    newHealth,
                    newMana,
                    scaled.maxHealth(),
                    scaled.maxMana(),
                    scaled.healthRegen(),
                    scaled.manaRegen()
            );

            PlayerStatsProvider.set(player, adjusted);
            PlayerStatsProvider.clearMutableCache(player);
            PlayerStatsProvider.getMutable(player);
            PlayerStatsProvider.commitIfDirty(player);
        }
    }



    private static int xpToNextLevel(int currentLevel) {
        // С‚РІРѕСЏ С„РѕСЂРјСѓР»Р° РѕРїС‹С‚Р° РЅР° СѓСЂРѕРІРµРЅСЊ
        return 100 + (currentLevel * 20);
    }

    /**
     * Р—Р°РіРѕС‚РѕРІРєР° РїРѕРґ HUD РѕС‚СЂРёСЃРѕРІРєСѓ (РІС‹Р·С‹РІР°РµС‚СЃСЏ РІ CustomHudOverlay).
     */
    public static String getHudText(Player player) {
        PlayerProgress progress = player.getData(ModAttachments.PLAYER_PROGRESS);
        return progress != null ? progress.hudString() : "Lvl ? (0/0)";
    }
}




--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerStats.java ---
package com.doomspire.grimcore.stats;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.codec.ByteBufCodecs;
import net.minecraft.network.FriendlyByteBuf;

/**
 * Immutable СЃС‚Р°С‚С‹ РёРіСЂРѕРєР°: Р·РґРѕСЂРѕРІСЊРµ, РјР°РЅР°, СЂРµРіРµРЅ.
 * Р”Р»СЏ runtime-РёР·РјРµРЅРµРЅРёР№ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ MutablePlayerStats.
 */
public record PlayerStats(
        int health,
        int mana,
        int maxHealth,
        int maxMana,
        int healthRegen,
        int manaRegen
) {
    // РЎРѕС…СЂР°РЅРµРЅРёРµ РІ NBT/Json
    public static final Codec<PlayerStats> CODEC = RecordCodecBuilder.create(instance -> instance.group(
            Codec.INT.fieldOf("health").forGetter(PlayerStats::health),
            Codec.INT.fieldOf("mana").forGetter(PlayerStats::mana),
            Codec.INT.fieldOf("max_health").forGetter(PlayerStats::maxHealth),
            Codec.INT.fieldOf("max_mana").forGetter(PlayerStats::maxMana),
            Codec.INT.fieldOf("health_regen").forGetter(PlayerStats::healthRegen),
            Codec.INT.fieldOf("mana_regen").forGetter(PlayerStats::manaRegen)
    ).apply(instance, PlayerStats::new));

    // РЎРёРЅС…СЂРѕРЅРёР·Р°С†РёСЏ РїРѕ СЃРµС‚Рё
    public static final StreamCodec<FriendlyByteBuf, PlayerStats> STREAM_CODEC = StreamCodec.composite(
            ByteBufCodecs.INT, PlayerStats::health,
            ByteBufCodecs.INT, PlayerStats::mana,
            ByteBufCodecs.INT, PlayerStats::maxHealth,
            ByteBufCodecs.INT, PlayerStats::maxMana,
            ByteBufCodecs.INT, PlayerStats::healthRegen,
            ByteBufCodecs.INT, PlayerStats::manaRegen,
            PlayerStats::new
    );

    // Р‘Р°Р·РѕРІС‹Рµ Р·РЅР°С‡РµРЅРёСЏ РїСЂРё РїРµСЂРІРѕРј РІС…РѕРґРµ (СЃРѕРІРїР°РґР°СЋС‚ СЃ LevelScalingSystem.scaledStatsForLevel(1))
    public static final PlayerStats DEFAULT = new PlayerStats(
            100,
            100,
            100,
            100,
            1,
            1
    );

    /** @return true РµСЃР»Рё РёРіСЂРѕРє "Р¶РёРІ" (HP > 0) */
    public boolean isAlive() {
        return health > 0;
    }

    /** Р’РµСЂРЅС‘С‚ РЅРѕРІС‹Рµ СЃС‚Р°С‚С‹ СЃ РѕР±РЅРѕРІР»С‘РЅРЅС‹Рј Р·РґРѕСЂРѕРІСЊРµРј */
    public PlayerStats withHealth(int newHealth) {
        return new PlayerStats(
                newHealth,
                mana,
                maxHealth,
                maxMana,
                healthRegen,
                manaRegen
        );
    }

    /** Р’РµСЂРЅС‘С‚ РЅРѕРІС‹Рµ СЃС‚Р°С‚С‹ СЃ РѕР±РЅРѕРІР»С‘РЅРЅРѕР№ РјР°РЅРѕР№ */
    public PlayerStats withMana(int newMana) {
        return new PlayerStats(
                health,
                newMana,
                maxHealth,
                maxMana,
                healthRegen,
                manaRegen
        );
    }
}

--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\PlayerStatsProvider.java ---
package com.doomspire.grimcore.stats;

import com.doomspire.grimcore.runtime.PlayerRuntimeData;
import com.doomspire.grimcore.runtime.PlayerRuntimeManager;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;

import java.util.UUID;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
/**
 * РџСЂРѕРІР°Р№РґРµСЂ РґР»СЏ PlayerStats.
 * РЎРѕРґРµСЂР¶РёС‚ СЃС‚Р°СЂС‹Рµ РјРµС‚РѕРґС‹ СЂР°Р±РѕС‚С‹ СЃ immutable PlayerStats,
 * Р° С‚Р°РєР¶Рµ runtime-РєСЌС€ MutablePlayerStats Рё commitIfDirty.
 */
public class PlayerStatsProvider {

    // runtime cache: UUID -> MutablePlayerStats (СЃРёРЅС…СЂРѕРЅРёР·РёСЂСѓРµС‚СЃСЏ/СѓРїСЂР°РІР»СЏРµС‚СЃСЏ РІСЂСѓС‡РЅСѓСЋ)
    private static final Map<UUID, MutablePlayerStats> RUNTIME_CACHE = new ConcurrentHashMap<>();

    // РќР°СЃС‚СЂР°РёРІР°РµРјС‹Р№ РёРЅС‚РµСЂРІР°Р» СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёРё (С‚РёРє = 1/20 СЃРµРє)
    private static final long SYNC_INTERVAL_TICKS = 20L; // СЂР°Р· РІ СЃРµРєСѓРЅРґСѓ РїРѕ-СѓРјРѕР»С‡Р°РЅРёСЋ

    // ===== РЎСѓС‰РµСЃС‚РІСѓСЋС‰РёРµ РјРµС‚РѕРґС‹, РѕСЃС‚Р°РІР»СЏРµРј РёС… РґР»СЏ СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚Рё =====
    public static PlayerStats get(Player player) {
        PlayerStats stats = player.getData(ModAttachments.PLAYER_STATS);
        return stats != null ? stats : PlayerStats.DEFAULT;
    }

    public static void set(Player player, PlayerStats stats) {
        player.setData(ModAttachments.PLAYER_STATS, stats);
    }

    public static void damage(Player player, int amount) {
        PlayerStats stats = get(player);
        int newHp = Math.max(0, stats.health() - amount);
        set(player, new PlayerStats(
                newHp,
                stats.mana(),
                stats.maxHealth(),
                stats.maxMana(),
                stats.healthRegen(),
                stats.manaRegen()
        ));
    }

    public static void consumeMana(Player player, int amount) {
        PlayerStats stats = get(player);
        int newMana = Math.max(0, stats.mana() - amount);
        set(player, new PlayerStats(
                stats.health(),
                newMana,
                stats.maxHealth(),
                stats.maxMana(),
                stats.healthRegen(),
                stats.manaRegen()
        ));
    }

    // ===== РќРѕРІС‹Рµ runtime-РјРµС‚РѕРґС‹ =====

    /**
     * РџРѕР»СѓС‡РёС‚СЊ РёР»Рё СЃРѕР·РґР°С‚СЊ MutablePlayerStats РґР»СЏ РґР°РЅРЅРѕРіРѕ СЃРµСЂРІРµСЂР° РёРіСЂРѕРєР°.
     * РСЃРїРѕР»СЊР·РѕРІР°С‚СЊ РґР»СЏ С‡Р°СЃС‚С‹С… РёР·РјРµРЅРµРЅРёР№ (regen, СЌС„С„РµРєС‚С‹) вЂ” РёР·РјРµРЅРµРЅРёСЏ Р±СѓРґСѓС‚
     * РїСЂРёРјРµРЅСЏС‚СЊСЃСЏ Р»РѕРєР°Р»СЊРЅРѕ Рё СЃРёРЅС…СЂРѕРЅРёР·РёСЂРѕРІР°С‚СЊСЃСЏ РєРѕРЅС‚СЂРѕР»РёСЂСѓРµРјРѕ.
     */
    public static MutablePlayerStats getMutable(ServerPlayer player) {
        if (player == null) return null;
        UUID id = player.getUUID();
        return RUNTIME_CACHE.computeIfAbsent(id, uuid -> {
            PlayerStats current = get(player);
            MutablePlayerStats m = new MutablePlayerStats(current);
            // РєРµС€РёСЂСѓРµРј СЃСЃС‹Р»РєСѓ Рё РІ runtime data
            PlayerRuntimeData runtime = PlayerRuntimeManager.getOrCreate(player);
            runtime.mutableStats = m;
            return m;
        });
    }

    /**
     * РЈРґР°Р»РёС‚СЊ mutable-РєРµС€ (РІС‹Р·РІР°С‚СЊ РїСЂРё РІС‹С…РѕРґРµ РёРіСЂРѕРєР° С‡С‚РѕР±С‹ РЅРµ РґРµСЂР¶Р°С‚СЊ СЃСЃС‹Р»РєСѓ).
     */
    public static void clearMutableCache(ServerPlayer player) {
        if (player == null) return;
        RUNTIME_CACHE.remove(player.getUUID());
        PlayerRuntimeData rt = PlayerRuntimeManager.get(player);
        if (rt != null) rt.mutableStats = null;
    }

    /**
     * Р•СЃР»Рё РІ runtime-РєРµС€Рµ РµСЃС‚СЊ РёР·РјРµРЅС‘РЅРЅС‹Рµ (dirty) РґР°РЅРЅС‹Рµ Рё РїСЂРѕС€С‘Р» РёРЅС‚РµСЂРІР°Р»,
     * РїСЂРµРѕР±СЂР°Р·РѕРІР°С‚СЊ РёС… РІ immutable PlayerStats Рё Р·Р°РїРёСЃР°С‚СЊ РІ Attachment.
     * Р­С‚Рѕ РІС‹Р·РѕРІРµС‚ СЃС‚Р°РЅРґР°СЂС‚РЅСѓСЋ СЃРµСЂРёР°Р»РёР·Р°С†РёСЋ/СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёСЋ NeoForge.
     */
    public static void commitIfDirty(ServerPlayer player) {
        if (player == null || player.level().isClientSide()) return;
        MutablePlayerStats m = RUNTIME_CACHE.get(player.getUUID());
        if (m == null || !m.isDirty()) return;

        PlayerRuntimeData runtime = PlayerRuntimeManager.getOrCreate(player);
        long now = player.level().getGameTime();
        if (now - runtime.lastSyncTick < SYNC_INTERVAL_TICKS) {
            // РµС‰С‘ РЅРµ РїСЂРѕС€Р»Рѕ РІСЂРµРјСЏ СЃРёРЅРєР°
            return;
        }

        // РЎРёРЅС…СЂРѕРЅРёР·Р°С†РёСЏ: Р·Р°РїРёСЃС‹РІР°РµРј immutable РІ attachment
        PlayerStats newStats = m.toImmutable();
        player.setData(ModAttachments.PLAYER_STATS, newStats);

        m.clearDirty();
        runtime.lastSyncTick = now;
        runtime.dirty = false;
    }
}


--- D:\doomspire\grimcore\src\main\java\com\doomspire\grimcore\stats\StatsCalculator.java ---
package com.doomspire.grimcore.stats;

public class StatsCalculator {

    public static PlayerStats recalc(PlayerProgress progress) {
        int level = progress.level();

        int maxHp   = LevelScalingSystem.scaleMaxHealth(PlayerStats.DEFAULT.maxHealth(), level);
        int maxMana = LevelScalingSystem.scaleMaxMana(PlayerStats.DEFAULT.maxMana(), level);

        return new PlayerStats(
                maxHp,                   // health = РїРѕР»РЅРѕРµ РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ РїСЂРё Р°РїРіСЂРµР№РґРµ
                maxMana,
                maxHp,
                maxMana,
                PlayerStats.DEFAULT.healthRegen(),
                PlayerStats.DEFAULT.manaRegen()
        );
    }

    public static int scaledSpellDamage(int base, int level) {
        return LevelScalingSystem.scaleSpellDamage(base, level);
    }

    public static int scaledWeaponDamage(int base, int level) {
        return LevelScalingSystem.scaleWeaponDamage(base, level);
    }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\blockstates\deepslate_odamite_ore.json ---
{
  "variants": { "": { "model": "grimfate:block/deepslate_odamite_ore" } }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\blockstates\odamite_ore.json ---
{
  "variants": { "": { "model": "grimfate:block/odamite_ore" } }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\blockstates\test_crafting_station.json ---
{
  "variants": {
    "part=base,facing=north": { "model": "grimfate:block/test_crafting_station_base" },
    "part=base,facing=east":  { "model": "grimfate:block/test_crafting_station_base", "y": 90 },
    "part=base,facing=south": { "model": "grimfate:block/test_crafting_station_base", "y": 180 },
    "part=base,facing=west":  { "model": "grimfate:block/test_crafting_station_base", "y": 270 },

    "part=ext,facing=north":  { "model": "grimfate:block/test_crafting_station_ext" },
    "part=ext,facing=east":   { "model": "grimfate:block/test_crafting_station_ext", "y": 90 },
    "part=ext,facing=south":  { "model": "grimfate:block/test_crafting_station_ext", "y": 180 },
    "part=ext,facing=west":   { "model": "grimfate:block/test_crafting_station_ext", "y": 270 }
  }
}



--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\blockstates\wild_herb.json ---
{
  "variants": { "": { "model": "grimfate:block/wild_herb" } }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\lang\en_us.json ---
{
  "itemGroup.grimfate": "Example Mod Tab",
  "block.grimfate.example_block": "Example Block",
  "item.grimfate.example_item": "Example Item",

  "grimfate.configuration.title": "Pantheon of Doom Configs",
  "grimfate.configuration.section.grimfate.common.toml": "Pantheon of Doom Configs",
  "grimfate.configuration.section.grimfate.common.toml.title": "Pantheon of Doom Configs",
  "grimfate.configuration.items": "Item List",
  "grimfate.configuration.logDirtBlock": "Log Dirt Block",
  "grimfate.configuration.magicNumberIntroduction": "Magic Number Text",
  "grimfate.configuration.magicNumber": "Magic Number",
  "block.grimfate.test_crafting_station": "Test Crafting Station",
  "item.grimfate.test_crafted_item": "Test Crafted Item",
  "gui.grimfate.recipes": "Recipes",
  "gui.grimfate.refresh": "Refresh",
  "gui.grimfate.autofill": "Autofill",
  "gui.grimfate.reset": "Reset"
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\lang\ru_ru.json ---
{
  "block.grimfate.odamite_ore": "РћРґР°РјРёС‚РѕРІР°СЏ СЂСѓРґР°",
  "block.grimfate.deepslate_odamite_ore": "Р“Р»СѓР±РёРЅРЅР°СЏ РѕРґР°РјРёС‚РѕРІР°СЏ СЂСѓРґР°",
  "block.grimfate.wild_herb": "Р”РёРєР°СЏ С‚СЂР°РІР°",
  "item.grimfate.raw_odamite": "РЎС‹СЂРѕР№ РѕРґР°РјРёС‚",
  "item.grimfate.odamite_ingot": "РЎР»РёС‚РѕРє РѕРґР°РјРёС‚Р°",
  "block.grimfate.test_crafting_station": "РўРµСЃС‚РѕРІР°СЏ РєСЂР°С„С‚РѕРІР°СЏ СЃС‚Р°РЅС†РёСЏ",
  "item.grimfate.test_crafted_item": "РўРµСЃС‚РѕРІС‹Р№ СЃРєСЂР°С„С‡РµРЅРЅС‹Р№ РїСЂРµРґРјРµС‚",
  "gui.grimfate.recipes": "Р РµС†РµРїС‚С‹",
  "gui.grimfate.refresh": "РћР±РЅРѕРІРёС‚СЊ",
  "gui.grimfate.autofill": "Р—Р°РїРѕР»РЅРёС‚СЊ",
  "gui.grimfate.reset": "РЎР±СЂРѕСЃРёС‚СЊ"
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\block\deepslate_odamite_ore.json ---
{
  "parent": "minecraft:block/cube_all",
  "textures": { "all": "grimfate:block/deepslate_odamite_ore" }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\block\odamite_ore.json ---
{
  "parent": "minecraft:block/cube_all",
  "textures": { "all": "grimfate:block/odamite_ore" }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\block\test_crafting_station.json ---
{
	"format_version": "1.9.0",
	"credit": "Made with Blockbench",
	"texture_size": [64, 64],
	"textures": {
		"0": "block/texture1",
		"1": "block/texture2",
		"2": "block/texture3",
		"3": "block/texture4",
		"4": "block/texture_main",
		"particle": "block/texture"
	},
	"elements": [
		{
			"name": "main",
			"from": [0, 12, 0],
			"to": [32, 16, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [16, 12, 0]},
			"faces": {
				"north": {"uv": [0, 8, 8, 9], "texture": "#4"},
				"east": {"uv": [8, 1, 12, 2], "texture": "#4"},
				"south": {"uv": [8, 0, 16, 1], "texture": "#4"},
				"west": {"uv": [8, 2, 12, 3], "texture": "#4"},
				"up": {"uv": [8, 4, 0, 0], "texture": "#4"},
				"down": {"uv": [8, 4, 0, 8], "texture": "#4"}
			}
		},
		{
			"name": "nw",
			"from": [28, 0, 0],
			"to": [32, 12, 4],
			"rotation": {"angle": 0, "axis": "y", "origin": [28, 0, 0]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#2"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#2"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#2"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#2"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#2"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#2"}
			}
		},
		{
			"name": "sw",
			"from": [28, 0, 12],
			"to": [32, 12, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [28, 0, 12]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#3"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#3"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#3"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#3"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#3"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#3"}
			}
		},
		{
			"name": "se",
			"from": [0, 0, 12],
			"to": [4, 12, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [0, 0, 12]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#0"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#0"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#0"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#0"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#0"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#0"}
			}
		},
		{
			"name": "ne",
			"from": [0, 0, 0],
			"to": [4, 12, 4],
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#1"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#1"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#1"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#1"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#1"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#1"}
			}
		}
	]
}

--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\block\wild_herb.json ---
{
  "parent": "minecraft:block/cross",
  "textures": { "cross": "grimfate:block/wild_herb" }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item\deepslate_odamite_ore.json ---
{ "parent": "grimfate:block/deepslate_odamite_ore" }


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item\odamite_ingot.json ---
{
  "parent": "minecraft:item/generated",
  "textures": { "layer0": "grimfate:item/odamite_ingot" }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item\odamite_ore.json ---
{ "parent": "grimfate:block/odamite_ore" }


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item\raw_odamite.json ---
{
  "parent": "minecraft:item/generated",
  "textures": { "layer0": "grimfate:item/raw_odamite" }
}


--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item\test_crafting_station.json ---
{
  "parent": "grimfate:block/test_crafting_station_base"
}



--- D:\doomspire\grimfate\build\resources\main\assets\grimfate\models\item\wild_herb.json ---
{ "parent": "grimfate:block/wild_herb" }


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\loot_tables\blocks\deepslate_odamite_ore.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:raw_odamite" } ]
    }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\loot_tables\blocks\odamite_ore.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:raw_odamite" } ]
    }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\loot_tables\blocks\test_crafting_station.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        { "type": "minecraft:item", "name": "grimfate:test_crafting_station" }
      ],
      "conditions": [
        { "condition": "minecraft:survives_explosion" }
      ]
    }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\loot_tables\blocks\wild_herb.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:wild_herb" } ]
    }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\neoforge\biome_modifier\add_odamite_ore.json ---
{
  "type": "neoforge:add_features",
  "biomes": "#minecraft:is_overworld",
  "features": "grimfate:ore_odamite_placed",
  "step": "underground_ores"
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\neoforge\biome_modifier\add_wild_herb.json ---
{
  "type": "neoforge:add_features",
  "biomes": "#grimfate:has_wild_herb",
  "features": "grimfate:wild_herb_patch_placed",
  "step": "vegetal_decoration"
}



--- D:\doomspire\grimfate\build\resources\main\data\grimfate\recipes\odamite_ingot_from_smelting.json ---
{
  "type": "minecraft:smelting",
  "ingredient": { "item": "grimfate:raw_odamite" },
  "result": "grimfate:odamite_ingot",
  "experience": 0.7,
  "cookingtime": 200
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\recipes\test_crafted_item.json ---
{
  "type": "grimcore:circle6",
  "ingredients": [
    { "item": "minecraft:cobblestone" },
    { "item": "minecraft:oak_planks" },
    { "item": "minecraft:iron_ingot" },
    { "item": "minecraft:copper_ingot" },
    { "item": "minecraft:gold_ingot" },
    { "item": "minecraft:dirt" }
  ],
  "result": { "item": "grimfate:test_crafted_item", "count": 1 }
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\tags\worldgen\biome\has_wild_herb.json ---
{
  "replace": false,
  "values": [
    "minecraft:plains",
    "minecraft:forest",
    "minecraft:flower_forest",
    "minecraft:taiga"
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\configured_feature\ore_odamite.json ---
{
  "type": "minecraft:ore",
  "config": {
    "discard_chance_on_air_exposure": 0.0,
    "size": 7,
    "targets": [
      {
        "state": { "Name": "grimfate:odamite_ore" },
        "target": { "predicate_type": "minecraft:tag_match", "tag": "minecraft:stone_ore_replaceables" }
      },
      {
        "state": { "Name": "grimfate:deepslate_odamite_ore" },
        "target": { "predicate_type": "minecraft:tag_match", "tag": "minecraft:deepslate_ore_replaceables" }
      }
    ]
  }
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\configured_feature\wild_herb_patch.json ---
{
  "type": "minecraft:random_patch",
  "config": {
    "tries": 48,
    "xz_spread": 6,
    "y_spread": 2,
    "feature": "grimfate:wild_herb_simple_placed"
  }
}



--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\configured_feature\wild_herb_simple.json ---
{
  "type": "minecraft:simple_block",
  "config": {
    "to_place": {
      "type": "minecraft:simple_state_provider",
      "state": { "Name": "grimfate:wild_herb" }
    }
  }
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\placed_feature\ore_odamite_placed.json ---
{
  "feature": "grimfate:ore_odamite",
  "placement": [
    { "type": "minecraft:count", "count": 10 },
    { "type": "minecraft:in_square" },
    {
      "type": "minecraft:height_range",
      "height": {
        "type": "minecraft:trapezoid",
        "min_inclusive": { "absolute": -32 },
        "max_inclusive": { "absolute": 48 }
      }
    },
    { "type": "minecraft:biome" }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\placed_feature\wild_herb_patch_placed.json ---
{
  "feature": "grimfate:wild_herb_patch",
  "placement": [
    { "type": "minecraft:count", "count": 2 },
    { "type": "minecraft:in_square" },
    { "type": "minecraft:heightmap", "heightmap": "WORLD_SURFACE_WG" },
    { "type": "minecraft:biome" }
  ]
}



--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\placed_feature\wild_herb_simple_placed.json ---
{
  "feature": "grimfate:wild_herb_simple",
  "placement": []
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\structure\underground_dungeon.json ---
{
  "type": "minecraft:jigsaw",
  "start_pool": "grimfate:dungeon/main_pool",
  "size": 7,
  "use_expansion_hack": false,
  "step": "underground_structures",
  "terrain_adaptation": "beard_box",

  "start_height": { "above_bottom": 32 },

  "max_distance_from_center": 80,
  "biomes": "#minecraft:is_overworld",
  "spawn_overrides": {}
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\structure_set\underground_dungeon.json ---
{
  "structures": [
    { "structure": "grimfate:underground_dungeon", "weight": 1 }
  ],
  "placement": {
    "type": "minecraft:random_spread",
    "spacing": 30,
    "separation": 12,
    "salt": 424242
  }
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\template_pool\dungeon\main_pool.json ---
{
  "name": "grimfate:dungeon/main_pool",
  "fallback": "minecraft:empty",
  "elements": [
    {
      "weight": 3,
      "element": {
        "location": "grimfate:room",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 3,
      "element": {
        "location": "grimfate:corridor",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 1,
      "element": {
        "location": "grimfate:upstair_room",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\grimfate\worldgen\template_pool\dungeon\upstairs_pool.json ---
{
  "name": "grimfate:dungeon/upstairs_pool",
  "fallback": "minecraft:empty",
  "elements": [
    {
      "weight": 3,
      "element": {
        "location": "grimfate:upstair",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 1,
      "element": {
        "location": "grimfate:entrance",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }
  ]
}


--- D:\doomspire\grimfate\build\resources\main\data\minecraft\tags\blocks\mineable\pickaxe.json ---
{ "replace": false, "values": [
  "grimfate:odamite_ore",
  "grimfate:deepslate_odamite_ore"
]}


--- D:\doomspire\grimfate\build\resources\main\data\minecraft\tags\blocks\needs_iron_tool.json ---
{ "replace": false, "values": [
  "grimfate:odamite_ore",
  "grimfate:deepslate_odamite_ore"
]}


--- D:\doomspire\grimfate\build\tmp\createMinecraftArtifacts\nfrt-problem-report.json ---
[]

--- D:\doomspire\grimfate\run\downloads\log.json ---

--- D:\doomspire\grimfate\run\saves\Новый мир (1)\advancements\380df991-f603-344c-a090-369bad2a924a.json ---
{
  "minecraft:recipes/decorations/crafting_table": {
    "criteria": {
      "unlock_right_away": "2025-09-20 23:42:31 +0600"
    },
    "done": true
  },
  "minecraft:adventure/adventuring_time": {
    "criteria": {
      "minecraft:plains": "2025-09-20 23:42:31 +0600"
    },
    "done": false
  },
  "DataVersion": 3955
}

--- D:\doomspire\grimfate\run\saves\Новый мир (1)\stats\380df991-f603-344c-a090-369bad2a924a.json ---
{"stats":{"minecraft:custom":{"minecraft:time_since_rest":583,"minecraft:leave_game":1,"minecraft:play_time":583,"minecraft:time_since_death":583,"minecraft:walk_one_cm":321,"minecraft:total_world_time":5562},"minecraft:used":{"grimfate:test_crafting_station":2}},"DataVersion":3955}

--- D:\doomspire\grimfate\run\saves\Новый мир (2)\advancements\380df991-f603-344c-a090-369bad2a924a.json ---
{
  "minecraft:recipes/redstone/lever": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/iron_sword": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/iron_pickaxe": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/copper_block": {
    "criteria": {
      "has_copper_ingot": "2025-09-20 23:48:53 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/iron_leggings": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/shield": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/hopper": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/iron_bars": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/oak_slab": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/brush": {
    "criteria": {
      "has_copper_ingot": "2025-09-20 23:48:53 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/golden_axe": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/iron_boots": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/iron_chestplate": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/oak_sign": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/oak_trapdoor": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/golden_pickaxe": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/stone_sword": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/cobblestone_wall": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/stone_pickaxe": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/lantern": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/stone_axe": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/misc/iron_nugget": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/misc/gold_nugget": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/misc/bucket": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/iron_helmet": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/golden_shovel": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/copper_door": {
    "criteria": {
      "has_copper_ingot": "2025-09-20 23:48:53 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/oak_fence_gate": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:story/mine_stone": {
    "criteria": {
      "get_stone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/furnace": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/transportation/minecart": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/iron_hoe": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/food/golden_apple": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/iron_shovel": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/golden_boots": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/golden_helmet": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/oak_pressure_plate": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/oak_door": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:story/smelt_iron": {
    "criteria": {
      "iron": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/crafting_table": {
    "criteria": {
      "unlock_right_away": "2025-09-20 23:47:55 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/golden_sword": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/chest": {
    "criteria": {
      "has_lots_of_items": "2025-09-20 23:50:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/shears": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/misc/stick": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/cobblestone_slab": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/gold_block": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/cobblestone_slab_from_cobblestone_stonecutting": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/oak_stairs": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/iron_trapdoor": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/lightning_rod": {
    "criteria": {
      "has_copper_ingot": "2025-09-20 23:48:53 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/chain": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/oak_fence": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/golden_chestplate": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/iron_block": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/iron_axe": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/crossbow": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/stone": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:adventure/adventuring_time": {
    "criteria": {
      "minecraft:plains": "2025-09-20 23:47:56 +0600"
    },
    "done": false
  },
  "minecraft:recipes/decorations/barrel": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/smithing_table": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/decorations/cobblestone_wall_from_cobblestone_stonecutting": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/cobblestone_stairs_from_cobblestone_stonecutting": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/golden_hoe": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/building_blocks/cobblestone_stairs": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/copper_trapdoor": {
    "criteria": {
      "has_copper_ingot": "2025-09-20 23:48:53 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/stone_hoe": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/light_weighted_pressure_plate": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "minecraft:recipes/tools/stone_shovel": {
    "criteria": {
      "has_cobblestone": "2025-09-20 23:48:59 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/oak_button": {
    "criteria": {
      "has_planks": "2025-09-20 23:49:07 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/iron_door": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/redstone/heavy_weighted_pressure_plate": {
    "criteria": {
      "has_iron_ingot": "2025-09-20 23:48:54 +0600"
    },
    "done": true
  },
  "minecraft:recipes/combat/golden_leggings": {
    "criteria": {
      "has_gold_ingot": "2025-09-20 23:48:52 +0600"
    },
    "done": true
  },
  "DataVersion": 3955
}

--- D:\doomspire\grimfate\run\saves\Новый мир (2)\stats\380df991-f603-344c-a090-369bad2a924a.json ---
{"stats":{"minecraft:custom":{"minecraft:jump":1,"minecraft:open_chest":7,"minecraft:time_since_rest":5523,"minecraft:leave_game":1,"minecraft:play_time":5523,"minecraft:time_since_death":5523,"minecraft:walk_one_cm":5580,"minecraft:total_world_time":7149},"minecraft:used":{"minecraft:chest":4,"grimfate:test_crafting_station":7}},"DataVersion":3955}

--- D:\doomspire\grimfate\run\saves\Новый мир\advancements\380df991-f603-344c-a090-369bad2a924a.json ---
{
  "minecraft:recipes/decorations/crafting_table": {
    "criteria": {
      "unlock_right_away": "2025-09-20 23:28:39 +0600"
    },
    "done": true
  },
  "minecraft:adventure/adventuring_time": {
    "criteria": {
      "minecraft:plains": "2025-09-20 23:28:40 +0600"
    },
    "done": false
  },
  "DataVersion": 3955
}

--- D:\doomspire\grimfate\run\saves\Новый мир\stats\380df991-f603-344c-a090-369bad2a924a.json ---
{"stats":{"minecraft:used":{"grimfate:test_crafting_station":14},"minecraft:custom":{"minecraft:jump":2,"minecraft:time_since_rest":1517,"minecraft:leave_game":2,"minecraft:play_time":1517,"minecraft:time_since_death":1517,"minecraft:walk_one_cm":12644,"minecraft:sneak_time":25,"minecraft:total_world_time":1544,"minecraft:fly_one_cm":140}},"DataVersion":3955}

--- D:\doomspire\grimfate\run\usercache.json ---
[{"name":"Dev","uuid":"380df991-f603-344c-a090-369bad2a924a","expiresOn":"2025-10-20 23:47:55 +0600"}]

--- D:\doomspire\grimfate\run\usernamecache.json ---
{
  "380df991-f603-344c-a090-369bad2a924a": "Dev"
}

--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\block\TestCraftingStationBlock.java ---
package com.doomspire.grimfate.block;

import com.doomspire.grimfate.registry.ModBlockEntities;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.util.StringRepresentable;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.ItemInteractionResult;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.LevelAccessor;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.EntityBlock;
import net.minecraft.world.level.block.RenderShape;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.block.state.properties.DirectionProperty;
import net.minecraft.world.level.block.state.properties.EnumProperty;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

public class TestCraftingStationBlock extends Block implements EntityBlock {
    public static final DirectionProperty FACING = BlockStateProperties.HORIZONTAL_FACING;

    public enum TwoPart implements StringRepresentable {
        BASE("base"), EXT("ext");
        private final String name;
        TwoPart(String n) { this.name = n; }
        @Override public String getSerializedName() { return name; }
        @Override public String toString() { return name; }
    }
    public static final EnumProperty<TwoPart> PART = EnumProperty.create("part", TwoPart.class);

    // РџСЂРѕСЃС‚РѕР№ С…РёС‚Р±РѕРєСЃ В«СЃС‚РѕР» СЃ РЅРѕР¶РєР°РјРёВ» (Р·Р°РјРµРЅРёС€СЊ РїРѕРґ РіРµРѕРјРµС‚СЂРёСЋ РёР· Blockbench РїСЂРё Р¶РµР»Р°РЅРёРё)
    private static final VoxelShape SHAPE_TOP = Block.box(0, 14, 0, 16, 16, 16);
    private static final VoxelShape SHAPE_LEG1 = Block.box(1, 0, 1, 3, 14, 3);
    private static final VoxelShape SHAPE_LEG2 = Block.box(13, 0, 1, 15, 14, 3);
    private static final VoxelShape SHAPE_LEG3 = Block.box(1, 0, 13, 3, 14, 15);
    private static final VoxelShape SHAPE_LEG4 = Block.box(13, 0, 13, 15, 14, 15);
    private static final VoxelShape SHAPE = Shapes.or(SHAPE_TOP, SHAPE_LEG1, SHAPE_LEG2, SHAPE_LEG3, SHAPE_LEG4);

    public TestCraftingStationBlock(Properties props) {
        super(props.noOcclusion());
        this.registerDefaultState(this.stateDefinition.any()
                .setValue(FACING, Direction.NORTH)
                .setValue(PART, TwoPart.BASE));
    }

    @Override
    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> b) {
        b.add(FACING, PART);
    }

    // 1Г—2 РіРѕСЂРёР·РѕРЅС‚Р°Р»СЊРЅРѕ: BASE СЃС‚Р°РІРёРј, EXT вЂ” РІРїРµСЂС‘Рґ РїРѕ FACING (РєР°Рє РєСЂРѕРІР°С‚СЊ)
    @Override
    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
        Direction dir = ctx.getHorizontalDirection().getOpposite(); // В«СЃРјРѕС‚СЂРёС‚В» РЅР° РёРіСЂРѕРєР°
        BlockPos pos = ctx.getClickedPos();
        BlockPos extPos = pos.relative(dir);
        // РїСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ РІС‚РѕСЂР°СЏ РєР»РµС‚РєР° РґРѕСЃС‚СѓРїРЅР°
        if (!ctx.getLevel().getBlockState(extPos).canBeReplaced(ctx)) return null;
        return defaultBlockState().setValue(FACING, dir).setValue(PART, TwoPart.BASE);
    }

    @Override
    public void setPlacedBy(Level level, BlockPos pos, BlockState state, LivingEntity placer, ItemStack stack) {
        Direction f = state.getValue(FACING);
        BlockPos extPos = pos.relative(f);
        if (level.getBlockState(extPos).canBeReplaced()) {
            level.setBlock(extPos, state.setValue(PART, TwoPart.EXT), UPDATE_ALL);
        } else {
            // СЃС‚СЂР°С…СѓРµРјСЃСЏ РѕС‚ РіРѕРЅРєРё вЂ” РѕС‚РєР°С‚С‹РІР°РµРј СѓСЃС‚Р°РЅРѕРІРєСѓ
            level.destroyBlock(pos, true);
        }
        super.setPlacedBy(level, pos, state, placer, stack);
    }

    // РџРљРњ РџРЈРЎРўРћР™ Р РЈРљРћР™ (1.21.1): СЌС‚РѕС‚ РјРµС‚РѕРґ Рё Р±СѓРґРµС‚ РІС‹Р·С‹РІР°С‚СЊСЃСЏ
    @Override
    public InteractionResult useWithoutItem(BlockState state, Level level, BlockPos pos, Player player, BlockHitResult hit) {
        if (level.isClientSide) return InteractionResult.SUCCESS;

        BlockPos basePos = (state.getValue(PART) == TwoPart.BASE)
                ? pos
                : pos.relative(state.getValue(FACING).getOpposite());

        BlockEntity be = level.getBlockEntity(basePos);
        if (be instanceof TestCraftingStationBlockEntity tbe && player instanceof ServerPlayer sp) {
            sp.openMenu(tbe, buf -> buf.writeBlockPos(basePos));
            return InteractionResult.CONSUME;
        }
        return InteractionResult.PASS;
    }

    // РџРљРњ РџР Р•Р”РњР•РўРћРњ (1.21.1): РїСЂРѕРєСЃРёСЂСѓРµРј Рє РїСѓСЃС‚РѕР№ СЂСѓРєРµ
    @Override
    public ItemInteractionResult useItemOn(ItemStack stack, BlockState state, Level level, BlockPos pos,
                                           Player player, InteractionHand hand, BlockHitResult hit) {
        InteractionResult r = useWithoutItem(state, level, pos, player, hit);
        if (r.consumesAction()) return ItemInteractionResult.sidedSuccess(level.isClientSide);
        return ItemInteractionResult.PASS_TO_DEFAULT_BLOCK_INTERACTION;
    }

    @Override
    public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext ctx) {
        return SHAPE;
    }

    @Override
    public RenderShape getRenderShape(BlockState state) { return RenderShape.MODEL; }

    // BE СЃРѕР·РґР°С‘Рј С‚РѕР»СЊРєРѕ РЅР° Р±Р°Р·РѕРІРѕР№ РїРѕР»РѕРІРёРЅРµ
    @Override
    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
        return state.getValue(PART) == TwoPart.BASE ? ModBlockEntities.TEST_CRAFTER.get().create(pos, state) : null;
    }

    // РљРѕРЅС‚СЂРѕР»СЊ С†РµР»РѕСЃС‚РЅРѕСЃС‚Рё РїР°СЂС‹ (1.21.1 СЃРёРіРЅР°С‚СѓСЂР° вЂ” LevelAccessor!)
    @Override
    public BlockState updateShape(BlockState state, Direction dir, BlockState neighbor,
                                  LevelAccessor level, BlockPos pos, BlockPos neighborPos) {
        Direction f = state.getValue(FACING);
        if (state.getValue(PART) == TwoPart.BASE && dir == f) {
            if (neighbor.getBlock() != this || neighbor.getValue(PART) != TwoPart.EXT || neighbor.getValue(FACING) != f) {
                return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
            }
        } else if (state.getValue(PART) == TwoPart.EXT && dir == f.getOpposite()) {
            if (neighbor.getBlock() != this || neighbor.getValue(PART) != TwoPart.BASE || neighbor.getValue(FACING) != f) {
                return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
            }
        }
        return super.updateShape(state, dir, neighbor, level, pos, neighborPos);
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\block\TestCraftingStationBlockEntity.java ---
package com.doomspire.grimfate.block;

import com.doomspire.grimcore.config.CoreCommonConfig;
import com.doomspire.grimcore.nearby.NearbyItemSnapshot;
import com.doomspire.grimcore.nearby.PullPlanner;
import com.doomspire.grimcore.recipe.Circle6Recipe;
import com.doomspire.grimcore.registry.CoreRecipes;
import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import com.doomspire.grimfate.registry.ModBlockEntities;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.Containers;
import net.minecraft.world.MenuProvider;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.neoforged.neoforge.items.IItemHandler;
import net.neoforged.neoforge.items.ItemStackHandler;

import java.util.*;

public class TestCraftingStationBlockEntity extends BlockEntity implements MenuProvider {

    public static final int IN_SLOTS = 6;
    public static final int OUT_SLOT = 6;

    private final ItemStackHandler items = new ItemStackHandler(IN_SLOTS + 1) {
        @Override protected void onContentsChanged(int slot) { setChanged(); }
        @Override public boolean isItemValid(int slot, ItemStack stack) { return slot != OUT_SLOT; }
    };

    private NearbyItemSnapshot snapshot = null;
    private final Map<Integer, PullPlanner.OriginRef> originBySlot = new HashMap<>();

    public TestCraftingStationBlockEntity(BlockPos pos, BlockState state) {
        super(ModBlockEntities.TEST_CRAFTER.get(), pos, state);
    }

    public IItemHandler getItemHandler(){ return items; }

    public net.minecraft.core.NonNullList<ItemStack> getItemsForDrop() {
        var list = net.minecraft.core.NonNullList.withSize(items.getSlots(), ItemStack.EMPTY);
        for (int i = 0; i < items.getSlots(); i++) list.set(i, items.getStackInSlot(i));
        return list;
    }

    // ===== MenuProvider =====
    @Override public Component getDisplayName() { return Component.translatable("block.grimfate.test_crafting_station"); }

    @Override
    public AbstractContainerMenu createMenu(int id, Inventory inv, Player player) {
        if (player instanceof ServerPlayer sp) onMenuOpened(sp);
        return new TestCraftingStationMenu(id, inv, this);
    }

    // ===== lifecycle =====
    public void onMenuOpened(ServerPlayer player) {
        if (!(level instanceof ServerLevel sl)) { snapshot = null; return; }
        if (!CoreCommonConfig.PULL_ENABLED.get()) { snapshot = null; return; }
        BlockState st = getBlockState();
        Direction facing = st.getOptionalValue(TestCraftingStationBlock.FACING).orElse(Direction.NORTH);
        snapshot = NearbyItemSnapshot.scan(sl, getBlockPos(), facing, /*longFootprint*/ true,
                CoreCommonConfig.PULL_RADIUS.get(), CoreCommonConfig.MAX_CONTAINERS.get());
    }

    public void onMenuClosed() {
        snapshot = null;
        originBySlot.clear();
    }

    // ===== actions: refresh / list / autofill / reset =====
    public void rescan() {
        if (!(level instanceof ServerLevel sl)) { snapshot = null; return; }
        if (!CoreCommonConfig.PULL_ENABLED.get()) { snapshot = null; return; }
        Direction facing = getBlockState().getOptionalValue(TestCraftingStationBlock.FACING).orElse(Direction.NORTH);
        snapshot = NearbyItemSnapshot.scan(sl, getBlockPos(), facing, true,
                CoreCommonConfig.PULL_RADIUS.get(), CoreCommonConfig.MAX_CONTAINERS.get());
    }

    public List<ResourceLocation> listAvailableCircle6(Inventory playerInv) {
        if (!(level instanceof ServerLevel sl)) return List.of();
        ArrayList<ItemStack> pool = new ArrayList<>();
        for (int i = 0; i < IN_SLOTS; i++) { var s = items.getStackInSlot(i); if (!s.isEmpty()) pool.add(s); }
        for (int i = 0; i < playerInv.getContainerSize(); i++) { var s = playerInv.getItem(i); if (!s.isEmpty()) pool.add(s); }
        if (snapshot != null) for (var cref : snapshot.containers()) {
            var ih = cref.handler(); if (ih == null) continue;
            for (int i = 0; i < ih.getSlots(); i++) { var s = ih.getStackInSlot(i); if (!s.isEmpty()) pool.add(s); }
        }
        var out = new ArrayList<ResourceLocation>();
        for (var holder : sl.getRecipeManager().getAllRecipesFor(com.doomspire.grimcore.registry.CoreRecipes.CIRCLE6_TYPE.get())) {
            com.doomspire.grimcore.recipe.Circle6Recipe cr = holder.value(); // <-- РІРѕС‚ С‚Р°Рє
            if (partialMatchCount(cr.getIngredientsList(), pool) == 6) out.add(cr.id());
        }
        return out;
    }

    private static int partialMatchCount(List<net.minecraft.world.item.crafting.Ingredient> needs, List<ItemStack> pool) {
        boolean[] used = new boolean[pool.size()];
        int m = 0;
        for (var ing : needs) {
            boolean ok = false;
            for (int i = 0; i < pool.size(); i++) {
                if (!used[i] && ing.test(pool.get(i))) { used[i] = true; ok = true; break; }
            }
            if (ok) m++;
        }
        return m;
    }

    public void autofill(ResourceLocation recipeId) {
        if (!(level instanceof ServerLevel sl)) return;
        var opt = sl.getRecipeManager().byKey(recipeId);
        if (opt.isEmpty() || !(opt.get().value() instanceof Circle6Recipe r)) return;

        List<net.minecraft.world.item.crafting.Ingredient> needs = new ArrayList<>(r.getIngredientsList());
        for (int i = 0; i < IN_SLOTS; i++) {
            ItemStack cur = items.getStackInSlot(i);
            if (cur.isEmpty()) continue;
            for (int k = 0; k < needs.size(); k++) {
                if (needs.get(k).test(cur)) { needs.remove(k); break; }
            }
        }
        if (needs.isEmpty()) return;
        if (snapshot == null || !CoreCommonConfig.PULL_ENABLED.get()) return;

        int[] slots = new int[]{0,1,2,3,4,5};
        var report = PullPlanner.planAndPullToHandler(snapshot, needs, items, slots);
        for (var o : report.origins()) originBySlot.put(o.targetSlot, o);
        setChanged();
    }

    public void reset(ServerPlayer actor) {
        if (!(level instanceof ServerLevel sl)) return;
        for (int slot = 0; slot < IN_SLOTS; slot++) {
            ItemStack st = items.getStackInSlot(slot);
            if (st.isEmpty()) continue;

            var origin = originBySlot.get(slot);
            ItemStack stack = st.copy();
            items.setStackInSlot(slot, ItemStack.EMPTY);

            boolean returned = false;
            if (origin != null && snapshot != null) {
                var cref = snapshot.containers().stream().filter(c -> c.pos.equals(origin.containerPos)).findFirst().orElse(null);
                if (cref != null && cref.handler() != null) {
                    var ih = cref.handler();
                    stack = tryInsert(ih, origin.containerSlot, stack);
                    for (int i = 0; !stack.isEmpty() && i < ih.getSlots(); i++) {
                        if (i == origin.containerSlot) continue;
                        stack = ih.insertItem(i, stack, false);
                    }
                    returned = stack.isEmpty();
                }
            }
            if (!returned) {
                var dp = getBlockPos().above();
                Containers.dropItemStack(sl, dp.getX()+0.5, dp.getY()+0.8, dp.getZ()+0.5, stack);
            }
        }
        originBySlot.clear();
        setChanged();
    }

    private static ItemStack tryInsert(IItemHandler ih, int slot, ItemStack s) {
        if (slot >= 0 && slot < ih.getSlots()) {
            ItemStack sim = ih.insertItem(slot, s.copy(), true);
            if (sim.getCount() < s.getCount()) return ih.insertItem(slot, s, false);
        }
        return s;
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\block\WildHerbBlock.java ---
package com.doomspire.grimfate.block;

import net.minecraft.world.level.block.BushBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import com.mojang.serialization.MapCodec;

public class WildHerbBlock extends BushBlock {
    public WildHerbBlock(BlockBehaviour.Properties props) {
        super(props);
    }

    // РѕР±СЏР·Р°С‚РµР»СЊРЅС‹Р№ РјРµС‚РѕРґ РґР»СЏ РЅРѕРІС‹С… РІРµСЂСЃРёР№
    @Override
    protected MapCodec<? extends BushBlock> codec() {
        return simpleCodec(WildHerbBlock::new);
    }
}




--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\ClientEvents.java ---
package com.doomspire.grimfate.client;

import com.doomspire.grimfate.client.screen.TestCraftingStationScreen;
import com.doomspire.grimfate.registry.ModMenus;
import net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.client.event.RegisterMenuScreensEvent;

public class ClientEvents {
    @SubscribeEvent
    public static void registerKeyMappings(RegisterKeyMappingsEvent event) {
        event.register(KeyBindings.CAST_SPELL);
    }
    @SubscribeEvent
    public static void onRegisterScreens(RegisterMenuScreensEvent e) {
        e.register(ModMenus.TEST_CRAFTER.get(), TestCraftingStationScreen::new);
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\ClientScreens.java ---
package com.doomspire.grimfate.client;

import com.doomspire.grimfate.client.screen.TestCraftingStationScreen;
import com.doomspire.grimfate.registry.ModMenus;
import net.neoforged.neoforge.client.event.RegisterMenuScreensEvent;

public final class ClientScreens {
    private ClientScreens() {}

    // Р’РµС€Р°РµРј РЅР° MOD-Р±Р°СЃ РёР· РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂР° РјРѕРґР°
    public static void registerScreens(RegisterMenuScreensEvent event) {
        event.register(ModMenus.TEST_CRAFTER.get(), TestCraftingStationScreen::new);
    }
}




--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\CustomHudOverlay.java ---
package com.doomspire.grimfate.client;

import com.doomspire.grimfate.core.Grimfate;
import com.doomspire.grimfate.config.ClientConfig;
import com.doomspire.grimcore.stats.ModAttachments;
import com.doomspire.grimcore.stats.PlayerStats;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.client.event.RenderGuiEvent;
import com.doomspire.grimcore.stats.PlayerProgress;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class CustomHudOverlay {

    private static final ResourceLocation HEALTH_BAR_EMPTY =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/health_bar_bg.png");
    private static final ResourceLocation HEALTH_BAR_FULL =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/health_bar_fill.png");

    private static final ResourceLocation MANA_BAR_EMPTY =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/health_bar_bg.png");
    private static final ResourceLocation MANA_BAR_FULL =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/mana_bar_fill.png");

    private static final ResourceLocation XP_BG =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/xp_background.png");
    private static final ResourceLocation XP_FILL =
            ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "textures/gui/xp_fill.png");

    private static final Map<UUID, Float> DISPLAYED_HEALTH = new ConcurrentHashMap<>();
    private static final Map<UUID, Float> DISPLAYED_MANA   = new ConcurrentHashMap<>();
    private static final Map<UUID, Float> DISPLAYED_XP     = new ConcurrentHashMap<>();
    private static final float LERP_ALPHA = 0.20f;

    @SubscribeEvent
    public static void onRenderGui(RenderGuiEvent.Post event) {
        Minecraft mc = Minecraft.getInstance();

        if (mc.player == null || mc.screen != null) return;

        var player = mc.player;
        PlayerStats stats = player.getData(ModAttachments.PLAYER_STATS.get());
        PlayerProgress progress = player.getData(ModAttachments.PLAYER_PROGRESS);

        if (stats == null || progress == null) return;

        GuiGraphics gui = event.getGuiGraphics();
        int screenWidth = mc.getWindow().getGuiScaledWidth();
        int screenHeight = mc.getWindow().getGuiScaledHeight();

        UUID uuid = player.getUUID();

        // ----------- Р—Р”РћР РћР’Р¬Р• -----------
        renderHealthBar(gui, mc, screenWidth, screenHeight, uuid, stats);

        // ----------- РњРђРќРђ -----------
        renderManaBar(gui, mc, screenWidth, screenHeight, uuid, stats);

        // ----------- РћРџР«Рў -----------
        renderXpIcon(gui, mc, screenWidth, screenHeight, uuid, progress);
    }

    private static void renderHealthBar(GuiGraphics gui, Minecraft mc, int screenWidth, int screenHeight, UUID uuid, PlayerStats stats) {
        final int textureWidth = 120;
        final int textureHeight = 12;

        int health = stats.health();
        int maxHealth = Math.max(1, stats.maxHealth());

        float displayedHealth = DISPLAYED_HEALTH.getOrDefault(uuid, (float) health);
        displayedHealth += ((float) health - displayedHealth) * LERP_ALPHA;
        displayedHealth = Math.max(0, Math.min(displayedHealth, maxHealth));
        DISPLAYED_HEALTH.put(uuid, displayedHealth);

        float healthPercent = displayedHealth / (float) maxHealth;

        int xH = screenWidth / 2 + ClientConfig.HEALTH_BAR_X.get();
        int yH = screenHeight + ClientConfig.HEALTH_BAR_Y.get();

        gui.blit(HEALTH_BAR_EMPTY, xH, yH, 0, 0, textureWidth, textureHeight, textureWidth, textureHeight);

        int filledHealth = (int) (textureWidth * healthPercent);
        if (filledHealth > 0) {
            gui.blit(HEALTH_BAR_FULL, xH, yH, 0, 0, filledHealth, textureHeight, textureWidth, textureHeight);
        }

        String healthText = health + " / " + maxHealth;
        int textX = xH + textureWidth / 2 - mc.font.width(healthText) / 2;
        int textY = yH + (textureHeight - mc.font.lineHeight) / 2;
        gui.drawString(mc.font, Component.literal(healthText), textX, textY, 0xFFFFFF, true);
    }

    private static void renderManaBar(GuiGraphics gui, Minecraft mc, int screenWidth, int screenHeight, UUID uuid, PlayerStats stats) {
        final int textureWidth = 120;
        final int textureHeight = 12;

        int mana = stats.mana();
        int maxMana = Math.max(1, stats.maxMana());

        float displayedMana = DISPLAYED_MANA.getOrDefault(uuid, (float) mana);
        displayedMana += ((float) mana - displayedMana) * LERP_ALPHA;
        displayedMana = Math.max(0, Math.min(displayedMana, maxMana));
        DISPLAYED_MANA.put(uuid, displayedMana);

        float manaPercent = displayedMana / (float) maxMana;

        int xM = screenWidth / 2 + ClientConfig.MANA_BAR_X.get();
        int yM = screenHeight + ClientConfig.MANA_BAR_Y.get();

        gui.blit(MANA_BAR_EMPTY, xM, yM, 0, 0, textureWidth, textureHeight, textureWidth, textureHeight);

        int filledMana = (int) (textureWidth * manaPercent);
        if (filledMana > 0) {
            gui.blit(MANA_BAR_FULL, xM, yM, 0, 0, filledMana, textureHeight, textureWidth, textureHeight);
        }

        String manaText = mana + " / " + maxMana;
        int textX = xM + textureWidth / 2 - mc.font.width(manaText) / 2;
        int textY = yM + (textureHeight - mc.font.lineHeight) / 2;
        gui.drawString(mc.font, Component.literal(manaText), textX, textY, 0xFFFFFF, true);
    }

    private static void renderXpIcon(GuiGraphics gui, Minecraft mc, int screenWidth, int screenHeight, UUID uuid, PlayerProgress progress) {
        final int textureWidth = 32;
        final int textureHeight = 32;

        int exp = progress.exp();
        int cap = Math.max(1, progress.expCap());

        float displayedXp = DISPLAYED_XP.getOrDefault(uuid, (float) exp);
        displayedXp += ((float) exp - displayedXp) * LERP_ALPHA;
        displayedXp = Math.max(0, Math.min(displayedXp, cap));
        DISPLAYED_XP.put(uuid, displayedXp);

        float xpPercent = displayedXp / (float) cap;

        int xXp = screenWidth / 2 + ClientConfig.XP_ICON_X.get();
        int yXp = screenHeight + ClientConfig.XP_ICON_Y.get();

        // С„РѕРЅ
        gui.blit(XP_BG, xXp, yXp, 0, 0, textureWidth, textureHeight, textureWidth, textureHeight);

        // Р·Р°РїРѕР»РЅРµРЅРёРµ СЃРЅРёР·Сѓ РІРІРµСЂС…
        int filledHeight = (int) (textureHeight * xpPercent);
        if (filledHeight > 0) {
            gui.blit(XP_FILL, xXp, yXp + (textureHeight - filledHeight),
                    0, textureHeight - filledHeight,
                    textureWidth, filledHeight,
                    textureWidth, textureHeight);
        }

        // С†РёС„СЂР° СѓСЂРѕРІРЅСЏ
        String levelText = String.valueOf(progress.level());
        int levelX = xXp + textureWidth / 2 - mc.font.width(levelText) / 2;
        int levelY = yXp + textureHeight / 2 - mc.font.lineHeight / 2;
        gui.drawString(mc.font, Component.literal(levelText), levelX, levelY, 0xFFFFFF, true);

        // exp / cap
        String expText = exp + " / " + cap;
        int expX = xXp + textureWidth / 2 - mc.font.width(expText) / 2;
        int expY = yXp + textureHeight + 2;
        gui.drawString(mc.font, Component.literal(expText), expX, expY, 0xFFFFFF, false);
    }
}





--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\HudOverlay.java ---
package com.doomspire.grimfate.client;

import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.neoforge.client.event.RenderGuiLayerEvent;

@EventBusSubscriber(modid = Grimfate.MODID, value = Dist.CLIENT)
public class HudOverlay {
    @SubscribeEvent
    public static void onRenderGuiOverlay(RenderGuiLayerEvent.Pre event) {
        // РЈР±РёСЂР°РµРј РѕС‚РѕР±СЂР°Р¶РµРЅРёРµ РІР°РЅРёР»Рё
        ResourceLocation layerName = event.getName();
        if (layerName.equals(ResourceLocation.fromNamespaceAndPath("minecraft", "player_health"))) {
            event.setCanceled(true);
        }
        if (layerName.equals(ResourceLocation.fromNamespaceAndPath("minecraft", "armor_level"))) {
            event.setCanceled(true);
        }
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\KeyBindings.java ---
package com.doomspire.grimfate.client;

import com.mojang.blaze3d.platform.InputConstants;
import cpw.mods.util.Lazy;
import net.minecraft.client.KeyMapping;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.client.event.RegisterKeyMappingsEvent;
import org.lwjgl.glfw.GLFW;

public class KeyBindings {
    public static final KeyMapping CAST_SPELL =
            new KeyMapping("key.cast_spell", GLFW.GLFW_KEY_R, "key.categories.gameplay");

    public static void init(IEventBus bus) {
        bus.addListener(KeyBindings::register);
    }

    private static void register(RegisterKeyMappingsEvent event) {
        event.register(CAST_SPELL);
    }
}




--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\menu\TestCraftingStationMenu.java ---
package com.doomspire.grimfate.client.menu;

import com.doomspire.grimfate.block.TestCraftingStationBlockEntity;
import com.doomspire.grimfate.registry.ModMenus;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.inventory.Slot;
import net.minecraft.world.item.ItemStack;
import net.neoforged.neoforge.items.SlotItemHandler;

public class TestCraftingStationMenu extends AbstractContainerMenu {
    public static final int IN_SLOTS = 6, OUT_SLOT = 6;

    private final TestCraftingStationBlockEntity be;

    // client ctor
    public TestCraftingStationMenu(int id, Inventory inv, net.minecraft.world.level.block.entity.BlockEntity be) {
        this(id, inv, (TestCraftingStationBlockEntity) be);
    }

    // server ctor
    public TestCraftingStationMenu(int id, Inventory inv, TestCraftingStationBlockEntity be) {
        super(ModMenus.TEST_CRAFTER.get(), id);
        this.be = be;

        var handler = be.getItemHandler();

        // СЂР°СЃРїРѕР»РѕР¶РµРЅРёРµ РїРѕ РєСЂСѓРіСѓ: С†РµРЅС‚СЂ (80,35), СЂР°РґРёСѓСЃ 24
        int cx = 80, cy = 35, r = 24;
        for (int i = 0; i < IN_SLOTS; i++) {
            double a = Math.toRadians(60 * i - 90);
            int x = cx + (int)Math.round(Math.cos(a) * r);
            int y = cy + (int)Math.round(Math.sin(a) * r);
            this.addSlot(new SlotItemHandler(handler, i, x, y));
        }
        // РІС‹С…РѕРґРЅРѕР№ СЃР»РѕС‚ РІ С†РµРЅС‚СЂРµ
        this.addSlot(new SlotItemHandler(handler, OUT_SLOT, cx, cy) {
            @Override public boolean mayPlace(ItemStack stack) { return false; }
        });

        // РёРЅРІРµРЅС‚Р°СЂСЊ РёРіСЂРѕРєР°
        addPlayerInventory(inv, 8, 84);
    }

    private void addPlayerInventory(Inventory inv, int x, int y) {
        for (int row = 0; row < 3; ++row)
            for (int col = 0; col < 9; ++col)
                this.addSlot(new Slot(inv, col + row * 9 + 9, x + col * 18, y + row * 18));
        for (int hot = 0; hot < 9; ++hot)
            this.addSlot(new Slot(inv, hot, x + hot * 18, y + 58));
    }

    @Override public boolean stillValid(Player player) { return true; }

    @Override
    public void removed(Player player) {
        super.removed(player);
        if (!player.level().isClientSide) {
            be.onMenuClosed();
        }
    }

    @Override
    public ItemStack quickMoveStack(Player player, int index) {
        ItemStack original = ItemStack.EMPTY;
        Slot slot = this.slots.get(index);
        if (slot != null && slot.hasItem()) {
            ItemStack stack = slot.getItem();
            original = stack.copy();
            int beSlots = IN_SLOTS + 1;

            if (index < beSlots) {
                if (!this.moveItemStackTo(stack, beSlots, this.slots.size(), true)) return ItemStack.EMPTY;
            } else {
                if (!this.moveItemStackTo(stack, 0, IN_SLOTS, false)) return ItemStack.EMPTY;
            }
            if (stack.isEmpty()) slot.set(ItemStack.EMPTY); else slot.setChanged();
        }
        return original;
    }

    public TestCraftingStationBlockEntity be() { return be; }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\client\screen\TestCraftingStationScreen.java ---
package com.doomspire.grimfate.client.screen;

import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import com.doomspire.grimfate.network.ModNetworking;
import com.doomspire.grimfate.network.packet.SBAutoFill;
import com.doomspire.grimfate.network.packet.SBListRecipes;
import com.doomspire.grimfate.network.packet.SBReset;
import com.doomspire.grimfate.network.packet.SBScan;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;

import java.util.List;

public class TestCraftingStationScreen extends AbstractContainerScreen<TestCraftingStationMenu> {
    private static final ResourceLocation TEX =
            ResourceLocation.fromNamespaceAndPath("grimfate", "textures/gui/test_crafter.png");

    private Button btnRecipes, btnRefresh, btnAutofill, btnReset;

    public TestCraftingStationScreen(TestCraftingStationMenu menu, Inventory inv, Component title) {
        super(menu, inv, title);
        this.imageWidth = 176;
        this.imageHeight = 166;
        this.titleLabelX = 8;
        this.titleLabelY = 6;
    }

    @Override
    protected void init() {
        super.init();
        int x = (this.width - this.imageWidth)/2;
        int y = (this.height - this.imageHeight)/2;

        btnRecipes = Button.builder(Component.translatable("gui.grimfate.recipes"), b -> {
            ModNetworking.sendToServer(new SBListRecipes());
        }).bounds(x + 8, y + 18, 60, 20).build();

        btnRefresh = Button.builder(Component.translatable("gui.grimfate.refresh"), b -> {
            ModNetworking.sendToServer(new SBScan());
        }).bounds(x + 72, y + 18, 50, 20).build();

        btnAutofill = Button.builder(Component.translatable("gui.grimfate.autofill"), b -> {
            ResourceLocation chosen = RecipeListOverlay.getSelectedOrFirst();
            if (chosen != null) ModNetworking.sendToServer(new SBAutoFill(chosen));
        }).bounds(x + 126, y + 18, 42, 20).build();

        btnReset = Button.builder(Component.translatable("gui.grimfate.reset"), b -> {
            ModNetworking.sendToServer(new SBReset());
        }).bounds(x + 126, y + 42, 42, 20).build();

        addRenderableWidget(btnRecipes);
        addRenderableWidget(btnRefresh);
        addRenderableWidget(btnAutofill);
        addRenderableWidget(btnReset);
    }

    @Override
    protected void renderBg(GuiGraphics gfx, float partialTick, int mouseX, int mouseY) {
        int x = (this.width - this.imageWidth)/2;
        int y = (this.height - this.imageHeight)/2;
        gfx.blit(TEX, x, y, 0, 0, this.imageWidth, this.imageHeight);
    }

    @Override
    public void render(GuiGraphics gfx, int mouseX, int mouseY, float partialTick) {
        renderBackground(gfx, mouseX, mouseY, partialTick);
        super.render(gfx, mouseX, mouseY, partialTick);
        renderTooltip(gfx, mouseX, mouseY);
        RecipeListOverlay.renderIfOpen(gfx, this.leftPos + this.imageWidth + 4, this.topPos + 10);
    }

    // РїСЂРѕСЃС‚РѕР№ overlay
    public static final class RecipeListOverlay {
        private static List<ResourceLocation> cache = List.of();
        private static ResourceLocation selected;

        public static void set(List<ResourceLocation> list) {
            cache = List.copyOf(list);
            if (!cache.contains(selected)) selected = cache.isEmpty() ? null : cache.get(0);
        }
        public static ResourceLocation getSelectedOrFirst() {
            return selected != null ? selected : (cache.isEmpty() ? null : cache.get(0));
        }
        public static void renderIfOpen(GuiGraphics gfx, int x, int y) {
            if (cache.isEmpty()) return;
            int dy = 0;
            for (var id : cache) {
                gfx.drawString(Minecraft.getInstance().font, id.toString(), x, y + dy, 0xFFFFFF, false);
                dy += 10;
            }
        }
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\config\ClientConfig.java ---
package com.doomspire.grimfate.config;

import net.neoforged.fml.config.ModConfig;
import net.neoforged.neoforge.common.ModConfigSpec;

public class ClientConfig {
    public static final ModConfigSpec.Builder BUILDER = new ModConfigSpec.Builder();

    public static final ModConfigSpec.IntValue HEALTH_BAR_X;
    public static final ModConfigSpec.IntValue HEALTH_BAR_Y;

    public static final ModConfigSpec.IntValue MANA_BAR_X;
    public static final ModConfigSpec.IntValue MANA_BAR_Y;

    public static final ModConfigSpec.IntValue XP_ICON_X;
    public static final ModConfigSpec.IntValue XP_ICON_Y;

    static {
        HEALTH_BAR_X = BUILDER
                .comment("РЎРјРµС‰РµРЅРёРµ РїРѕР»РѕСЃРєРё Р·РґРѕСЂРѕРІСЊСЏ РїРѕ X")
                .defineInRange("hud.health_bar_x", -60, -500, 500);

        HEALTH_BAR_Y = BUILDER
                .comment("РЎРјРµС‰РµРЅРёРµ РїРѕР»РѕСЃРєРё Р·РґРѕСЂРѕРІСЊСЏ РїРѕ Y")
                .defineInRange("hud.health_bar_y", -78, -500, 500);

        MANA_BAR_X = BUILDER
                .comment("РЎРјРµС‰РµРЅРёРµ РїРѕР»РѕСЃРєРё РјР°РЅС‹ РїРѕ X")
                .defineInRange("hud.mana_bar_x", -60, -500, 500);

        MANA_BAR_Y = BUILDER
                .comment("РЎРјРµС‰РµРЅРёРµ РїРѕР»РѕСЃРєРё РјР°РЅС‹ РїРѕ Y")
                .defineInRange("hud.mana_bar_y", -65, -500, 500);

        XP_ICON_X = BUILDER
                .comment("РЎРјРµС‰РµРЅРёРµ РёРєРѕРЅРєРё РѕРїС‹С‚Р° РїРѕ X")
                .defineInRange("hud.xp_icon_x", -30, -500, 500);

        XP_ICON_Y = BUILDER
                .comment("РЎРјРµС‰РµРЅРёРµ РёРєРѕРЅРєРё РѕРїС‹С‚Р° РїРѕ Y")
                .defineInRange("hud.xp_icon_y", -100, -500, 500);
    }

    public static final ModConfigSpec SPEC = BUILDER.build();
}




--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\config\ModConfig.java ---
package com.doomspire.grimfate.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * рџ”§ ModConfig вЂ” С†РµРЅС‚СЂР°Р»РёР·РѕРІР°РЅРЅС‹Р№ РєРѕРЅС„РёРі РјРѕРґР°
 * Р’ Р±СѓРґСѓС‰РµРј:
 *  - С…СЂР°РЅРµРЅРёРµ Р±Р°Р·РѕРІС‹С… СЃС‚Р°С‚РѕРІ РґР»СЏ РёРіСЂРѕРєРѕРІ Рё РјРѕР±РѕРІ
 *  - РјРЅРѕР¶РёС‚РµР»Рё СЂРµРіРµРЅР°/СѓСЂРѕРЅР°
 *  - РЅР°СЃС‚СЂРѕР№РєР° Р°С„С„РёРєСЃРѕРІ
 *  - СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёРµ С‡РµСЂРµР· JSON Р±РµР· РїРµСЂРµСЃР±РѕСЂРєРё
 */
public class ModConfig {
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static final File CONFIG_FILE = new File("config/grimfate.json");

    // ===== РџСЂРёРјРµСЂ Р±СѓРґСѓС‰РёС… РїР°СЂР°РјРµС‚СЂРѕРІ (РїРѕРєР° Р·Р°РєРѕРјРјРµРЅС‚РёСЂРѕРІР°РЅС‹) =====

    // Р‘Р°Р·РѕРІС‹Рµ СЃС‚Р°С‚С‹ РёРіСЂРѕРєР°
    // public int basePlayerHealth = 100;
    // public float basePlayerRegen = 0.5f; // 0.5 С…Рї РІ СЃРµРє.
    // public int basePlayerMana = 50;
    // public float manaRegenMultiplier = 1.0f;

    // Р‘Р°Р·РѕРІС‹Рµ СЃС‚Р°С‚С‹ РјРѕР±РѕРІ
    // public int baseMobHealth = 50;
    // public float baseMobRegen = 1.0f;

    // РњРЅРѕР¶РёС‚РµР»Рё СѓСЂРѕРЅР°/Р·Р°С‰РёС‚С‹
    // public float damageMultiplier = 1.0f;
    // public float defenseMultiplier = 1.0f;

    // РЎРёСЃС‚РµРјР° Р°С„С„РёРєСЃРѕРІ (РїРѕР·Р¶Рµ)
    // public float affixDropChance = 0.1f;

    // =============================================================

    private static ModConfig INSTANCE = new ModConfig();

    public static ModConfig get() {
        return INSTANCE;
    }

    /** Р—Р°РіСЂСѓР¶Р°РµРј РєРѕРЅС„РёРі РёР· JSON */
    public static void load() {
        if (!CONFIG_FILE.exists()) {
            save(); // РµСЃР»Рё С„Р°Р№Р»Р° РЅРµС‚, СЃРѕР·РґР°С‘Рј РґРµС„РѕР»С‚
            return;
        }

        try (FileReader reader = new FileReader(CONFIG_FILE)) {
            INSTANCE = GSON.fromJson(reader, ModConfig.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /** РЎРѕС…СЂР°РЅСЏРµРј РєРѕРЅС„РёРі РІ JSON */
    public static void save() {
        try (FileWriter writer = new FileWriter(CONFIG_FILE)) {
            GSON.toJson(INSTANCE, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\core\Config.java ---
package com.doomspire.grimfate.core;

import java.util.List;

import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.common.ModConfigSpec;

// An example config class. This is not required, but it's a good idea to have one to keep your config organized.
// Demonstrates how to use Neo's config APIs
public class Config {
    private static final ModConfigSpec.Builder BUILDER = new ModConfigSpec.Builder();

    public static final ModConfigSpec.BooleanValue LOG_DIRT_BLOCK = BUILDER
            .comment("Whether to log the dirt block on common setup")
            .define("logDirtBlock", true);

    public static final ModConfigSpec.IntValue MAGIC_NUMBER = BUILDER
            .comment("A magic number")
            .defineInRange("magicNumber", 42, 0, Integer.MAX_VALUE);

    public static final ModConfigSpec.ConfigValue<String> MAGIC_NUMBER_INTRODUCTION = BUILDER
            .comment("What you want the introduction message to be for the magic number")
            .define("magicNumberIntroduction", "The magic number is... ");

    // a list of strings that are treated as resource locations for items
    public static final ModConfigSpec.ConfigValue<List<? extends String>> ITEM_STRINGS = BUILDER
            .comment("A list of items to log on common setup.")
            .defineListAllowEmpty("items", List.of("minecraft:iron_ingot"), () -> "", Config::validateItemName);

    static final ModConfigSpec SPEC = BUILDER.build();

    private static boolean validateItemName(final Object obj) {
        return obj instanceof String itemName && BuiltInRegistries.ITEM.containsKey(ResourceLocation.parse(itemName));
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\core\Grimfate.java ---
package com.doomspire.grimfate.core;

import com.doomspire.grimfate.config.ClientConfig;
import com.doomspire.grimfate.events.*;
import com.doomspire.grimfate.network.ModNetworking;
import com.doomspire.grimfate.registry.ModBlockEntities;
import com.doomspire.grimfate.registry.ModBlocks;
import com.doomspire.grimfate.registry.ModItems;

import com.doomspire.grimfate.registry.ModMenus;
import com.mojang.logging.LogUtils;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.*;
import net.minecraft.world.level.block.Blocks;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.config.ModConfig;
import net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent;
import net.neoforged.fml.loading.FMLEnvironment;
import net.neoforged.neoforge.client.ClientHooks;
import net.neoforged.neoforge.common.NeoForge;
import net.neoforged.neoforge.event.BuildCreativeModeTabContentsEvent;
import net.neoforged.neoforge.event.server.ServerStartingEvent;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredRegister;
import org.slf4j.Logger;

@Mod(Grimfate.MODID)
public class Grimfate {
    public static final String MODID = "grimfate";
    public static final String NET_PROTOCOL = "1";
    public static final Logger LOGGER = LogUtils.getLogger();

    /** РќР°С€ РєСЂРµР°С‚РёРІ-С‚Р°Р±. */
    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS =
            DeferredRegister.create(Registries.CREATIVE_MODE_TAB, MODID);

    public static final DeferredHolder<CreativeModeTab, CreativeModeTab> GRIMFATE_TAB =
            CREATIVE_MODE_TABS.register("grimfate", () -> CreativeModeTab.builder()
                    .title(Component.translatable("itemGroup.grimfate"))
                    .withTabsBefore(CreativeModeTabs.COMBAT)
                    .icon(() -> new ItemStack(ModItems.ODAMITE_INGOT.get()))
                    .displayItems((params, out) -> {
                        // РјР°С‚РµСЂРёР°Р»С‹
                        out.accept(ModItems.RAW_ODAMITE.get());
                        out.accept(ModItems.ODAMITE_INGOT.get());
                        // Р±Р»РѕРєРё/СЂСѓРґС‹/СЂР°СЃС‚РµРЅРёСЏ
                        out.accept(ModBlocks.ODAMITE_ORE.get());
                        out.accept(ModBlocks.DEEPSLATE_ODAMITE_ORE.get());
                        out.accept(ModBlocks.WILD_HERB.get());
                        // debug-РїСЂРµРґРјРµС‚С‹ РґРѕР±Р°РІР»СЏР№ РїРѕ Р¶РµР»Р°РЅРёСЋ
                        // out.accept(ModItems.DEBUG_SWORD.get());
                    })
                    .build());

    public Grimfate(IEventBus modEventBus, ModContainer modContainer) {
        // РљРѕРЅС„РёРіРё
        modContainer.registerConfig(ModConfig.Type.CLIENT, ClientConfig.SPEC);
        modContainer.registerConfig(ModConfig.Type.COMMON, Config.SPEC);

        // РЎРµС‚СЊ РєРѕРЅС‚РµРЅС‚Р°
        modEventBus.addListener(ModNetworking::register);

        // Р РµРµСЃС‚СЂС‹ РєРѕРЅС‚РµРЅС‚Р°
        ModBlocks.init(modEventBus);
        ModItems.init(modEventBus);
        ModMenus.init(modEventBus);
        ModBlockEntities.init(modEventBus);
        CREATIVE_MODE_TABS.register(modEventBus);

        // РЎР»СѓС€Р°С‚РµР»Рё С„Р°Р·
        modEventBus.addListener(this::commonSetup);
        modEventBus.addListener(this::addCreative);

        // Runtime-СЃРѕР±С‹С‚РёСЏ
        NeoForge.EVENT_BUS.register(PlayerEvents.class);
        NeoForge.EVENT_BUS.register(DamageEvents.class);
        NeoForge.EVENT_BUS.register(RegenEvents.class);
        NeoForge.EVENT_BUS.register(new MobInitHandler());

        if (FMLEnvironment.dist == Dist.CLIENT) {
            modEventBus.addListener(com.doomspire.grimfate.client.ClientScreens::registerScreens);
            modEventBus.register(ClientHooks.ClientEvents.class); // key mappings
            new KeyInputHandler();
        }
    }

    private void commonSetup(FMLCommonSetupEvent event) {
        LOGGER.info("HELLO FROM COMMON SETUP");
        if (Config.LOG_DIRT_BLOCK.getAsBoolean()) {
            LOGGER.info("DIRT BLOCK >> {}", BuiltInRegistries.BLOCK.getKey(Blocks.DIRT));
        }
        LOGGER.info("{}{}", Config.MAGIC_NUMBER_INTRODUCTION.get(), Config.MAGIC_NUMBER.getAsInt());
        Config.ITEM_STRINGS.get().forEach(item -> LOGGER.info("ITEM >> {}", item));
    }

    private void addCreative(BuildCreativeModeTabContentsEvent event) {
        if (event.getTabKey() == CreativeModeTabs.INGREDIENTS) {
            event.accept(ModItems.RAW_ODAMITE.get());
            event.accept(ModItems.ODAMITE_INGOT.get());
        }
        if (event.getTabKey() == CreativeModeTabs.NATURAL_BLOCKS) {
            event.accept(ModBlocks.WILD_HERB.get());
        }
        if (event.getTabKey() == CreativeModeTabs.BUILDING_BLOCKS) {
            event.accept(ModBlocks.ODAMITE_ORE.get());
            event.accept(ModBlocks.DEEPSLATE_ODAMITE_ORE.get());
        }
        if (event.getTabKey() == CreativeModeTabs.FUNCTIONAL_BLOCKS) {
            event.accept(ModBlocks.TEST_CRAFTER_ITEM.get()); // <-- РћР‘РЇР—РђРўР•Р›Р¬РќРћ .get()
        }
    }


    public static ResourceLocation rl(String path) {
        return ResourceLocation.fromNamespaceAndPath(MODID, path);
    }

    @SubscribeEvent
    public void onServerStarting(ServerStartingEvent event) {
        LOGGER.info("HELLO from server starting");
    }
}




--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\core\GrimfateClient.java ---
package com.doomspire.grimfate.core;

import com.doomspire.grimfate.client.CustomHudOverlay;
import net.minecraft.client.Minecraft;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.event.lifecycle.FMLClientSetupEvent;
import net.neoforged.neoforge.client.gui.ConfigurationScreen;
import net.neoforged.neoforge.client.gui.IConfigScreenFactory;
import net.neoforged.neoforge.common.NeoForge;

// This class will not load on dedicated servers. Accessing client side code from here is safe.
@Mod(value = Grimfate.MODID, dist = Dist.CLIENT)
// You can use EventBusSubscriber to automatically register all static methods in the class annotated with @SubscribeEvent
@EventBusSubscriber(modid = Grimfate.MODID, value = Dist.CLIENT)
public class GrimfateClient {
    public GrimfateClient(ModContainer container) {
        // Allows NeoForge to create a config screen for this mod's configs.
        // The config screen is accessed by going to the Mods screen > clicking on your mod > clicking on config.
        // Do not forget to add translations for your config options to the en_us.json file.
        container.registerExtensionPoint(IConfigScreenFactory.class, ConfigurationScreen::new);
    }

    @SubscribeEvent
    static void onClientSetup(FMLClientSetupEvent event) {
        NeoForge.EVENT_BUS.register(CustomHudOverlay.class);
        // Some client setup code
        Grimfate.LOGGER.info("HELLO FROM CLIENT SETUP");
        Grimfate.LOGGER.info("MINECRAFT NAME >> {}", Minecraft.getInstance().getUser().getName());
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\debug\DebugFireboltSpell.java ---
package com.doomspire.grimfate.debug;

import com.doomspire.grimcore.stats.*;
import com.doomspire.grimfate.spell.FireboltEntity;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.phys.Vec3;

/**
 * РўРµСЃС‚РѕРІС‹Р№ РєР°СЃС‚ С„Р°РµСЂР±РѕР»С‚Р° вЂ” С‚РµРїРµСЂСЊ: СЃРїРёСЃР°РЅРёРµ РјР°РЅС‹ С‡РµСЂРµР· MutablePlayerStats + immediate commit.
 */
public class DebugFireboltSpell {

    private static final int MANA_COST = 10;
    private static final int BASE_DAMAGE = 15;
    private static final double SPEED = 0.6;
    private static final double SPAWN_OFFSET = 0.5;

    public static void cast(ServerPlayer caster) {
        if (caster == null) return;

        var immutableStats = PlayerStatsProvider.get(caster);
        PlayerProgress progress = caster.getData(ModAttachments.PLAYER_PROGRESS);
        if (immutableStats == null || progress == null) return;

        // Р‘РµСЂС‘Рј mutable РєРµС€ (runtime)
        MutablePlayerStats mstats = PlayerStatsProvider.getMutable(caster);
        if (mstats == null) return;

        if (mstats.mana < MANA_COST) {
            caster.sendSystemMessage(Component.literal("вљ  РќРµРґРѕСЃС‚Р°С‚РѕС‡РЅРѕ РјР°РЅС‹!"));
            return;
        }

        // РЎРїРёСЃС‹РІР°РµРј РјР°РЅСѓ РЅР° mutable (РїРѕРјРµС‡Р°РµС‚ dirty)
        int newMana = Math.max(0, mstats.mana - MANA_COST);
        mstats.setMana(newMana);

        // immediate commit вЂ” РєР»СЋС‡РµРІРѕРµ РёР·РјРµРЅРµРЅРёРµ: HUD Рё РєР»РёРµРЅС‚ СѓРІРёРґСЏС‚ РёР·РјРµРЅРµРЅРёРµ СЃСЂР°Р·Сѓ
        PlayerStatsProvider.commitIfDirty(caster);

        // РЅР°РїСЂР°РІР»РµРЅРёРµ РІР·РіР»СЏРґР° Рё СЃРєРѕСЂРѕСЃС‚СЊ
        Vec3 look = caster.getLookAngle().normalize().scale(SPEED);

        // СЃРєРµР№Р»РёРј СѓСЂРѕРЅ
        int scaledDamage = StatsCalculator.scaledSpellDamage(BASE_DAMAGE, progress.level());
        scaledDamage += (int) (immutableStats.maxMana() * 0.05f);

        // СЃРѕР·РґР°С‘Рј РєР°СЃС‚РѕРјРЅС‹Р№ С„Р°РµСЂР±РѕР» СЃ РїРѕР»РµРј spellDamage (РЅРёРєР°РєРѕРіРѕ PersistentData)
        FireboltEntity fireball = new FireboltEntity(caster.level(), caster, look, scaledDamage);
        fireball.setPos(
                caster.getX() + look.x * SPAWN_OFFSET,
                caster.getEyeY() - 0.1 + look.y * SPAWN_OFFSET,
                caster.getZ() + look.z * SPAWN_OFFSET
        );

        caster.level().addFreshEntity(fireball);

        caster.sendSystemMessage(Component.literal(
                "рџ”Ґ Firebolt РІС‹РїСѓС‰РµРЅ! (РјР°РЅР° - " + MANA_COST + ", СѓСЂРѕРЅ: " + scaledDamage + ")"
        ));
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\debug\DebugSwordItem.java ---
package com.doomspire.grimfate.debug;

import com.doomspire.grimcore.stats.PlayerStatsProvider;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.SwordItem;
import net.minecraft.world.item.Tiers;

/**
 * РћС‚Р»Р°РґРѕС‡РЅС‹Р№ РјРµС‡ вЂ” Р±РѕР»СЊС€Рµ РЅРµ РїРёС€РµС‚ РІСЂРµРјРµРЅРЅС‹Рµ РґР°РЅРЅС‹Рµ РІ NBT С†РµР»Рё.
 */
public class DebugSwordItem extends SwordItem {

    private static final int BASE_DAMAGE = 20;

    public DebugSwordItem() {
        super(
                Tiers.IRON,
                new Item.Properties().stacksTo(1) // СЃРІРѕР№СЃС‚РІР° РїРѕ-СѓРјРѕР»С‡Р°РЅРёСЋ
        );
    }

    /**
     * Р’РµСЂРЅС‘С‚ СЂР°СЃСЃС‡РёС‚Р°РЅРЅС‹Р№ СѓСЂРѕРЅ РґР»СЏ РґР°РЅРЅРѕРіРѕ РёРіСЂРѕРєР°.
     */
    public static int getScaledDamage(Player player) {
        var stats = PlayerStatsProvider.get(player);
        return BASE_DAMAGE + (int) (stats.maxHealth() * 0.05f);
    }

    @Override
    public boolean hurtEnemy(ItemStack stack, LivingEntity target, LivingEntity attacker) {
        stack.hurtAndBreak(1, attacker, EquipmentSlot.MAINHAND);
        return true;
    }



}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events\DamageCalculator.java ---
package com.doomspire.grimfate.events;

import com.doomspire.grimcore.events.CoreDamageCalculator;
import com.doomspire.grimcore.stats.MobStats;
import com.doomspire.grimcore.stats.PlayerStats;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.LivingEntity;

@Deprecated // РСЃРїРѕР»СЊР·СѓР№ CoreDamageCalculator РЅР°РїСЂСЏРјСѓСЋ, СЌС‚РѕС‚ РєР»Р°СЃСЃ РѕСЃС‚Р°РІР»РµРЅ РґР»СЏ СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚Рё.
public final class DamageCalculator {

    private DamageCalculator() {}

    public static int calculateForPlayer(LivingEntity entity, DamageSource source, float vanillaAmount, PlayerStats stats) {
        return CoreDamageCalculator.calculateForPlayer(entity, source, vanillaAmount, stats);
    }

    public static int calculateForMob(LivingEntity entity, DamageSource source, float vanillaAmount, MobStats stats) {
        return CoreDamageCalculator.calculateForMob(entity, source, vanillaAmount, stats);
    }
}





--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events\DamageEvents.java ---
package com.doomspire.grimfate.events;

import com.doomspire.grimfate.debug.DebugSwordItem;
import com.doomspire.grimfate.spell.FireboltEntity;
import com.doomspire.grimcore.stats.*;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.damagesource.DamageTypes;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.event.entity.living.LivingDamageEvent;

/**
 * РљРѕРЅС‚РµРЅС‚РЅС‹Рµ РјРѕРґРёС„РёРєР°С‚РѕСЂС‹ СѓСЂРѕРЅР°.
 * Р—РґРµСЃСЊ РќР•Р›Р¬Р—РЇ:
 *  - РєРѕРјРјРёС‚РёС‚СЊ СЃС‚Р°С‚С‹/СѓР±РёРІР°С‚СЊ СЃСѓС‰РЅРѕСЃС‚СЊ/РіР°СЃРёС‚СЊ РІР°РЅРёР»СЊ вЂ” СЌС‚Рѕ СѓР¶Рµ РґРµР»Р°РµС‚ CoreDamageEvents РІ grimcore.
 * Р—РґРµСЃСЊ РњРћР–РќРћ:
 *  - СЃРєРѕСЂСЂРµРєС‚РёСЂРѕРІР°С‚СЊ event.setNewDamage(...) РёСЃС…РѕРґСЏ РёР· РЅР°С€РёС… СЃРїРµР»Р»РѕРІ/РїСЂРµРґРјРµС‚РѕРІ/СЌС„С„РµРєС‚РѕРІ.
 */
public final class DamageEvents {

    @SubscribeEvent
    public static void onLivingDamage(LivingDamageEvent.Pre event) {
        LivingEntity target = event.getEntity();

        // 1) РќР°С€ СЃРЅР°СЂСЏРґ-СЃРїРµР»Р» РґР°С‘С‚ РєР°СЃС‚РѕРјРЅС‹Р№ СѓСЂРѕРЅ
        if (event.getSource() != null && event.getSource().getDirectEntity() instanceof Entity projectile) {
            if (projectile instanceof FireboltEntity fb) {
                float customDamage = fb.getSpellDamage();
                event.setNewDamage(customDamage);
            }
        }

        // 2) Р‘РѕРЅСѓСЃ РѕС‚ РєРѕРЅС‚РµРЅС‚РЅРѕРіРѕ РѕСЂСѓР¶РёСЏ Р°С‚Р°РєСѓСЋС‰РµРіРѕ (РїСЂРёРјРµСЂ DebugSword)
        Entity src = event.getSource() != null ? event.getSource().getEntity() : null;
        if (src instanceof Player attacker) {
            if (attacker.getMainHandItem().getItem() instanceof DebugSwordItem) {
                float scaled = DebugSwordItem.getScaledDamage(attacker);
                event.setNewDamage(scaled);
            }
        }

        // РќРёРєР°РєРёС… commit/kill/setNewDamage(0f) Р·РґРµСЃСЊ!
        // Р”Р°Р»РµРµ СѓРїСЂР°РІР»РµРЅРёРµ РїРµСЂРµС…РІР°С‚РёС‚ grimcore: CoreDamageEvents.onLivingDamage(...)
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events\KeyInputHandler.java ---
package com.doomspire.grimfate.events;

import com.doomspire.grimfate.client.KeyBindings;
import com.doomspire.grimfate.network.ModNetworking;
import net.neoforged.neoforge.client.event.InputEvent;
import net.neoforged.neoforge.common.NeoForge;

public class KeyInputHandler {
    public KeyInputHandler() {
        NeoForge.EVENT_BUS.addListener(this::onKeyInput);
    }

    private void onKeyInput(InputEvent.Key event) {
        if (KeyBindings.CAST_SPELL.consumeClick()) {
            ModNetworking.sendCastSpell();
        }
    }
}




--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events\MobInitHandler.java ---
package com.doomspire.grimfate.events;
/*РЎРўРђР‘РР›Р¬РќР«Р™ РљРћР”*/
import com.doomspire.grimcore.stats.MobStats;
import com.doomspire.grimcore.stats.ModAttachments;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.LivingEntity;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.event.entity.EntityJoinLevelEvent;

public class MobInitHandler {

    @SubscribeEvent
    public void onEntityJoin(EntityJoinLevelEvent event) {
        if (!(event.getEntity() instanceof LivingEntity living)) {
            return;
        }

        // Р•СЃР»Рё СѓР¶Рµ РµСЃС‚СЊ СЃС‚Р°С‚С‹ вЂ” РІС‹С…РѕРґРёРј
        if (living.hasData(ModAttachments.MOB_STATS)) {
            return;
        }

        // РЎРѕР·РґР°С‘Рј СЃС‚Р°С‚С‹ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
        MobStats stats = MobStats.DEFAULT; // вљЎ РёСЃРїРѕР»СЊР·СѓРµРј Р·Р°РіРѕС‚РѕРІРєСѓ DEFAULT
        living.setData(ModAttachments.MOB_STATS, stats);

        // Р›РѕРі РґР»СЏ РѕС‚Р»Р°РґРєРё
        ResourceLocation id = BuiltInRegistries.ENTITY_TYPE.getKey(living.getType());
        String mobName = id != null ? id.toString() : "unknown";
        System.out.println("[grimfate] Attached MobStats to " + mobName);
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events\PlayerEvents.java ---
package com.doomspire.grimfate.events;

import com.doomspire.grimcore.runtime.PlayerRuntimeManager;
import com.doomspire.grimcore.stats.ModAttachments;
import com.doomspire.grimcore.stats.PlayerStats;
import com.doomspire.grimcore.stats.PlayerStatsProvider;
import net.minecraft.server.level.ServerPlayer;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.attachment.AttachmentType;
import net.neoforged.neoforge.event.entity.player.PlayerEvent;

public class PlayerEvents {

    @SubscribeEvent
    public static void onPlayerJoin(PlayerEvent.PlayerLoggedInEvent event) {
        var player = event.getEntity();

        if (!player.hasData(ModAttachments.PLAYER_STATS.get())) {
            player.setData((AttachmentType<PlayerStats>) ModAttachments.PLAYER_STATS.get(), PlayerStats.DEFAULT);
        }
    }

    @SubscribeEvent
    public static void onPlayerLoggedOut(PlayerEvent.PlayerLoggedOutEvent event) {
        if (event.getEntity() instanceof ServerPlayer player) {
            PlayerStatsProvider.clearMutableCache(player);
            PlayerRuntimeManager.remove(player);
        }
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\events\RegenEvents.java ---
package com.doomspire.grimfate.events;

import com.doomspire.grimcore.stats.MutablePlayerStats;
import com.doomspire.grimcore.stats.PlayerStats;
import com.doomspire.grimcore.stats.PlayerStatsProvider;
import com.doomspire.grimcore.runtime.PlayerRuntimeData;
import com.doomspire.grimcore.runtime.PlayerRuntimeManager;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.LivingEntity;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.neoforge.event.tick.PlayerTickEvent;
import net.neoforged.neoforge.event.tick.EntityTickEvent;
import com.doomspire.grimcore.stats.EntityStatsUtils;

/**
 * Р РµРіРµРЅРµСЂР°С†РёСЏ Р·РґРѕСЂРѕРІСЊСЏ/РјР°РЅС‹ СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј per-player runtime accumulators
 * Рё mutable runtime-stats.
 */
public class RegenEvents {

    @SubscribeEvent
    public static void onPlayerTick(PlayerTickEvent.Pre event) {
        if (!(event.getEntity() instanceof ServerPlayer player)) return;
        if (player.level().isClientSide()) return;

        PlayerStats stats = PlayerStatsProvider.get(player);
        if (stats == null) return;

        PlayerRuntimeData runtime = PlayerRuntimeManager.getOrCreate(player);
        MutablePlayerStats mstats = PlayerStatsProvider.getMutable(player);

        // === Р РµРіРµРЅ Р·РґРѕСЂРѕРІСЊСЏ ===
        double healthPerTick = (double) stats.healthRegen() / 20.0;
        runtime.healthAccumulator += healthPerTick;
        if (runtime.healthAccumulator >= 1.0) {
            int amount = (int) runtime.healthAccumulator;
            int newHp = Math.min(mstats.maxHealth, mstats.health + amount);
            mstats.setHealth(newHp);
            runtime.healthAccumulator -= amount;
            runtime.dirty = true;
        }

        // === Р РµРіРµРЅ РјР°РЅС‹ ===
        double manaPerTick = (double) stats.manaRegen() / 20.0;
        runtime.manaAccumulator += manaPerTick;
        if (runtime.manaAccumulator >= 1.0) {
            int amount = (int) runtime.manaAccumulator;
            int newMana = Math.min(mstats.maxMana, mstats.mana + amount);
            mstats.setMana(newMana);
            runtime.manaAccumulator -= amount;
            runtime.dirty = true;
        }

        // commit (РµСЃР»Рё РёРЅС‚РµСЂРІР°Р» СЃРёРЅРєР° РїСЂРѕС€С‘Р»)
        PlayerStatsProvider.commitIfDirty(player);
    }

    @SubscribeEvent
    public static void onEntityTick(EntityTickEvent.Pre event) {
        if (!(event.getEntity() instanceof LivingEntity entity)) return;
        if (entity.level().isClientSide()) return;

        // Р”Р»СЏ РјРѕР±РѕРІ РѕСЃС‚Р°РІР»СЏРµРј СЂРµР¶Рµ СЂР°Р±РѕС‚Сѓ: СЂР°Р· РІ 200 С‚РёРєРѕРІ, РєР°Рє Рё Р±С‹Р»Рѕ СЂР°РЅСЊС€Рµ.
        if (entity.tickCount % 200 != 0) return;

        EntityStatsUtils.applyRegen(entity);
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\ModNetworking.java ---
package com.doomspire.grimfate.network;

import com.doomspire.grimfate.core.Grimfate;
import com.doomspire.grimfate.network.packet.*;
import com.doomspire.grimcore.network.CoreNetworking;
import net.minecraft.client.Minecraft;
import net.minecraft.client.multiplayer.ClientPacketListener;
import net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent;

/** Р РµРіРёСЃС‚СЂР°С†РёСЏ Рё РєР»РёРµРЅС‚СЃРєР°СЏ РѕС‚РїСЂР°РІРєР° payload'РѕРІ РјРѕРґР°. */
public final class ModNetworking {
    private ModNetworking() {}

    /** Р РµРіРёСЃС‚СЂРёСЂСѓРµС‚СЃСЏ РёР· РјРѕРґ-Р±Р°СЃР° (СЃРј. Grimfate ctor). */
    public static void register(RegisterPayloadHandlersEvent event) {
        // Р•СЃР»Рё РІ СЏРґСЂРµ РїРѕСЏРІСЏС‚СЃСЏ СЃРІРѕРё РїР°РєРµС‚С‹ вЂ” СЂРµРіРёСЃС‚СЂРёСЂСѓРµРј РёС… С‚РѕР¶Рµ
        CoreNetworking.register(event);

        // РќР°С€ РєР°РЅР°Р»: РІ 1.21.x registrar РїСЂРёРЅРёРјР°РµС‚ СЃС‚СЂРѕРєСѓ РІРµСЂСЃРёРё РїСЂРѕС‚РѕРєРѕР»Р°
        event.registrar(Grimfate.NET_PROTOCOL)
                .playToServer(CastSpellPacket.TYPE, CastSpellPacket.STREAM_CODEC, CastSpellPacket::handle);
        var registrar = event.registrar(Grimfate.MODID);

        registrar.playToServer(SBScan.TYPE, SBScan.CODEC, SBScan::handle);
        registrar.playToServer(SBListRecipes.TYPE, SBListRecipes.CODEC, SBListRecipes::handle);
        registrar.playToServer(SBAutoFill.TYPE, SBAutoFill.CODEC, SBAutoFill::handle);
        registrar.playToServer(SBReset.TYPE, SBReset.CODEC, SBReset::handle);

        registrar.playToClient(CBRecipes.TYPE, CBRecipes.CODEC, CBRecipes::handle);
    }
    public static void sendToServer(Object msg) {
        // NeoForge 1.21: СЃРѕРѕР±С‰РµРЅРёСЏ С€Р»С‘Рј С‡РµСЂРµР· PacketDistributor вЂ” РЅРѕ РґР»СЏ РїСЂРѕСЃС‚РѕС‚С‹ РІ РїР°РєРµС‚Р°С… РµСЃС‚СЊ СЃС‚Р°С‚РёС‡РµСЃРєРёРµ send()
        // РћСЃС‚Р°РІР»РµРЅРѕ РґР»СЏ СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚Рё: СЃРј. СЂРµР°Р»РёР·Р°С†РёСЋ РІ СЃР°РјРёС… РїР°РєРµС‚Р°С….
    }
    /** РћС‚РїСЂР°РІРєР° C2S СЃ РєР»РёРµРЅС‚Р°. */
    public static void sendCastSpell() {
        ClientPacketListener conn = Minecraft.getInstance().getConnection();
        if (conn != null) {
            conn.send(new CastSpellPacket());
        }
    }
}










--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet\CastSpellPacket.java ---
package com.doomspire.grimfate.network.packet;

import com.doomspire.grimfate.debug.DebugFireboltSpell;
import net.minecraft.network.RegistryFriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.neoforged.neoforge.network.handling.IPayloadContext;

/**
 * РџСѓСЃС‚РѕР№ C2S-РїР°РєРµС‚ РґР»СЏ РєР°СЃС‚Р° С‚РµСЃС‚РѕРІРѕРіРѕ СЃРїРµР»Р»Р°.
 */
public record CastSpellPacket() implements CustomPacketPayload {

    public static final Type<CastSpellPacket> TYPE =
            new Type<>(ResourceLocation.fromNamespaceAndPath("grimfate", "cast_spell"));

    // РћР±СЏР·Р°С‚РµР»СЊРЅРѕ RegistryFriendlyByteBuf РЅР° 1.21.x
    public static final StreamCodec<RegistryFriendlyByteBuf, CastSpellPacket> STREAM_CODEC =
            StreamCodec.of(
                    (buf, pkt) -> {},               // encode (РЅРµС‚ РїРѕР»РµР№)
                    buf -> new CastSpellPacket()    // decode
            );

    @Override
    public Type<? extends CustomPacketPayload> type() {
        return TYPE;
    }

    /** РћР±СЂР°Р±РѕС‚С‡РёРє РЅР° СЃС‚РѕСЂРѕРЅРµ СЃРµСЂРІРµСЂР°. */
    public static void handle(CastSpellPacket pkt, IPayloadContext ctx) {
        // РќР° СЃС‚РѕСЂРѕРЅРµ СЃРµСЂРІРµСЂР° ctx.player() Р±СѓРґРµС‚ ServerPlayer
        ctx.enqueueWork(() -> {
            var p = ctx.player();
            if (p instanceof ServerPlayer sp) {
                DebugFireboltSpell.cast(sp);
            }
        });
    }
}








--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet\CBRecipes.java ---
package com.doomspire.grimfate.network.packet;

import com.doomspire.grimfate.client.screen.TestCraftingStationScreen;
import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.client.Minecraft;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.ByteBufCodecs;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.network.PacketDistributor;
import net.neoforged.neoforge.network.handling.IPayloadContext;

import java.util.List;

public record CBRecipes(List<ResourceLocation> recipes) implements CustomPacketPayload {
    public static final Type<CBRecipes> TYPE = new Type<>(ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "cb_recipes"));
    public static final StreamCodec<FriendlyByteBuf, CBRecipes> CODEC =
            StreamCodec.composite(ResourceLocation.STREAM_CODEC.apply(ByteBufCodecs.list()),
                    CBRecipes::recipes, CBRecipes::new);

    @Override public Type<? extends CustomPacketPayload> type() { return TYPE; }

    public static void handle(CBRecipes msg, IPayloadContext ctx) {
        ctx.enqueueWork(() -> {
            var mc = Minecraft.getInstance();
            if (mc.screen instanceof TestCraftingStationScreen sc) {
                TestCraftingStationScreen.RecipeListOverlay.set(msg.recipes());
            }
        });
    }

    public static void send(net.minecraft.server.level.ServerPlayer sp, List<ResourceLocation> list) {
        PacketDistributor.sendToPlayer(sp, new CBRecipes(list));
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet\SBAutoFill.java ---
package com.doomspire.grimfate.network.packet;

import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.ByteBufCodecs;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.network.handling.IPayloadContext;

public record SBAutoFill(ResourceLocation recipeId) implements CustomPacketPayload {
    public static final Type<SBAutoFill> TYPE = new Type<>(ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "sb_autofill"));
    public static final StreamCodec<FriendlyByteBuf, SBAutoFill> CODEC =
            StreamCodec.composite(ResourceLocation.STREAM_CODEC, SBAutoFill::recipeId, SBAutoFill::new);

    @Override public Type<? extends CustomPacketPayload> type() { return TYPE; }

    public static void handle(SBAutoFill msg, IPayloadContext ctx) {
        var sp = (net.minecraft.server.level.ServerPlayer) ctx.player();
        ctx.enqueueWork(() -> {
            if (sp.containerMenu instanceof TestCraftingStationMenu menu) {
                menu.be().autofill(msg.recipeId());
            }
        });
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet\SBListRecipes.java ---
package com.doomspire.grimfate.network.packet;

import com.doomspire.grimfate.core.Grimfate;
import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import com.doomspire.grimfate.client.screen.TestCraftingStationScreen;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.network.handling.IPayloadContext;

import java.util.List;

public record SBListRecipes() implements CustomPacketPayload {
    public static final Type<SBListRecipes> TYPE = new Type<>(ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "sb_list_recipes"));
    public static final StreamCodec<FriendlyByteBuf, SBListRecipes> CODEC = StreamCodec.unit(new SBListRecipes());

    @Override public Type<? extends CustomPacketPayload> type() { return TYPE; }

    public static void handle(SBListRecipes msg, IPayloadContext ctx) {
        var sp = (net.minecraft.server.level.ServerPlayer) ctx.player();
        ctx.enqueueWork(() -> {
            if (sp.containerMenu instanceof TestCraftingStationMenu menu) {
                var list = menu.be().listAvailableCircle6(sp.getInventory());
                CBRecipes.send(sp, list);
            }
        });
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet\SBReset.java ---
package com.doomspire.grimfate.network.packet;

import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.network.handling.IPayloadContext;

public record SBReset() implements CustomPacketPayload {
    public static final Type<SBReset> TYPE =
            new Type<>(ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "sb_reset"));
    public static final StreamCodec<FriendlyByteBuf, SBReset> CODEC = StreamCodec.unit(new SBReset());

    @Override public Type<? extends CustomPacketPayload> type() { return TYPE; }

    public static void handle(SBReset msg, IPayloadContext ctx) {
        var sp = (net.minecraft.server.level.ServerPlayer) ctx.player();
        ctx.enqueueWork(() -> {
            if (sp.containerMenu instanceof TestCraftingStationMenu menu) {
                menu.be().reset(sp);
            }
        });
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\network\packet\SBScan.java ---
package com.doomspire.grimfate.network.packet;

import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import com.doomspire.grimfate.core.Grimfate;
import com.doomspire.grimfate.block.TestCraftingStationBlockEntity;
import net.minecraft.core.BlockPos;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.neoforged.neoforge.network.handling.IPayloadContext;

public record SBScan() implements CustomPacketPayload {
    public static final Type<SBScan> TYPE = new Type<>(ResourceLocation.fromNamespaceAndPath(Grimfate.MODID, "sb_scan"));
    public static final StreamCodec<FriendlyByteBuf, SBScan> CODEC = StreamCodec.unit(new SBScan());

    @Override public Type<? extends CustomPacketPayload> type() { return TYPE; }

    public static void handle(SBScan msg, IPayloadContext ctx) {
        ServerPlayer sp = (ServerPlayer) ctx.player();
        ctx.enqueueWork(() -> {
            if (sp.containerMenu instanceof TestCraftingStationMenu menu) {
                menu.be().rescan();
            }
        });
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\registry\ModBlockEntities.java ---
package com.doomspire.grimfate.registry;

import com.doomspire.grimfate.core.Grimfate;
import com.doomspire.grimfate.block.TestCraftingStationBlockEntity;
import net.minecraft.core.registries.Registries;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredRegister;

public final class ModBlockEntities {
    public static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITIES =
            DeferredRegister.create(Registries.BLOCK_ENTITY_TYPE, Grimfate.MODID);

    public static final DeferredHolder<BlockEntityType<?>, BlockEntityType<TestCraftingStationBlockEntity>> TEST_CRAFTER =
            BLOCK_ENTITIES.register("test_crafting_station",
                    () -> BlockEntityType.Builder.of(TestCraftingStationBlockEntity::new, ModBlocks.TEST_CRAFTER.get()).build(null));

    private ModBlockEntities(){}

    public static void init(IEventBus bus) {
        BLOCK_ENTITIES.register(bus);
    }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\registry\ModBlocks.java ---
package com.doomspire.grimfate.registry;

import com.doomspire.grimfate.block.TestCraftingStationBlock;
import com.doomspire.grimfate.block.WildHerbBlock;
import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.core.registries.Registries;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredBlock;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredRegister;

public final class ModBlocks {
    public static final DeferredRegister.Blocks BLOCKS =
            DeferredRegister.createBlocks(Grimfate.MODID);
    public static final DeferredRegister<Item> ITEMS =
            DeferredRegister.create(Registries.ITEM, Grimfate.MODID);

    public static final DeferredBlock<Block> ODAMITE_ORE = BLOCKS.register("odamite_ore",
            () -> new Block(BlockBehaviour.Properties.of()
                    .strength(3.0F, 3.0F)
                    .requiresCorrectToolForDrops()));

    public static final DeferredBlock<Block> DEEPSLATE_ODAMITE_ORE = BLOCKS.register("deepslate_odamite_ore",
            () -> new Block(BlockBehaviour.Properties.of()
                    .strength(4.5F, 3.0F)
                    .requiresCorrectToolForDrops()));

    public static final DeferredBlock<WildHerbBlock> WILD_HERB = BLOCKS.register("wild_herb",
            () -> new WildHerbBlock(BlockBehaviour.Properties.of()
                    .noCollission()
                    .instabreak()
                    .sound(SoundType.GRASS)));

    public static final DeferredHolder<Block, TestCraftingStationBlock> TEST_CRAFTER =
            BLOCKS.register("test_crafting_station",
                    () -> new TestCraftingStationBlock(
                            BlockBehaviour.Properties.of()
                                    .strength(2.5F)
                                    .noOcclusion()));

    // BlockItem РґР»СЏ СЃС‚Р°РЅС†РёРё (ID СЃРѕРІРїР°РґР°РµС‚ СЃ Р±Р»РѕРєРѕРј)
    public static final DeferredHolder<Item, BlockItem> TEST_CRAFTER_ITEM =
            ITEMS.register("test_crafting_station",
                    () -> new BlockItem(TEST_CRAFTER.get(), new Item.Properties()));

    private ModBlocks() {}

    public static void init(IEventBus bus) {
        BLOCKS.register(bus);
        ITEMS.register(bus); // <-- РћР‘РЇР—РђРўР•Р›Р¬РќРћ: СЂРµРіРёСЃС‚СЂРёСЂСѓРµРј item-СЂРµРµСЃС‚СЂ СЌС‚РѕРіРѕ РєР»Р°СЃСЃР°
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\registry\ModItems.java ---
package com.doomspire.grimfate.registry;

import com.doomspire.grimfate.core.Grimfate;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredItem;
import net.neoforged.neoforge.registries.DeferredRegister;

public final class ModItems {
    public static final DeferredRegister.Items ITEMS =
            DeferredRegister.createItems(Grimfate.MODID);

    // РњР°С‚РµСЂРёР°Р»С‹
    public static final DeferredItem<Item> RAW_ODAMITE = ITEMS.register("raw_odamite",
            () -> new Item(new Item.Properties()));

    public static final DeferredItem<Item> ODAMITE_INGOT = ITEMS.register("odamite_ingot",
            () -> new Item(new Item.Properties()));

    // BlockItem РґР»СЏ Р±Р»РѕРєРѕРІ
    public static final DeferredItem<BlockItem> ODAMITE_ORE_ITEM = ITEMS.register("odamite_ore",
            () -> new BlockItem(ModBlocks.ODAMITE_ORE.get(), new Item.Properties()));

    public static final DeferredItem<BlockItem> DEEPSLATE_ODAMITE_ORE_ITEM = ITEMS.register("deepslate_odamite_ore",
            () -> new BlockItem(ModBlocks.DEEPSLATE_ODAMITE_ORE.get(), new Item.Properties()));

    public static final DeferredItem<BlockItem> WILD_HERB_ITEM = ITEMS.register("wild_herb",
            () -> new BlockItem(ModBlocks.WILD_HERB.get(), new Item.Properties()));

    public static final DeferredHolder<Item, Item> TEST_CRAFTED_ITEM =
            ITEMS.register("test_crafted_item", () -> new Item(new Item.Properties()));

    public static void init(IEventBus bus) {
        ITEMS.register(bus);
    }
}


--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\registry\ModMenus.java ---
package com.doomspire.grimfate.registry;

import com.doomspire.grimfate.core.Grimfate;
import com.doomspire.grimfate.client.menu.TestCraftingStationMenu;
import net.minecraft.core.BlockPos;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.RegistryFriendlyByteBuf;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.inventory.MenuType;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.common.extensions.IMenuTypeExtension;  // Р’РђР–РќРћ: РёРјРµРЅРЅРѕ СЌС‚РѕС‚ РёРјРїРѕСЂС‚
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredRegister;

public final class ModMenus {
    public static final DeferredRegister<MenuType<?>> MENUS =
            DeferredRegister.create(Registries.MENU, Grimfate.MODID);

    public static final DeferredHolder<MenuType<?>, MenuType<TestCraftingStationMenu>> TEST_CRAFTER =
            MENUS.register("test_crafting_station",
                    () -> IMenuTypeExtension.create((int id, Inventory inv, RegistryFriendlyByteBuf buf) -> {
                        BlockPos pos = buf.readBlockPos();
                        Level level = inv.player.level();
                        BlockEntity be = level.getBlockEntity(pos);
                        return new TestCraftingStationMenu(id, inv, be);
                    })
            );

    private ModMenus() {}
    public static void init(IEventBus bus) { MENUS.register(bus); }
}



--- D:\doomspire\grimfate\src\main\java\com\doomspire\grimfate\spell\FireboltEntity.java ---
package com.doomspire.grimfate.spell;

import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.projectile.SmallFireball;
import net.minecraft.world.level.Level;
import net.minecraft.world.phys.Vec3;

/**
 * РљР°СЃС‚РѕРјРЅС‹Р№ С„Р°РµСЂР±РѕР»С‚ СЃ РїРѕР»РµРј СѓСЂРѕРЅР°.
 */
public class FireboltEntity extends SmallFireball {
    private final int spellDamage;

    public FireboltEntity(Level level, LivingEntity shooter, Vec3 direction, int damage) {
        // РёСЃРїРѕР»СЊР·СѓРµРј СЃС‚Р°РЅРґР°СЂС‚РЅС‹Р№ EntityType.SMALL_FIREBALL
        super(EntityType.SMALL_FIREBALL, level);
        this.setOwner(shooter);

        // Р—Р°РґР°С‘Рј РІРµРєС‚РѕСЂ РґРІРёР¶РµРЅРёСЏ (СЃРєРѕСЂРѕСЃС‚СЊ)
        this.setDeltaMovement(direction);

        this.spellDamage = damage;
    }

    public int getSpellDamage() {
        return spellDamage;
    }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\blockstates\deepslate_odamite_ore.json ---
{
  "variants": { "": { "model": "grimfate:block/deepslate_odamite_ore" } }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\blockstates\odamite_ore.json ---
{
  "variants": { "": { "model": "grimfate:block/odamite_ore" } }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\blockstates\test_crafting_station.json ---
{
  "variants": {
    "part=base,facing=north": { "model": "grimfate:block/test_crafting_station_base" },
    "part=base,facing=east":  { "model": "grimfate:block/test_crafting_station_base", "y": 90 },
    "part=base,facing=south": { "model": "grimfate:block/test_crafting_station_base", "y": 180 },
    "part=base,facing=west":  { "model": "grimfate:block/test_crafting_station_base", "y": 270 },

    "part=ext,facing=north":  { "model": "grimfate:block/test_crafting_station_ext" },
    "part=ext,facing=east":   { "model": "grimfate:block/test_crafting_station_ext", "y": 90 },
    "part=ext,facing=south":  { "model": "grimfate:block/test_crafting_station_ext", "y": 180 },
    "part=ext,facing=west":   { "model": "grimfate:block/test_crafting_station_ext", "y": 270 }
  }
}



--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\blockstates\wild_herb.json ---
{
  "variants": { "": { "model": "grimfate:block/wild_herb" } }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\lang\en_us.json ---
{
  "itemGroup.grimfate": "Example Mod Tab",
  "block.grimfate.example_block": "Example Block",
  "item.grimfate.example_item": "Example Item",

  "grimfate.configuration.title": "Pantheon of Doom Configs",
  "grimfate.configuration.section.grimfate.common.toml": "Pantheon of Doom Configs",
  "grimfate.configuration.section.grimfate.common.toml.title": "Pantheon of Doom Configs",
  "grimfate.configuration.items": "Item List",
  "grimfate.configuration.logDirtBlock": "Log Dirt Block",
  "grimfate.configuration.magicNumberIntroduction": "Magic Number Text",
  "grimfate.configuration.magicNumber": "Magic Number",
  "block.grimfate.test_crafting_station": "Test Crafting Station",
  "item.grimfate.test_crafted_item": "Test Crafted Item",
  "gui.grimfate.recipes": "Recipes",
  "gui.grimfate.refresh": "Refresh",
  "gui.grimfate.autofill": "Autofill",
  "gui.grimfate.reset": "Reset"
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\lang\ru_ru.json ---
{
  "block.grimfate.odamite_ore": "РћРґР°РјРёС‚РѕРІР°СЏ СЂСѓРґР°",
  "block.grimfate.deepslate_odamite_ore": "Р“Р»СѓР±РёРЅРЅР°СЏ РѕРґР°РјРёС‚РѕРІР°СЏ СЂСѓРґР°",
  "block.grimfate.wild_herb": "Р”РёРєР°СЏ С‚СЂР°РІР°",
  "item.grimfate.raw_odamite": "РЎС‹СЂРѕР№ РѕРґР°РјРёС‚",
  "item.grimfate.odamite_ingot": "РЎР»РёС‚РѕРє РѕРґР°РјРёС‚Р°",
  "block.grimfate.test_crafting_station": "РўРµСЃС‚РѕРІР°СЏ РєСЂР°С„С‚РѕРІР°СЏ СЃС‚Р°РЅС†РёСЏ",
  "item.grimfate.test_crafted_item": "РўРµСЃС‚РѕРІС‹Р№ СЃРєСЂР°С„С‡РµРЅРЅС‹Р№ РїСЂРµРґРјРµС‚",
  "gui.grimfate.recipes": "Р РµС†РµРїС‚С‹",
  "gui.grimfate.refresh": "РћР±РЅРѕРІРёС‚СЊ",
  "gui.grimfate.autofill": "Р—Р°РїРѕР»РЅРёС‚СЊ",
  "gui.grimfate.reset": "РЎР±СЂРѕСЃРёС‚СЊ"
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\block\deepslate_odamite_ore.json ---
{
  "parent": "minecraft:block/cube_all",
  "textures": { "all": "grimfate:block/deepslate_odamite_ore" }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\block\odamite_ore.json ---
{
  "parent": "minecraft:block/cube_all",
  "textures": { "all": "grimfate:block/odamite_ore" }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\block\test_crafting_station.json ---
{
	"format_version": "1.9.0",
	"credit": "Made with Blockbench",
	"texture_size": [64, 64],
	"textures": {
		"0": "block/texture1",
		"1": "block/texture2",
		"2": "block/texture3",
		"3": "block/texture4",
		"4": "block/texture_main",
		"particle": "block/texture"
	},
	"elements": [
		{
			"name": "main",
			"from": [0, 12, 0],
			"to": [32, 16, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [16, 12, 0]},
			"faces": {
				"north": {"uv": [0, 8, 8, 9], "texture": "#4"},
				"east": {"uv": [8, 1, 12, 2], "texture": "#4"},
				"south": {"uv": [8, 0, 16, 1], "texture": "#4"},
				"west": {"uv": [8, 2, 12, 3], "texture": "#4"},
				"up": {"uv": [8, 4, 0, 0], "texture": "#4"},
				"down": {"uv": [8, 4, 0, 8], "texture": "#4"}
			}
		},
		{
			"name": "nw",
			"from": [28, 0, 0],
			"to": [32, 12, 4],
			"rotation": {"angle": 0, "axis": "y", "origin": [28, 0, 0]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#2"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#2"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#2"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#2"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#2"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#2"}
			}
		},
		{
			"name": "sw",
			"from": [28, 0, 12],
			"to": [32, 12, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [28, 0, 12]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#3"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#3"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#3"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#3"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#3"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#3"}
			}
		},
		{
			"name": "se",
			"from": [0, 0, 12],
			"to": [4, 12, 16],
			"rotation": {"angle": 0, "axis": "y", "origin": [0, 0, 12]},
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#0"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#0"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#0"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#0"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#0"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#0"}
			}
		},
		{
			"name": "ne",
			"from": [0, 0, 0],
			"to": [4, 12, 4],
			"faces": {
				"north": {"uv": [0, 0, 2, 6], "texture": "#1"},
				"east": {"uv": [2, 0, 4, 6], "texture": "#1"},
				"south": {"uv": [4, 0, 6, 6], "texture": "#1"},
				"west": {"uv": [0, 6, 2, 12], "texture": "#1"},
				"up": {"uv": [8, 2, 6, 0], "texture": "#1"},
				"down": {"uv": [4, 6, 2, 8], "texture": "#1"}
			}
		}
	]
}

--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\block\wild_herb.json ---
{
  "parent": "minecraft:block/cross",
  "textures": { "cross": "grimfate:block/wild_herb" }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item\deepslate_odamite_ore.json ---
{ "parent": "grimfate:block/deepslate_odamite_ore" }


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ingot.json ---
{
  "parent": "minecraft:item/generated",
  "textures": { "layer0": "grimfate:item/odamite_ingot" }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item\odamite_ore.json ---
{ "parent": "grimfate:block/odamite_ore" }


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item\raw_odamite.json ---
{
  "parent": "minecraft:item/generated",
  "textures": { "layer0": "grimfate:item/raw_odamite" }
}


--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item\test_crafting_station.json ---
{
  "parent": "grimfate:block/test_crafting_station_base"
}



--- D:\doomspire\grimfate\src\main\resources\assets\grimfate\models\item\wild_herb.json ---
{ "parent": "grimfate:block/wild_herb" }


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\deepslate_odamite_ore.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:raw_odamite" } ]
    }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\odamite_ore.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:raw_odamite" } ]
    }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\test_crafting_station.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        { "type": "minecraft:item", "name": "grimfate:test_crafting_station" }
      ],
      "conditions": [
        { "condition": "minecraft:survives_explosion" }
      ]
    }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\loot_tables\blocks\wild_herb.json ---
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [ { "type": "minecraft:item", "name": "grimfate:wild_herb" } ]
    }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_odamite_ore.json ---
{
  "type": "neoforge:add_features",
  "biomes": "#minecraft:is_overworld",
  "features": "grimfate:ore_odamite_placed",
  "step": "underground_ores"
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\neoforge\biome_modifier\add_wild_herb.json ---
{
  "type": "neoforge:add_features",
  "biomes": "#grimfate:has_wild_herb",
  "features": "grimfate:wild_herb_patch_placed",
  "step": "vegetal_decoration"
}



--- D:\doomspire\grimfate\src\main\resources\data\grimfate\recipes\odamite_ingot_from_smelting.json ---
{
  "type": "minecraft:smelting",
  "ingredient": { "item": "grimfate:raw_odamite" },
  "result": "grimfate:odamite_ingot",
  "experience": 0.7,
  "cookingtime": 200
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\recipes\test_crafted_item.json ---
{
  "type": "grimcore:circle6",
  "ingredients": [
    { "item": "minecraft:cobblestone" },
    { "item": "minecraft:oak_planks" },
    { "item": "minecraft:iron_ingot" },
    { "item": "minecraft:copper_ingot" },
    { "item": "minecraft:gold_ingot" },
    { "item": "minecraft:dirt" }
  ],
  "result": { "item": "grimfate:test_crafted_item", "count": 1 }
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\tags\worldgen\biome\has_wild_herb.json ---
{
  "replace": false,
  "values": [
    "minecraft:plains",
    "minecraft:forest",
    "minecraft:flower_forest",
    "minecraft:taiga"
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\ore_odamite.json ---
{
  "type": "minecraft:ore",
  "config": {
    "discard_chance_on_air_exposure": 0.0,
    "size": 7,
    "targets": [
      {
        "state": { "Name": "grimfate:odamite_ore" },
        "target": { "predicate_type": "minecraft:tag_match", "tag": "minecraft:stone_ore_replaceables" }
      },
      {
        "state": { "Name": "grimfate:deepslate_odamite_ore" },
        "target": { "predicate_type": "minecraft:tag_match", "tag": "minecraft:deepslate_ore_replaceables" }
      }
    ]
  }
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_patch.json ---
{
  "type": "minecraft:random_patch",
  "config": {
    "tries": 48,
    "xz_spread": 6,
    "y_spread": 2,
    "feature": "grimfate:wild_herb_simple_placed"
  }
}



--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\configured_feature\wild_herb_simple.json ---
{
  "type": "minecraft:simple_block",
  "config": {
    "to_place": {
      "type": "minecraft:simple_state_provider",
      "state": { "Name": "grimfate:wild_herb" }
    }
  }
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\ore_odamite_placed.json ---
{
  "feature": "grimfate:ore_odamite",
  "placement": [
    { "type": "minecraft:count", "count": 10 },
    { "type": "minecraft:in_square" },
    {
      "type": "minecraft:height_range",
      "height": {
        "type": "minecraft:trapezoid",
        "min_inclusive": { "absolute": -32 },
        "max_inclusive": { "absolute": 48 }
      }
    },
    { "type": "minecraft:biome" }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_patch_placed.json ---
{
  "feature": "grimfate:wild_herb_patch",
  "placement": [
    { "type": "minecraft:count", "count": 2 },
    { "type": "minecraft:in_square" },
    { "type": "minecraft:heightmap", "heightmap": "WORLD_SURFACE_WG" },
    { "type": "minecraft:biome" }
  ]
}



--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\placed_feature\wild_herb_simple_placed.json ---
{
  "feature": "grimfate:wild_herb_simple",
  "placement": []
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\structure\underground_dungeon.json ---
{
  "type": "minecraft:jigsaw",
  "start_pool": "grimfate:dungeon/main_pool",
  "size": 7,
  "use_expansion_hack": false,
  "step": "underground_structures",
  "terrain_adaptation": "beard_box",

  "start_height": { "above_bottom": 32 },

  "max_distance_from_center": 80,
  "biomes": "#minecraft:is_overworld",
  "spawn_overrides": {}
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\structure_set\underground_dungeon.json ---
{
  "structures": [
    { "structure": "grimfate:underground_dungeon", "weight": 1 }
  ],
  "placement": {
    "type": "minecraft:random_spread",
    "spacing": 30,
    "separation": 12,
    "salt": 424242
  }
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\main_pool.json ---
{
  "name": "grimfate:dungeon/main_pool",
  "fallback": "minecraft:empty",
  "elements": [
    {
      "weight": 3,
      "element": {
        "location": "grimfate:room",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 3,
      "element": {
        "location": "grimfate:corridor",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 1,
      "element": {
        "location": "grimfate:upstair_room",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\grimfate\worldgen\template_pool\dungeon\upstairs_pool.json ---
{
  "name": "grimfate:dungeon/upstairs_pool",
  "fallback": "minecraft:empty",
  "elements": [
    {
      "weight": 3,
      "element": {
        "location": "grimfate:upstair",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    },
    {
      "weight": 1,
      "element": {
        "location": "grimfate:entrance",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }
  ]
}


--- D:\doomspire\grimfate\src\main\resources\data\minecraft\tags\blocks\mineable\pickaxe.json ---
{ "replace": false, "values": [
  "grimfate:odamite_ore",
  "grimfate:deepslate_odamite_ore"
]}


--- D:\doomspire\grimfate\src\main\resources\data\minecraft\tags\blocks\needs_iron_tool.json ---
{ "replace": false, "values": [
  "grimfate:odamite_ore",
  "grimfate:deepslate_odamite_ore"
]}

